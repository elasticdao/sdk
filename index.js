(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('iterate-value'), require('call-bind/callBound')) :
	typeof define === 'function' && define.amd ? define(['exports', 'iterate-value', 'call-bind/callBound'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['elastic-dao-sdk'] = {}, global.iterateValue, global.callBound$2));
}(this, (function (exports, iterateValue, callBound$2) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var iterateValue__default = /*#__PURE__*/_interopDefaultLegacy(iterateValue);
	var callBound__default = /*#__PURE__*/_interopDefaultLegacy(callBound$2);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, basedir, module) {
		return module = {
		  path: basedir,
		  exports: {},
		  require: function (path, base) {
	      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
	    }
		}, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';

	var implementation = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};

	var functionBind = Function.prototype.bind || implementation;

	var toStr$1 = Object.prototype.toString;

	var isArguments = function isArguments(value) {
		var str = toStr$1.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr$1.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	var keysShim;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has = Object.prototype.hasOwnProperty;
		var toStr$2 = Object.prototype.toString;
		var isArgs = isArguments; // eslint-disable-line global-require
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr$2.call(object) === '[object Function]';
			var isArguments = isArgs(object);
			var isString = isObject && toStr$2.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	var implementation$1 = keysShim;

	var slice$1 = Array.prototype.slice;


	var origKeys = Object.keys;
	var keysShim$1 = origKeys ? function keys(o) { return origKeys(o); } : implementation$1;

	var originalKeys = Object.keys;

	keysShim$1.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArguments(object)) {
						return originalKeys(slice$1.call(object));
					}
					return originalKeys(object);
				};
			}
		} else {
			Object.keys = keysShim$1;
		}
		return Object.keys || keysShim$1;
	};

	var objectKeys = keysShim$1;

	var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

	var toStr$3 = Object.prototype.toString;
	var concat = Array.prototype.concat;
	var origDefineProperty = Object.defineProperty;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr$3.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			origDefineProperty(obj, 'x', { enumerable: false, value: obj });
			// eslint-disable-next-line no-unused-vars, no-restricted-syntax
			for (var _ in obj) { // jscs:ignore disallowUnusedVariables
				return false;
			}
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			origDefineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = objectKeys(map);
		if (hasSymbols) {
			props = concat.call(props, Object.getOwnPropertySymbols(map));
		}
		for (var i = 0; i < props.length; i += 1) {
			defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
		}
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	var defineProperties_1 = defineProperties;

	var requirePromise = function requirePromise() {
		if (typeof Promise !== 'function') {
			throw new TypeError('`Promise.allSettled` requires a global `Promise` be available.');
		}
	};

	/* eslint complexity: [2, 18], max-statements: [2, 33] */
	var shams = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};

	var origSymbol = commonjsGlobal.Symbol;


	var hasSymbols$1 = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return shams();
	};

	/* globals
		Atomics,
		SharedArrayBuffer,
	*/

	var undefined$1;

	var $TypeError = TypeError;

	var $gOPD = Object.getOwnPropertyDescriptor;
	if ($gOPD) {
		try {
			$gOPD({}, '');
		} catch (e) {
			$gOPD = null; // this is IE 8, which has a broken gOPD
		}
	}

	var throwTypeError = function () { throw new $TypeError(); };
	var ThrowTypeError = $gOPD
		? (function () {
			try {
				// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
				arguments.callee; // IE 8 does not throw here
				return throwTypeError;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError;
				}
			}
		}())
		: throwTypeError;

	var hasSymbols$2 = hasSymbols$1();

	var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto
	var generatorFunction =  undefined$1;
	var asyncFunction =  undefined$1;
	var asyncGenFunction =  undefined$1;

	var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

	var INTRINSICS = {
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
		'%ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer.prototype,
		'%ArrayIteratorPrototype%': hasSymbols$2 ? getProto([][Symbol.iterator]()) : undefined$1,
		'%ArrayPrototype%': Array.prototype,
		'%ArrayProto_entries%': Array.prototype.entries,
		'%ArrayProto_forEach%': Array.prototype.forEach,
		'%ArrayProto_keys%': Array.prototype.keys,
		'%ArrayProto_values%': Array.prototype.values,
		'%AsyncFromSyncIteratorPrototype%': undefined$1,
		'%AsyncFunction%': asyncFunction,
		'%AsyncFunctionPrototype%':  undefined$1,
		'%AsyncGenerator%':  undefined$1,
		'%AsyncGeneratorFunction%': asyncGenFunction,
		'%AsyncGeneratorPrototype%':  undefined$1,
		'%AsyncIteratorPrototype%':  undefined$1,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
		'%Boolean%': Boolean,
		'%BooleanPrototype%': Boolean.prototype,
		'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
		'%DataViewPrototype%': typeof DataView === 'undefined' ? undefined$1 : DataView.prototype,
		'%Date%': Date,
		'%DatePrototype%': Date.prototype,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%ErrorPrototype%': Error.prototype,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%EvalErrorPrototype%': EvalError.prototype,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
		'%Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array.prototype,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
		'%Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array.prototype,
		'%Function%': Function,
		'%FunctionPrototype%': Function.prototype,
		'%Generator%':  undefined$1,
		'%GeneratorFunction%': generatorFunction,
		'%GeneratorPrototype%':  undefined$1,
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
		'%Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array.prototype,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
		'%Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined$1 : Int8Array.prototype,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
		'%Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array.prototype,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols$2 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
		'%JSONParse%': typeof JSON === 'object' ? JSON.parse : undefined$1,
		'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
		'%MapPrototype%': typeof Map === 'undefined' ? undefined$1 : Map.prototype,
		'%Math%': Math,
		'%Number%': Number,
		'%NumberPrototype%': Number.prototype,
		'%Object%': Object,
		'%ObjectPrototype%': Object.prototype,
		'%ObjProto_toString%': Object.prototype.toString,
		'%ObjProto_valueOf%': Object.prototype.valueOf,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
		'%PromisePrototype%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype,
		'%PromiseProto_then%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype.then,
		'%Promise_all%': typeof Promise === 'undefined' ? undefined$1 : Promise.all,
		'%Promise_reject%': typeof Promise === 'undefined' ? undefined$1 : Promise.reject,
		'%Promise_resolve%': typeof Promise === 'undefined' ? undefined$1 : Promise.resolve,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
		'%RangeError%': RangeError,
		'%RangeErrorPrototype%': RangeError.prototype,
		'%ReferenceError%': ReferenceError,
		'%ReferenceErrorPrototype%': ReferenceError.prototype,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
		'%RegExp%': RegExp,
		'%RegExpPrototype%': RegExp.prototype,
		'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
		'%SetPrototype%': typeof Set === 'undefined' ? undefined$1 : Set.prototype,
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
		'%SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer.prototype,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols$2 ? getProto(''[Symbol.iterator]()) : undefined$1,
		'%StringPrototype%': String.prototype,
		'%Symbol%': hasSymbols$2 ? Symbol : undefined$1,
		'%SymbolPrototype%': hasSymbols$2 ? Symbol.prototype : undefined$1,
		'%SyntaxError%': SyntaxError,
		'%SyntaxErrorPrototype%': SyntaxError.prototype,
		'%ThrowTypeError%': ThrowTypeError,
		'%TypedArray%': TypedArray,
		'%TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined$1,
		'%TypeError%': $TypeError,
		'%TypeErrorPrototype%': $TypeError.prototype,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
		'%Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array.prototype,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
		'%Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray.prototype,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
		'%Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array.prototype,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
		'%Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array.prototype,
		'%URIError%': URIError,
		'%URIErrorPrototype%': URIError.prototype,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
		'%WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap.prototype,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,
		'%WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet.prototype
	};


	var $replace = functionBind.call(Function.call, String.prototype.replace);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var result = [];
		$replace(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : (number || match);
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		if (!(name in INTRINSICS)) {
			throw new SyntaxError('intrinsic ' + name + ' does not exist!');
		}

		// istanbul ignore if // hopefully this is impossible to test :-)
		if (typeof INTRINSICS[name] === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return INTRINSICS[name];
	};

	var GetIntrinsic = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new TypeError('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new TypeError('"allowMissing" argument must be a boolean');
		}

		var parts = stringToPath(name);

		var value = getBaseIntrinsic('%' + (parts.length > 0 ? parts[0] : '') + '%', allowMissing);
		for (var i = 1; i < parts.length; i += 1) {
			if (value != null) {
				if ($gOPD && (i + 1) >= parts.length) {
					var desc = $gOPD(value, parts[i]);
					if (!allowMissing && !(parts[i] in value)) {
						throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					// By convention, when a data property is converted to an accessor
					// property to emulate a data property that does not suffer from
					// the override mistake, that accessor's getter is marked with
					// an `originalValue` property. Here, when we detect this, we
					// uphold the illusion by pretending to see that original data
					// property, i.e., returning the value rather than the getter
					// itself.
					value = desc && 'get' in desc && !('originalValue' in desc.get) ? desc.get : value[parts[i]];
				} else {
					value = value[parts[i]];
				}
			}
		}
		return value;
	};

	var callBind = createCommonjsModule(function (module) {





	var $apply = GetIntrinsic('%Function.prototype.apply%');
	var $call = GetIntrinsic('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || functionBind.call($call, $apply);

	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			// IE 8 has a broken defineProperty
			$defineProperty = null;
		}
	}

	module.exports = function callBind() {
		return $reflectApply(functionBind, $call, arguments);
	};

	var applyBind = function applyBind() {
		return $reflectApply(functionBind, $apply, arguments);
	};

	if ($defineProperty) {
		$defineProperty(module.exports, 'apply', { value: applyBind });
	} else {
		module.exports.apply = applyBind;
	}
	});

	var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

	var callBound = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.')) {
			return callBind(intrinsic);
		}
		return intrinsic;
	};

	var $PromiseResolve = callBound('Promise.resolve', true);

	// https://ecma-international.org/ecma-262/9.0/#sec-promise-resolve

	var PromiseResolve = function PromiseResolve(C, x) {
		if (!$PromiseResolve) {
			throw new SyntaxError('This environment does not support Promises.');
		}
		return $PromiseResolve(C, x);
	};

	// https://www.ecma-international.org/ecma-262/5.1/#sec-8

	var Type = function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	};

	// https://ecma-international.org/ecma-262/6.0/#sec-ecmascript-data-types-and-values

	var Type$1 = function Type$1(x) {
		if (typeof x === 'symbol') {
			return 'Symbol';
		}
		return Type(x);
	};

	var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

	/* globals
		AggregateError,
		Atomics,
		FinalizationRegistry,
		SharedArrayBuffer,
		WeakRef,
	*/

	var undefined$2;

	var $SyntaxError = SyntaxError;
	var $Function = Function;
	var $TypeError$1 = TypeError;

	// eslint-disable-next-line consistent-return
	var getEvalledConstructor = function (expressionSyntax) {
		try {
			// eslint-disable-next-line no-new-func
			return Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
		} catch (e) {}
	};

	var $gOPD$1 = Object.getOwnPropertyDescriptor;
	if ($gOPD$1) {
		try {
			$gOPD$1({}, '');
		} catch (e) {
			$gOPD$1 = null; // this is IE 8, which has a broken gOPD
		}
	}

	var throwTypeError$1 = function () { throw new $TypeError$1(); };
	var ThrowTypeError$1 = $gOPD$1
		? (function () {
			try {
				// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
				arguments.callee; // IE 8 does not throw here
				return throwTypeError$1;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD$1(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError$1;
				}
			}
		}())
		: throwTypeError$1;

	var hasSymbols$3 = hasSymbols$1();

	var getProto$1 = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

	var asyncGenFunction$1 = getEvalledConstructor('async function* () {}');
	var asyncGenFunctionPrototype = asyncGenFunction$1 ? asyncGenFunction$1.prototype : undefined$2;
	var asyncGenPrototype = asyncGenFunctionPrototype ? asyncGenFunctionPrototype.prototype : undefined$2;

	var TypedArray$1 = typeof Uint8Array === 'undefined' ? undefined$2 : getProto$1(Uint8Array);

	var INTRINSICS$1 = {
		'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$2 : AggregateError,
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$2 : ArrayBuffer,
		'%ArrayIteratorPrototype%': hasSymbols$3 ? getProto$1([][Symbol.iterator]()) : undefined$2,
		'%AsyncFromSyncIteratorPrototype%': undefined$2,
		'%AsyncFunction%': getEvalledConstructor('async function () {}'),
		'%AsyncGenerator%': asyncGenFunctionPrototype,
		'%AsyncGeneratorFunction%': asyncGenFunction$1,
		'%AsyncIteratorPrototype%': asyncGenPrototype ? getProto$1(asyncGenPrototype) : undefined$2,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined$2 : Atomics,
		'%BigInt%': typeof BigInt === 'undefined' ? undefined$2 : BigInt,
		'%Boolean%': Boolean,
		'%DataView%': typeof DataView === 'undefined' ? undefined$2 : DataView,
		'%Date%': Date,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$2 : Float32Array,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$2 : Float64Array,
		'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$2 : FinalizationRegistry,
		'%Function%': $Function,
		'%GeneratorFunction%': getEvalledConstructor('function* () {}'),
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$2 : Int8Array,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$2 : Int16Array,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$2 : Int32Array,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols$3 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$2,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined$2,
		'%Map%': typeof Map === 'undefined' ? undefined$2 : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$3 ? undefined$2 : getProto$1(new Map()[Symbol.iterator]()),
		'%Math%': Math,
		'%Number%': Number,
		'%Object%': Object,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined$2 : Promise,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined$2 : Proxy,
		'%RangeError%': RangeError,
		'%ReferenceError%': ReferenceError,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined$2 : Reflect,
		'%RegExp%': RegExp,
		'%Set%': typeof Set === 'undefined' ? undefined$2 : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$3 ? undefined$2 : getProto$1(new Set()[Symbol.iterator]()),
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$2 : SharedArrayBuffer,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols$3 ? getProto$1(''[Symbol.iterator]()) : undefined$2,
		'%Symbol%': hasSymbols$3 ? Symbol : undefined$2,
		'%SyntaxError%': $SyntaxError,
		'%ThrowTypeError%': ThrowTypeError$1,
		'%TypedArray%': TypedArray$1,
		'%TypeError%': $TypeError$1,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$2 : Uint8Array,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$2 : Uint8ClampedArray,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$2 : Uint16Array,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$2 : Uint32Array,
		'%URIError%': URIError,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$2 : WeakMap,
		'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$2 : WeakRef,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$2 : WeakSet
	};

	var LEGACY_ALIASES = {
		'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
		'%ArrayPrototype%': ['Array', 'prototype'],
		'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
		'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
		'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
		'%ArrayProto_values%': ['Array', 'prototype', 'values'],
		'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
		'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
		'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
		'%BooleanPrototype%': ['Boolean', 'prototype'],
		'%DataViewPrototype%': ['DataView', 'prototype'],
		'%DatePrototype%': ['Date', 'prototype'],
		'%ErrorPrototype%': ['Error', 'prototype'],
		'%EvalErrorPrototype%': ['EvalError', 'prototype'],
		'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
		'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
		'%FunctionPrototype%': ['Function', 'prototype'],
		'%Generator%': ['GeneratorFunction', 'prototype'],
		'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
		'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
		'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
		'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
		'%JSONParse%': ['JSON', 'parse'],
		'%JSONStringify%': ['JSON', 'stringify'],
		'%MapPrototype%': ['Map', 'prototype'],
		'%NumberPrototype%': ['Number', 'prototype'],
		'%ObjectPrototype%': ['Object', 'prototype'],
		'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
		'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
		'%PromisePrototype%': ['Promise', 'prototype'],
		'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
		'%Promise_all%': ['Promise', 'all'],
		'%Promise_reject%': ['Promise', 'reject'],
		'%Promise_resolve%': ['Promise', 'resolve'],
		'%RangeErrorPrototype%': ['RangeError', 'prototype'],
		'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
		'%RegExpPrototype%': ['RegExp', 'prototype'],
		'%SetPrototype%': ['Set', 'prototype'],
		'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
		'%StringPrototype%': ['String', 'prototype'],
		'%SymbolPrototype%': ['Symbol', 'prototype'],
		'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
		'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
		'%TypeErrorPrototype%': ['TypeError', 'prototype'],
		'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
		'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
		'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
		'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
		'%URIErrorPrototype%': ['URIError', 'prototype'],
		'%WeakMapPrototype%': ['WeakMap', 'prototype'],
		'%WeakSetPrototype%': ['WeakSet', 'prototype']
	};



	var $concat = functionBind.call(Function.call, Array.prototype.concat);
	var $spliceApply = functionBind.call(Function.apply, Array.prototype.splice);
	var $replace$1 = functionBind.call(Function.call, String.prototype.replace);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName$1 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar$1 = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath$1 = function stringToPath(string) {
		var result = [];
		$replace$1(string, rePropName$1, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace$1(subString, reEscapeChar$1, '$1') : number || match;
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic$1 = function getBaseIntrinsic(name, allowMissing) {
		var intrinsicName = name;
		var alias;
		if (src(LEGACY_ALIASES, intrinsicName)) {
			alias = LEGACY_ALIASES[intrinsicName];
			intrinsicName = '%' + alias[0] + '%';
		}

		if (src(INTRINSICS$1, intrinsicName)) {
			var value = INTRINSICS$1[intrinsicName];
			if (typeof value === 'undefined' && !allowMissing) {
				throw new $TypeError$1('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
			}

			return {
				alias: alias,
				name: intrinsicName,
				value: value
			};
		}

		throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
	};

	var GetIntrinsic$1 = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new $TypeError$1('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new $TypeError$1('"allowMissing" argument must be a boolean');
		}

		var parts = stringToPath$1(name);
		var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

		var intrinsic = getBaseIntrinsic$1('%' + intrinsicBaseName + '%', allowMissing);
		var intrinsicRealName = intrinsic.name;
		var value = intrinsic.value;
		var skipFurtherCaching = false;

		var alias = intrinsic.alias;
		if (alias) {
			intrinsicBaseName = alias[0];
			$spliceApply(parts, $concat([0, 1], alias));
		}

		for (var i = 1, isOwn = true; i < parts.length; i += 1) {
			var part = parts[i];
			if (part === 'constructor' || !isOwn) {
				skipFurtherCaching = true;
			}

			intrinsicBaseName += '.' + part;
			intrinsicRealName = '%' + intrinsicBaseName + '%';

			if (src(INTRINSICS$1, intrinsicRealName)) {
				value = INTRINSICS$1[intrinsicRealName];
			} else if (value != null) {
				if ($gOPD$1 && (i + 1) >= parts.length) {
					var desc = $gOPD$1(value, part);
					isOwn = !!desc;

					if (!allowMissing && !(part in value)) {
						throw new $TypeError$1('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					// By convention, when a data property is converted to an accessor
					// property to emulate a data property that does not suffer from
					// the override mistake, that accessor's getter is marked with
					// an `originalValue` property. Here, when we detect this, we
					// uphold the illusion by pretending to see that original data
					// property, i.e., returning the value rather than the getter
					// itself.
					if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
						value = desc.get;
					} else {
						value = value[part];
					}
				} else {
					isOwn = src(value, part);
					value = value[part];
				}

				if (isOwn && !skipFurtherCaching) {
					INTRINSICS$1[intrinsicRealName] = value;
				}
			}
		}
		return value;
	};

	var $TypeError$2 = GetIntrinsic$1('%TypeError%');

	// http://www.ecma-international.org/ecma-262/5.1/#sec-9.10

	var CheckObjectCoercible = function CheckObjectCoercible(value, optMessage) {
		if (value == null) {
			throw new $TypeError$2(optMessage || ('Cannot call method on ' + value));
		}
		return value;
	};

	var RequireObjectCoercible = CheckObjectCoercible;

	var global$1 = (typeof global !== "undefined" ? global :
	  typeof self !== "undefined" ? self :
	  typeof window !== "undefined" ? window : {});

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString = {}.toString;

	var isArray = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	var _kMaxLength = kMaxLength();

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype;
	  Buffer.__proto__ = Uint8Array;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer.alloc(+length)
	}
	Buffer.isBuffer = isBuffer;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};

	Buffer.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var bufferEs6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Buffer: Buffer,
		INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
		SlowBuffer: SlowBuffer,
		isBuffer: isBuffer,
		kMaxLength: _kMaxLength
	});

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config = {};

	function noop() {}

	var on = noop;
	var addListener = noop;
	var once = noop;
	var off = noop;
	var removeListener = noop;
	var removeAllListeners = noop;
	var emit = noop;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global$1.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var browser$1 = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env,
	  argv: argv,
	  version: version,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var inherits;
	if (typeof Object.create === 'function'){
	  inherits = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$1 = inherits;

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global$1.process)) {
	    return function() {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (browser$1.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (browser$1.throwDeprecation) {
	        throw new Error(msg);
	      } else if (browser$1.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = browser$1.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction$1(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction$1(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray$1(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction$1(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray$1(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isString(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction$1(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer$1(maybeBuf) {
	  return Buffer.isBuffer(maybeBuf);
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log() {
	  console.log('%s - %s', timestamp(), format.apply(null, arguments));
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var require$$0 = {
	  inherits: inherits$1,
	  _extend: _extend,
	  log: log,
	  isBuffer: isBuffer$1,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction$1,
	  isError: isError,
	  isDate: isDate,
	  isObject: isObject,
	  isRegExp: isRegExp,
	  isUndefined: isUndefined,
	  isSymbol: isSymbol,
	  isString: isString,
	  isNumber: isNumber,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean,
	  isArray: isArray$1,
	  inspect: inspect,
	  deprecate: deprecate,
	  format: format,
	  debuglog: debuglog
	};

	var util_inspect = require$$0.inspect;

	var hasMap = typeof Map === 'function' && Map.prototype;
	var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
	var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
	var mapForEach = hasMap && Map.prototype.forEach;
	var hasSet = typeof Set === 'function' && Set.prototype;
	var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
	var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
	var setForEach = hasSet && Set.prototype.forEach;
	var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
	var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
	var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
	var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
	var booleanValueOf = Boolean.prototype.valueOf;
	var objectToString$1 = Object.prototype.toString;
	var functionToString = Function.prototype.toString;
	var match = String.prototype.match;
	var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
	var gOPS = Object.getOwnPropertySymbols;
	var symToString = typeof Symbol === 'function' ? Symbol.prototype.toString : null;
	var isEnumerable$1 = Object.prototype.propertyIsEnumerable;

	var inspectCustom = util_inspect.custom;
	var inspectSymbol = inspectCustom && isSymbol$1(inspectCustom) ? inspectCustom : null;

	var objectInspect = function inspect_(obj, options, depth, seen) {
	    var opts = options || {};

	    if (has$1(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
	        throw new TypeError('option "quoteStyle" must be "single" or "double"');
	    }
	    if (
	        has$1(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
	            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
	            : opts.maxStringLength !== null
	        )
	    ) {
	        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
	    }
	    var customInspect = has$1(opts, 'customInspect') ? opts.customInspect : true;
	    if (typeof customInspect !== 'boolean') {
	        throw new TypeError('option "customInspect", if provided, must be `true` or `false`');
	    }

	    if (
	        has$1(opts, 'indent')
	        && opts.indent !== null
	        && opts.indent !== '\t'
	        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
	    ) {
	        throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
	    }

	    if (typeof obj === 'undefined') {
	        return 'undefined';
	    }
	    if (obj === null) {
	        return 'null';
	    }
	    if (typeof obj === 'boolean') {
	        return obj ? 'true' : 'false';
	    }

	    if (typeof obj === 'string') {
	        return inspectString(obj, opts);
	    }
	    if (typeof obj === 'number') {
	        if (obj === 0) {
	            return Infinity / obj > 0 ? '0' : '-0';
	        }
	        return String(obj);
	    }
	    if (typeof obj === 'bigint') {
	        return String(obj) + 'n';
	    }

	    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
	    if (typeof depth === 'undefined') { depth = 0; }
	    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
	        return isArray$2(obj) ? '[Array]' : '[Object]';
	    }

	    var indent = getIndent(opts, depth);

	    if (typeof seen === 'undefined') {
	        seen = [];
	    } else if (indexOf(seen, obj) >= 0) {
	        return '[Circular]';
	    }

	    function inspect(value, from, noIndent) {
	        if (from) {
	            seen = seen.slice();
	            seen.push(from);
	        }
	        if (noIndent) {
	            var newOpts = {
	                depth: opts.depth
	            };
	            if (has$1(opts, 'quoteStyle')) {
	                newOpts.quoteStyle = opts.quoteStyle;
	            }
	            return inspect_(value, newOpts, depth + 1, seen);
	        }
	        return inspect_(value, opts, depth + 1, seen);
	    }

	    if (typeof obj === 'function') {
	        var name = nameOf(obj);
	        var keys = arrObjKeys(obj, inspect);
	        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');
	    }
	    if (isSymbol$1(obj)) {
	        var symString = symToString.call(obj);
	        return typeof obj === 'object' ? markBoxed(symString) : symString;
	    }
	    if (isElement(obj)) {
	        var s = '<' + String(obj.nodeName).toLowerCase();
	        var attrs = obj.attributes || [];
	        for (var i = 0; i < attrs.length; i++) {
	            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
	        }
	        s += '>';
	        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
	        s += '</' + String(obj.nodeName).toLowerCase() + '>';
	        return s;
	    }
	    if (isArray$2(obj)) {
	        if (obj.length === 0) { return '[]'; }
	        var xs = arrObjKeys(obj, inspect);
	        if (indent && !singleLineValues(xs)) {
	            return '[' + indentedJoin(xs, indent) + ']';
	        }
	        return '[ ' + xs.join(', ') + ' ]';
	    }
	    if (isError$1(obj)) {
	        var parts = arrObjKeys(obj, inspect);
	        if (parts.length === 0) { return '[' + String(obj) + ']'; }
	        return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
	    }
	    if (typeof obj === 'object' && customInspect) {
	        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
	            return obj[inspectSymbol]();
	        } else if (typeof obj.inspect === 'function') {
	            return obj.inspect();
	        }
	    }
	    if (isMap(obj)) {
	        var mapParts = [];
	        mapForEach.call(obj, function (value, key) {
	            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
	        });
	        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
	    }
	    if (isSet(obj)) {
	        var setParts = [];
	        setForEach.call(obj, function (value) {
	            setParts.push(inspect(value, obj));
	        });
	        return collectionOf('Set', setSize.call(obj), setParts, indent);
	    }
	    if (isWeakMap(obj)) {
	        return weakCollectionOf('WeakMap');
	    }
	    if (isWeakSet(obj)) {
	        return weakCollectionOf('WeakSet');
	    }
	    if (isNumber$1(obj)) {
	        return markBoxed(inspect(Number(obj)));
	    }
	    if (isBigInt(obj)) {
	        return markBoxed(inspect(bigIntValueOf.call(obj)));
	    }
	    if (isBoolean$1(obj)) {
	        return markBoxed(booleanValueOf.call(obj));
	    }
	    if (isString$1(obj)) {
	        return markBoxed(inspect(String(obj)));
	    }
	    if (!isDate$1(obj) && !isRegExp$1(obj)) {
	        var ys = arrObjKeys(obj, inspect);
	        if (ys.length === 0) { return '{}'; }
	        if (indent) {
	            return '{' + indentedJoin(ys, indent) + '}';
	        }
	        return '{ ' + ys.join(', ') + ' }';
	    }
	    return String(obj);
	};

	function wrapQuotes(s, defaultStyle, opts) {
	    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
	    return quoteChar + s + quoteChar;
	}

	function quote(s) {
	    return String(s).replace(/"/g, '&quot;');
	}

	function isArray$2(obj) { return toStr$4(obj) === '[object Array]'; }
	function isDate$1(obj) { return toStr$4(obj) === '[object Date]'; }
	function isRegExp$1(obj) { return toStr$4(obj) === '[object RegExp]'; }
	function isError$1(obj) { return toStr$4(obj) === '[object Error]'; }
	function isSymbol$1(obj) { return toStr$4(obj) === '[object Symbol]'; }
	function isString$1(obj) { return toStr$4(obj) === '[object String]'; }
	function isNumber$1(obj) { return toStr$4(obj) === '[object Number]'; }
	function isBigInt(obj) { return toStr$4(obj) === '[object BigInt]'; }
	function isBoolean$1(obj) { return toStr$4(obj) === '[object Boolean]'; }

	var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
	function has$1(obj, key) {
	    return hasOwn.call(obj, key);
	}

	function toStr$4(obj) {
	    return objectToString$1.call(obj);
	}

	function nameOf(f) {
	    if (f.name) { return f.name; }
	    var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);
	    if (m) { return m[1]; }
	    return null;
	}

	function indexOf(xs, x) {
	    if (xs.indexOf) { return xs.indexOf(x); }
	    for (var i = 0, l = xs.length; i < l; i++) {
	        if (xs[i] === x) { return i; }
	    }
	    return -1;
	}

	function isMap(x) {
	    if (!mapSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        mapSize.call(x);
	        try {
	            setSize.call(x);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof Map; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakMap(x) {
	    if (!weakMapHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakMapHas.call(x, weakMapHas);
	        try {
	            weakSetHas.call(x, weakSetHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isSet(x) {
	    if (!setSize || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        setSize.call(x);
	        try {
	            mapSize.call(x);
	        } catch (m) {
	            return true;
	        }
	        return x instanceof Set; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isWeakSet(x) {
	    if (!weakSetHas || !x || typeof x !== 'object') {
	        return false;
	    }
	    try {
	        weakSetHas.call(x, weakSetHas);
	        try {
	            weakMapHas.call(x, weakMapHas);
	        } catch (s) {
	            return true;
	        }
	        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
	    } catch (e) {}
	    return false;
	}

	function isElement(x) {
	    if (!x || typeof x !== 'object') { return false; }
	    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
	        return true;
	    }
	    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
	}

	function inspectString(str, opts) {
	    if (str.length > opts.maxStringLength) {
	        var remaining = str.length - opts.maxStringLength;
	        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
	        return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;
	    }
	    // eslint-disable-next-line no-control-regex
	    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
	    return wrapQuotes(s, 'single', opts);
	}

	function lowbyte(c) {
	    var n = c.charCodeAt(0);
	    var x = {
	        8: 'b',
	        9: 't',
	        10: 'n',
	        12: 'f',
	        13: 'r'
	    }[n];
	    if (x) { return '\\' + x; }
	    return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();
	}

	function markBoxed(str) {
	    return 'Object(' + str + ')';
	}

	function weakCollectionOf(type) {
	    return type + ' { ? }';
	}

	function collectionOf(type, size, entries, indent) {
	    var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');
	    return type + ' (' + size + ') {' + joinedEntries + '}';
	}

	function singleLineValues(xs) {
	    for (var i = 0; i < xs.length; i++) {
	        if (indexOf(xs[i], '\n') >= 0) {
	            return false;
	        }
	    }
	    return true;
	}

	function getIndent(opts, depth) {
	    var baseIndent;
	    if (opts.indent === '\t') {
	        baseIndent = '\t';
	    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
	        baseIndent = Array(opts.indent + 1).join(' ');
	    } else {
	        return null;
	    }
	    return {
	        base: baseIndent,
	        prev: Array(depth + 1).join(baseIndent)
	    };
	}

	function indentedJoin(xs, indent) {
	    if (xs.length === 0) { return ''; }
	    var lineJoiner = '\n' + indent.prev + indent.base;
	    return lineJoiner + xs.join(',' + lineJoiner) + '\n' + indent.prev;
	}

	function arrObjKeys(obj, inspect) {
	    var isArr = isArray$2(obj);
	    var xs = [];
	    if (isArr) {
	        xs.length = obj.length;
	        for (var i = 0; i < obj.length; i++) {
	            xs[i] = has$1(obj, i) ? inspect(obj[i], obj) : '';
	        }
	    }
	    for (var key in obj) { // eslint-disable-line no-restricted-syntax
	        if (!has$1(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
	        if ((/[^\w$]/).test(key)) {
	            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
	        } else {
	            xs.push(key + ': ' + inspect(obj[key], obj));
	        }
	    }
	    if (typeof gOPS === 'function') {
	        var syms = gOPS(obj);
	        for (var j = 0; j < syms.length; j++) {
	            if (isEnumerable$1.call(obj, syms[j])) {
	                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
	            }
	        }
	    }
	    return xs;
	}

	// https://www.ecma-international.org/ecma-262/6.0/#sec-ispropertykey

	var IsPropertyKey = function IsPropertyKey(argument) {
		return typeof argument === 'string' || typeof argument === 'symbol';
	};

	// https://www.ecma-international.org/ecma-262/5.1/#sec-8

	var Type$2 = function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	};

	// https://tc39.es/ecma262/2020/#sec-ecmascript-data-types-and-values

	var Type$3 = function Type(x) {
		if (typeof x === 'symbol') {
			return 'Symbol';
		}
		if (typeof x === 'bigint') {
			return 'BigInt';
		}
		return Type$2(x);
	};

	var $TypeError$3 = GetIntrinsic$1('%TypeError%');






	/**
	 * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p
	 * 1. Assert: Type(O) is Object.
	 * 2. Assert: IsPropertyKey(P) is true.
	 * 3. Return O.[[Get]](P, O).
	 */

	var Get = function Get(O, P) {
		// 7.3.1.1
		if (Type$3(O) !== 'Object') {
			throw new $TypeError$3('Assertion failed: Type(O) is not Object');
		}
		// 7.3.1.2
		if (!IsPropertyKey(P)) {
			throw new $TypeError$3('Assertion failed: IsPropertyKey(P) is not true, got ' + objectInspect(P));
		}
		// 7.3.1.3
		return O[P];
	};

	var callBind$1 = createCommonjsModule(function (module) {





	var $apply = GetIntrinsic$1('%Function.prototype.apply%');
	var $call = GetIntrinsic$1('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic$1('%Reflect.apply%', true) || functionBind.call($call, $apply);

	var $defineProperty = GetIntrinsic$1('%Object.defineProperty%', true);

	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			// IE 8 has a broken defineProperty
			$defineProperty = null;
		}
	}

	module.exports = function callBind() {
		return $reflectApply(functionBind, $call, arguments);
	};

	var applyBind = function applyBind() {
		return $reflectApply(functionBind, $apply, arguments);
	};

	if ($defineProperty) {
		$defineProperty(module.exports, 'apply', { value: applyBind });
	} else {
		module.exports.apply = applyBind;
	}
	});

	var $indexOf$1 = callBind$1(GetIntrinsic$1('String.prototype.indexOf'));

	var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic$1(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.')) {
			return callBind$1(intrinsic);
		}
		return intrinsic;
	};

	var $Array = GetIntrinsic$1('%Array%');

	// eslint-disable-next-line global-require
	var toStr$5 = !$Array.isArray && callBound$1('Object.prototype.toString');

	// https://www.ecma-international.org/ecma-262/6.0/#sec-isarray

	var IsArray = $Array.isArray || function IsArray(argument) {
		return toStr$5(argument) === '[object Array]';
	};

	var $TypeError$4 = GetIntrinsic$1('%TypeError%');

	var isPropertyDescriptor = function IsPropertyDescriptor(ES, Desc) {
		if (ES.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};

		for (var key in Desc) { // eslint-disable-line no-restricted-syntax
			if (src(Desc, key) && !allowed[key]) {
				return false;
			}
		}

		if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
			throw new $TypeError$4('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	};

	var $defineProperty = GetIntrinsic$1('%Object.defineProperty%', true);

	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			// IE 8 has a broken defineProperty
			$defineProperty = null;
		}
	}



	var $isEnumerable = callBound$1('Object.prototype.propertyIsEnumerable');

	// eslint-disable-next-line max-params
	var DefineOwnProperty = function DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) {
		if (!$defineProperty) {
			if (!IsDataDescriptor(desc)) {
				// ES3 does not support getters/setters
				return false;
			}
			if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) {
				return false;
			}

			// fallback for ES3
			if (P in O && $isEnumerable(O, P) !== !!desc['[[Enumerable]]']) {
				// a non-enumerable existing property
				return false;
			}

			// property does not exist at all, or exists but is enumerable
			var V = desc['[[Value]]'];
			// eslint-disable-next-line no-param-reassign
			O[P] = V; // will use [[Define]]
			return SameValue(O[P], V);
		}
		$defineProperty(O, P, FromPropertyDescriptor(desc));
		return true;
	};

	var $TypeError$5 = GetIntrinsic$1('%TypeError%');
	var $SyntaxError$1 = GetIntrinsic$1('%SyntaxError%');



	var predicates = {
		// https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
		'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
			if (Type(Desc) !== 'Object') {
				return false;
			}
			var allowed = {
				'[[Configurable]]': true,
				'[[Enumerable]]': true,
				'[[Get]]': true,
				'[[Set]]': true,
				'[[Value]]': true,
				'[[Writable]]': true
			};

			for (var key in Desc) { // eslint-disable-line
				if (src(Desc, key) && !allowed[key]) {
					return false;
				}
			}

			var isData = src(Desc, '[[Value]]');
			var IsAccessor = src(Desc, '[[Get]]') || src(Desc, '[[Set]]');
			if (isData && IsAccessor) {
				throw new $TypeError$5('Property Descriptors may not be both accessor and data descriptors');
			}
			return true;
		}
	};

	var assertRecord = function assertRecord(Type, recordType, argumentName, value) {
		var predicate = predicates[recordType];
		if (typeof predicate !== 'function') {
			throw new $SyntaxError$1('unknown record type: ' + recordType);
		}
		if (!predicate(Type, value)) {
			throw new $TypeError$5(argumentName + ' must be a ' + recordType);
		}
	};

	// https://www.ecma-international.org/ecma-262/6.0/#sec-frompropertydescriptor

	var FromPropertyDescriptor = function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		assertRecord(Type$3, 'Property Descriptor', 'Desc', Desc);

		var obj = {};
		if ('[[Value]]' in Desc) {
			obj.value = Desc['[[Value]]'];
		}
		if ('[[Writable]]' in Desc) {
			obj.writable = Desc['[[Writable]]'];
		}
		if ('[[Get]]' in Desc) {
			obj.get = Desc['[[Get]]'];
		}
		if ('[[Set]]' in Desc) {
			obj.set = Desc['[[Set]]'];
		}
		if ('[[Enumerable]]' in Desc) {
			obj.enumerable = Desc['[[Enumerable]]'];
		}
		if ('[[Configurable]]' in Desc) {
			obj.configurable = Desc['[[Configurable]]'];
		}
		return obj;
	};

	// https://www.ecma-international.org/ecma-262/6.0/#sec-isaccessordescriptor

	var IsAccessorDescriptor = function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		assertRecord(Type$3, 'Property Descriptor', 'Desc', Desc);

		if (!src(Desc, '[[Get]]') && !src(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	};

	// https://www.ecma-international.org/ecma-262/6.0/#sec-isdatadescriptor

	var IsDataDescriptor = function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		assertRecord(Type$3, 'Property Descriptor', 'Desc', Desc);

		if (!src(Desc, '[[Value]]') && !src(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	};

	var _isNaN = Number.isNaN || function isNaN(a) {
		return a !== a;
	};

	// http://www.ecma-international.org/ecma-262/5.1/#sec-9.12

	var SameValue = function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return _isNaN(x) && _isNaN(y);
	};

	// http://www.ecma-international.org/ecma-262/5.1/#sec-9.2

	var ToBoolean = function ToBoolean(value) { return !!value; };

	var fnToStr = Function.prototype.toString;
	var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
	var badArrayLike;
	var isCallableMarker;
	if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
		try {
			badArrayLike = Object.defineProperty({}, 'length', {
				get: function () {
					throw isCallableMarker;
				}
			});
			isCallableMarker = {};
			// eslint-disable-next-line no-throw-literal
			reflectApply(function () { throw 42; }, null, badArrayLike);
		} catch (_) {
			if (_ !== isCallableMarker) {
				reflectApply = null;
			}
		}
	} else {
		reflectApply = null;
	}

	var constructorRegex = /^\s*class\b/;
	var isES6ClassFn = function isES6ClassFunction(value) {
		try {
			var fnStr = fnToStr.call(value);
			return constructorRegex.test(fnStr);
		} catch (e) {
			return false; // not a function
		}
	};

	var tryFunctionObject = function tryFunctionToStr(value) {
		try {
			if (isES6ClassFn(value)) { return false; }
			fnToStr.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr$6 = Object.prototype.toString;
	var fnClass = '[object Function]';
	var genClass = '[object GeneratorFunction]';
	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isCallable = reflectApply
		? function isCallable(value) {
			if (!value) { return false; }
			if (typeof value !== 'function' && typeof value !== 'object') { return false; }
			if (typeof value === 'function' && !value.prototype) { return true; }
			try {
				reflectApply(value, null, badArrayLike);
			} catch (e) {
				if (e !== isCallableMarker) { return false; }
			}
			return !isES6ClassFn(value);
		}
		: function isCallable(value) {
			if (!value) { return false; }
			if (typeof value !== 'function' && typeof value !== 'object') { return false; }
			if (typeof value === 'function' && !value.prototype) { return true; }
			if (hasToStringTag) { return tryFunctionObject(value); }
			if (isES6ClassFn(value)) { return false; }
			var strClass = toStr$6.call(value);
			return strClass === fnClass || strClass === genClass;
		};

	// http://www.ecma-international.org/ecma-262/5.1/#sec-9.11

	var IsCallable = isCallable;

	var $TypeError$6 = GetIntrinsic$1('%TypeError%');





	// https://ecma-international.org/ecma-262/5.1/#sec-8.10.5

	var ToPropertyDescriptor = function ToPropertyDescriptor(Obj) {
		if (Type$3(Obj) !== 'Object') {
			throw new $TypeError$6('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (src(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
		}
		if (src(Obj, 'configurable')) {
			desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
		}
		if (src(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (src(Obj, 'writable')) {
			desc['[[Writable]]'] = ToBoolean(Obj.writable);
		}
		if (src(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !IsCallable(getter)) {
				throw new $TypeError$6('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (src(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !IsCallable(setter)) {
				throw new $TypeError$6('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((src(desc, '[[Get]]') || src(desc, '[[Set]]')) && (src(desc, '[[Value]]') || src(desc, '[[Writable]]'))) {
			throw new $TypeError$6('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	};

	var $TypeError$7 = GetIntrinsic$1('%TypeError%');












	// https://www.ecma-international.org/ecma-262/6.0/#sec-definepropertyorthrow

	var DefinePropertyOrThrow = function DefinePropertyOrThrow(O, P, desc) {
		if (Type$3(O) !== 'Object') {
			throw new $TypeError$7('Assertion failed: Type(O) is not Object');
		}

		if (!IsPropertyKey(P)) {
			throw new $TypeError$7('Assertion failed: IsPropertyKey(P) is not true');
		}

		var Desc = isPropertyDescriptor({
			Type: Type$3,
			IsDataDescriptor: IsDataDescriptor,
			IsAccessorDescriptor: IsAccessorDescriptor
		}, desc) ? desc : ToPropertyDescriptor(desc);
		if (!isPropertyDescriptor({
			Type: Type$3,
			IsDataDescriptor: IsDataDescriptor,
			IsAccessorDescriptor: IsAccessorDescriptor
		}, Desc)) {
			throw new $TypeError$7('Assertion failed: Desc is not a valid Property Descriptor');
		}

		return DefineOwnProperty(
			IsDataDescriptor,
			SameValue,
			FromPropertyDescriptor,
			O,
			P,
			Desc
		);
	};

	var IsConstructor = createCommonjsModule(function (module) {



	var $construct = GetIntrinsic$1('%Reflect.construct%', true);

	var DefinePropertyOrThrow$1 = DefinePropertyOrThrow;
	try {
		DefinePropertyOrThrow$1({}, '', { '[[Get]]': function () {} });
	} catch (e) {
		// Accessor properties aren't supported
		DefinePropertyOrThrow$1 = null;
	}

	// https://www.ecma-international.org/ecma-262/6.0/#sec-isconstructor

	if (DefinePropertyOrThrow$1 && $construct) {
		var isConstructorMarker = {};
		var badArrayLike = {};
		DefinePropertyOrThrow$1(badArrayLike, 'length', {
			'[[Get]]': function () {
				throw isConstructorMarker;
			},
			'[[Enumerable]]': true
		});

		module.exports = function IsConstructor(argument) {
			try {
				// `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:
				$construct(argument, badArrayLike);
			} catch (err) {
				return err === isConstructorMarker;
			}
		};
	} else {
		module.exports = function IsConstructor(argument) {
			// unfortunately there's no way to truly check this without try/catch `new argument` in old environments
			return typeof argument === 'function' && !!argument.prototype;
		};
	}
	});

	var $abs = GetIntrinsic$1('%Math.abs%');

	// http://www.ecma-international.org/ecma-262/5.1/#sec-5.2

	var abs = function abs(x) {
		return $abs(x);
	};

	// var modulo = require('./modulo');
	var $floor = Math.floor;

	// http://www.ecma-international.org/ecma-262/5.1/#sec-5.2

	var floor = function floor(x) {
		// return x - modulo(x, 1);
		return $floor(x);
	};

	var $isNaN = Number.isNaN || function (a) { return a !== a; };

	var _isFinite = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

	// https://www.ecma-international.org/ecma-262/6.0/#sec-isinteger

	var IsInteger = function IsInteger(argument) {
		if (typeof argument !== 'number' || _isNaN(argument) || !_isFinite(argument)) {
			return false;
		}
		var absValue = abs(argument);
		return floor(absValue) === absValue;
	};

	var $Array$1 = GetIntrinsic$1('%Array%');
	var $species = GetIntrinsic$1('%Symbol.species%', true);
	var $TypeError$8 = GetIntrinsic$1('%TypeError%');







	// https://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate

	var ArraySpeciesCreate = function ArraySpeciesCreate(originalArray, length) {
		if (!IsInteger(length) || length < 0) {
			throw new $TypeError$8('Assertion failed: length must be an integer >= 0');
		}
		var len = length === 0 ? 0 : length;
		var C;
		var isArray = IsArray(originalArray);
		if (isArray) {
			C = Get(originalArray, 'constructor');
			// TODO: figure out how to make a cross-realm normal Array, a same-realm Array
			// if (IsConstructor(C)) {
			// 	if C is another realm's Array, C = undefined
			// 	Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?
			// }
			if ($species && Type$3(C) === 'Object') {
				C = Get(C, $species);
				if (C === null) {
					C = void 0;
				}
			}
		}
		if (typeof C === 'undefined') {
			return $Array$1(len);
		}
		if (!IsConstructor(C)) {
			throw new $TypeError$8('C must be a constructor');
		}
		return new C(len); // Construct(C, len);
	};

	var $apply = GetIntrinsic$1('%Reflect.apply%', true) || callBound$1('%Function.prototype.apply%');

	// https://www.ecma-international.org/ecma-262/6.0/#sec-call

	var Call = function Call(F, V) {
		var args = arguments.length > 2 ? arguments[2] : [];
		return $apply(F, V, args);
	};

	var $gOPD$2 = GetIntrinsic$1('%Object.getOwnPropertyDescriptor%');
	if ($gOPD$2) {
		try {
			$gOPD$2([], 'length');
		} catch (e) {
			// IE 8 has a broken gOPD
			$gOPD$2 = null;
		}
	}

	var getOwnPropertyDescriptor = $gOPD$2;

	var hasSymbols$4 = hasSymbols$1();
	var hasToStringTag$1 = hasSymbols$4 && typeof Symbol.toStringTag === 'symbol';
	var hasOwnProperty$1;
	var regexExec;
	var isRegexMarker;
	var badStringifier;

	if (hasToStringTag$1) {
		hasOwnProperty$1 = Function.call.bind(Object.prototype.hasOwnProperty);
		regexExec = Function.call.bind(RegExp.prototype.exec);
		isRegexMarker = {};

		var throwRegexMarker = function () {
			throw isRegexMarker;
		};
		badStringifier = {
			toString: throwRegexMarker,
			valueOf: throwRegexMarker
		};

		if (typeof Symbol.toPrimitive === 'symbol') {
			badStringifier[Symbol.toPrimitive] = throwRegexMarker;
		}
	}

	var toStr$7 = Object.prototype.toString;
	var gOPD = Object.getOwnPropertyDescriptor;
	var regexClass = '[object RegExp]';

	var isRegex = hasToStringTag$1
		// eslint-disable-next-line consistent-return
		? function isRegex(value) {
			if (!value || typeof value !== 'object') {
				return false;
			}

			var descriptor = gOPD(value, 'lastIndex');
			var hasLastIndexDataProperty = descriptor && hasOwnProperty$1(descriptor, 'value');
			if (!hasLastIndexDataProperty) {
				return false;
			}

			try {
				regexExec(value, badStringifier);
			} catch (e) {
				return e === isRegexMarker;
			}
		}
		: function isRegex(value) {
			// In older browsers, typeof regex incorrectly returns 'function'
			if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
				return false;
			}

			return toStr$7.call(value) === regexClass;
		};

	var $match = GetIntrinsic$1('%Symbol.match%', true);





	// https://ecma-international.org/ecma-262/6.0/#sec-isregexp

	var IsRegExp = function IsRegExp(argument) {
		if (!argument || typeof argument !== 'object') {
			return false;
		}
		if ($match) {
			var isRegExp = argument[$match];
			if (typeof isRegExp !== 'undefined') {
				return ToBoolean(isRegExp);
			}
		}
		return isRegex(argument);
	};

	var $TypeError$9 = GetIntrinsic$1('%TypeError%');



	var $isEnumerable$1 = callBound$1('Object.prototype.propertyIsEnumerable');









	// https://www.ecma-international.org/ecma-262/6.0/#sec-ordinarygetownproperty

	var OrdinaryGetOwnProperty = function OrdinaryGetOwnProperty(O, P) {
		if (Type$3(O) !== 'Object') {
			throw new $TypeError$9('Assertion failed: O must be an Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError$9('Assertion failed: P must be a Property Key');
		}
		if (!src(O, P)) {
			return void 0;
		}
		if (!getOwnPropertyDescriptor) {
			// ES3 / IE 8 fallback
			var arrayLength = IsArray(O) && P === 'length';
			var regexLastIndex = IsRegExp(O) && P === 'lastIndex';
			return {
				'[[Configurable]]': !(arrayLength || regexLastIndex),
				'[[Enumerable]]': $isEnumerable$1(O, P),
				'[[Value]]': O[P],
				'[[Writable]]': true
			};
		}
		return ToPropertyDescriptor(getOwnPropertyDescriptor(O, P));
	};

	var isPrimitive$1 = function isPrimitive(value) {
		return value === null || (typeof value !== 'function' && typeof value !== 'object');
	};

	var $Object = GetIntrinsic$1('%Object%');



	var $preventExtensions = $Object.preventExtensions;
	var $isExtensible = $Object.isExtensible;

	// https://www.ecma-international.org/ecma-262/6.0/#sec-isextensible-o

	var IsExtensible = $preventExtensions
		? function IsExtensible(obj) {
			return !isPrimitive$1(obj) && $isExtensible(obj);
		}
		: function IsExtensible(obj) {
			return !isPrimitive$1(obj);
		};

	var $TypeError$a = GetIntrinsic$1('%TypeError%');











	// https://www.ecma-international.org/ecma-262/6.0/#sec-createdataproperty

	var CreateDataProperty = function CreateDataProperty(O, P, V) {
		if (Type$3(O) !== 'Object') {
			throw new $TypeError$a('Assertion failed: Type(O) is not Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError$a('Assertion failed: IsPropertyKey(P) is not true');
		}
		var oldDesc = OrdinaryGetOwnProperty(O, P);
		var extensible = !oldDesc || IsExtensible(O);
		var immutable = oldDesc && (!oldDesc['[[Writable]]'] || !oldDesc['[[Configurable]]']);
		if (immutable || !extensible) {
			return false;
		}
		return DefineOwnProperty(
			IsDataDescriptor,
			SameValue,
			FromPropertyDescriptor,
			O,
			P,
			{
				'[[Configurable]]': true,
				'[[Enumerable]]': true,
				'[[Value]]': V,
				'[[Writable]]': true
			}
		);
	};

	var $TypeError$b = GetIntrinsic$1('%TypeError%');





	// // https://ecma-international.org/ecma-262/6.0/#sec-createdatapropertyorthrow

	var CreateDataPropertyOrThrow = function CreateDataPropertyOrThrow(O, P, V) {
		if (Type$3(O) !== 'Object') {
			throw new $TypeError$b('Assertion failed: Type(O) is not Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError$b('Assertion failed: IsPropertyKey(P) is not true');
		}
		var success = CreateDataProperty(O, P, V);
		if (!success) {
			throw new $TypeError$b('unable to create data property');
		}
		return success;
	};

	var $TypeError$c = GetIntrinsic$1('%TypeError%');




	// https://ecma-international.org/ecma-262/6.0/#sec-hasproperty

	var HasProperty = function HasProperty(O, P) {
		if (Type$3(O) !== 'Object') {
			throw new $TypeError$c('Assertion failed: `O` must be an Object');
		}
		if (!IsPropertyKey(P)) {
			throw new $TypeError$c('Assertion failed: `P` must be a Property Key');
		}
		return P in O;
	};

	var $test = GetIntrinsic$1('RegExp.prototype.test');



	var regexTester = function regexTester(regex) {
		return callBind$1($test, regex);
	};

	var isPrimitive$2 = function isPrimitive(value) {
		return value === null || (typeof value !== 'function' && typeof value !== 'object');
	};

	var getDay = Date.prototype.getDay;
	var tryDateObject = function tryDateGetDayCall(value) {
		try {
			getDay.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};

	var toStr$8 = Object.prototype.toString;
	var dateClass = '[object Date]';
	var hasToStringTag$2 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isDateObject = function isDateObject(value) {
		if (typeof value !== 'object' || value === null) {
			return false;
		}
		return hasToStringTag$2 ? tryDateObject(value) : toStr$8.call(value) === dateClass;
	};

	var isSymbol$2 = createCommonjsModule(function (module) {

	var toStr = Object.prototype.toString;
	var hasSymbols = hasSymbols$1();

	if (hasSymbols) {
		var symToStr = Symbol.prototype.toString;
		var symStringRegex = /^Symbol\(.*\)$/;
		var isSymbolObject = function isRealSymbolObject(value) {
			if (typeof value.valueOf() !== 'symbol') {
				return false;
			}
			return symStringRegex.test(symToStr.call(value));
		};

		module.exports = function isSymbol(value) {
			if (typeof value === 'symbol') {
				return true;
			}
			if (toStr.call(value) !== '[object Symbol]') {
				return false;
			}
			try {
				return isSymbolObject(value);
			} catch (e) {
				return false;
			}
		};
	} else {

		module.exports = function isSymbol(value) {
			// this environment does not support Symbols.
			return false ;
		};
	}
	});

	var hasSymbols$5 = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';






	var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
		if (typeof O === 'undefined' || O === null) {
			throw new TypeError('Cannot call method on ' + O);
		}
		if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
			throw new TypeError('hint must be "string" or "number"');
		}
		var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
		var method, result, i;
		for (i = 0; i < methodNames.length; ++i) {
			method = O[methodNames[i]];
			if (isCallable(method)) {
				result = method.call(O);
				if (isPrimitive$2(result)) {
					return result;
				}
			}
		}
		throw new TypeError('No default value');
	};

	var GetMethod = function GetMethod(O, P) {
		var func = O[P];
		if (func !== null && typeof func !== 'undefined') {
			if (!isCallable(func)) {
				throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
			}
			return func;
		}
		return void 0;
	};

	// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
	var es2015 = function ToPrimitive(input) {
		if (isPrimitive$2(input)) {
			return input;
		}
		var hint = 'default';
		if (arguments.length > 1) {
			if (arguments[1] === String) {
				hint = 'string';
			} else if (arguments[1] === Number) {
				hint = 'number';
			}
		}

		var exoticToPrim;
		if (hasSymbols$5) {
			if (Symbol.toPrimitive) {
				exoticToPrim = GetMethod(input, Symbol.toPrimitive);
			} else if (isSymbol$2(input)) {
				exoticToPrim = Symbol.prototype.valueOf;
			}
		}
		if (typeof exoticToPrim !== 'undefined') {
			var result = exoticToPrim.call(input, hint);
			if (isPrimitive$2(result)) {
				return result;
			}
			throw new TypeError('unable to convert exotic object to primitive');
		}
		if (hint === 'default' && (isDateObject(input) || isSymbol$2(input))) {
			hint = 'string';
		}
		return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
	};

	// https://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive

	var ToPrimitive = function ToPrimitive(input) {
		if (arguments.length > 1) {
			return es2015(input, arguments[1]);
		}
		return es2015(input);
	};

	var $TypeError$d = GetIntrinsic$1('%TypeError%');
	var $Number = GetIntrinsic$1('%Number%');
	var $RegExp = GetIntrinsic$1('%RegExp%');
	var $parseInteger = GetIntrinsic$1('%parseInt%');





	var $strSlice = callBound$1('String.prototype.slice');
	var isBinary = regexTester(/^0b[01]+$/i);
	var isOctal = regexTester(/^0o[0-7]+$/i);
	var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
	var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
	var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
	var hasNonWS = regexTester(nonWSregex);

	// whitespace from: https://es5.github.io/#x15.5.4.20
	// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
	var ws = [
		'\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
		'\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
		'\u2029\uFEFF'
	].join('');
	var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
	var $replace$2 = callBound$1('String.prototype.replace');
	var $trim = function (value) {
		return $replace$2(value, trimRegex, '');
	};



	// https://www.ecma-international.org/ecma-262/6.0/#sec-tonumber

	var ToNumber = function ToNumber(argument) {
		var value = isPrimitive$1(argument) ? argument : ToPrimitive(argument, $Number);
		if (typeof value === 'symbol') {
			throw new $TypeError$d('Cannot convert a Symbol value to a number');
		}
		if (typeof value === 'string') {
			if (isBinary(value)) {
				return ToNumber($parseInteger($strSlice(value, 2), 2));
			} else if (isOctal(value)) {
				return ToNumber($parseInteger($strSlice(value, 2), 8));
			} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
				return NaN;
			} else {
				var trimmed = $trim(value);
				if (trimmed !== value) {
					return ToNumber(trimmed);
				}
			}
		}
		return $Number(value);
	};

	// http://www.ecma-international.org/ecma-262/5.1/#sec-9.6

	var ToUint32 = function ToUint32(x) {
		return ToNumber(x) >>> 0;
	};

	var $Object$1 = GetIntrinsic$1('%Object%');



	// https://www.ecma-international.org/ecma-262/6.0/#sec-toobject

	var ToObject = function ToObject(value) {
		RequireObjectCoercible(value);
		return $Object$1(value);
	};

	var $String = GetIntrinsic$1('%String%');
	var $TypeError$e = GetIntrinsic$1('%TypeError%');

	// https://www.ecma-international.org/ecma-262/6.0/#sec-tostring

	var ToString = function ToString(argument) {
		if (typeof argument === 'symbol') {
			throw new $TypeError$e('Cannot convert a Symbol value to a string');
		}
		return $String(argument);
	};

	var strValue = String.prototype.valueOf;
	var tryStringObject = function tryStringObject(value) {
		try {
			strValue.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr$9 = Object.prototype.toString;
	var strClass = '[object String]';
	var hasToStringTag$3 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isString$2 = function isString(value) {
		if (typeof value === 'string') {
			return true;
		}
		if (typeof value !== 'object') {
			return false;
		}
		return hasToStringTag$3 ? tryStringObject(value) : toStr$9.call(value) === strClass;
	};

	// Check failure of by-index access of string characters (IE < 9) and failure of `0 in boxedString` (Rhino)
	var boxedString = Object('a');
	var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

	var strSplit = callBound__default['default']('String.prototype.split');

	var implementation$2 = function map(callbackfn) {
		var O = ToObject(this);
		var self = splitString && isString$2(O) ? strSplit(O, '') : O;
		var len = ToUint32(self.length);

		// If no callback function or if callback is not a callable function
		if (!IsCallable(callbackfn)) {
			throw new TypeError('Array.prototype.map callback must be a function');
		}

		var T;
		if (arguments.length > 1) {
			T = arguments[1];
		}

		var A = ArraySpeciesCreate(O, len);
		var k = 0;
		while (k < len) {
			var Pk = ToString(k);
			var kPresent = HasProperty(O, Pk);
			if (kPresent) {
				var kValue = Get(O, Pk);
				var mappedValue = Call(callbackfn, T, [kValue, k, O]);
				CreateDataPropertyOrThrow(A, Pk, mappedValue);
			}
			k += 1;
		}

		return A;
	};

	var esArrayMethodBoxesProperly = function properlyBoxed(method) {
		// Check node 0.6.21 bug where third parameter is not boxed
		var properlyBoxesNonStrict = true;
		var properlyBoxesStrict = true;
		var threwException = false;
		if (typeof method === 'function') {
			try {
				// eslint-disable-next-line max-params
				method.call('f', function (_, __, O) {
					if (typeof O !== 'object') {
						properlyBoxesNonStrict = false;
					}
				});

				method.call(
					[null],
					function () {
						'use strict';

						properlyBoxesStrict = typeof this === 'string'; // eslint-disable-line no-invalid-this
					},
					'x'
				);
			} catch (e) {
				threwException = true;
			}
			return !threwException && properlyBoxesNonStrict && properlyBoxesStrict;
		}
		return false;
	};

	var polyfill = function getPolyfill() {
		var method = Array.prototype.map;
		return esArrayMethodBoxesProperly(method) ? method : implementation$2;
	};

	var shim = function shimArrayPrototypeMap() {
		var polyfill$1 = polyfill();
		defineProperties_1(
			Array.prototype,
			{ map: polyfill$1 },
			{ map: function () { return Array.prototype.map !== polyfill$1; } }
		);
		return polyfill$1;
	};

	var polyfill$1 = polyfill();


	var $slice = callBound__default['default']('Array.prototype.slice');

	// eslint-disable-next-line no-unused-vars
	var boundMapShim = function map(array, callbackfn) {
		RequireObjectCoercible(array);
		return polyfill$1.apply(array, $slice(arguments, 1));
	};
	defineProperties_1(boundMapShim, {
		getPolyfill: polyfill,
		implementation: implementation$2,
		shim: shim
	});

	var array_prototype_map = boundMapShim;

	requirePromise();








	var all = functionBind.call(Function.call, GetIntrinsic('%Promise_all%'));
	var reject = functionBind.call(Function.call, GetIntrinsic('%Promise_reject%'));

	var implementation$3 = function allSettled(iterable) {
		var C = this;
		if (Type$1(C) !== 'Object') {
			throw new TypeError('`this` value must be an object');
		}
		var values = iterateValue__default['default'](iterable);
		return all(C, array_prototype_map(values, function (item) {
			var onFulfill = function (value) {
				return { status: 'fulfilled', value: value };
			};
			var onReject = function (reason) {
				return { status: 'rejected', reason: reason };
			};
			var itemPromise = PromiseResolve(C, item);
			try {
				return itemPromise.then(onFulfill, onReject);
			} catch (e) {
				return reject(C, e);
			}
		}));
	};

	var polyfill$2 = function getPolyfill() {
		requirePromise();
		return typeof Promise.allSettled === 'function' ? Promise.allSettled : implementation$3;
	};

	var shim$1 = function shimAllSettled() {
		requirePromise();

		var polyfill = polyfill$2();
		defineProperties_1(Promise, { allSettled: polyfill }, {
			allSettled: function testAllSettled() {
				return Promise.allSettled !== polyfill;
			}
		});
		return polyfill;
	};

	requirePromise();
	var bound = functionBind.call(Function.call, polyfill$2());

	var rebindable = function allSettled(iterable) {
		// eslint-disable-next-line no-invalid-this
		return bound(typeof this === 'undefined' ? Promise : this, iterable);
	};

	defineProperties_1(rebindable, {
		getPolyfill: polyfill$2,
		implementation: implementation$3,
		shim: shim$1
	});

	var promise_allsettled = rebindable;

	/*
	 *      bignumber.js v9.0.1
	 *      A JavaScript library for arbitrary-precision arithmetic.
	 *      https://github.com/MikeMcl/bignumber.js
	 *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
	 *      MIT Licensed.
	 *
	 *      BigNumber.prototype methods     |  BigNumber methods
	 *                                      |
	 *      absoluteValue            abs    |  clone
	 *      comparedTo                      |  config               set
	 *      decimalPlaces            dp     |      DECIMAL_PLACES
	 *      dividedBy                div    |      ROUNDING_MODE
	 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
	 *      exponentiatedBy          pow    |      RANGE
	 *      integerValue                    |      CRYPTO
	 *      isEqualTo                eq     |      MODULO_MODE
	 *      isFinite                        |      POW_PRECISION
	 *      isGreaterThan            gt     |      FORMAT
	 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
	 *      isInteger                       |  isBigNumber
	 *      isLessThan               lt     |  maximum              max
	 *      isLessThanOrEqualTo      lte    |  minimum              min
	 *      isNaN                           |  random
	 *      isNegative                      |  sum
	 *      isPositive                      |
	 *      isZero                          |
	 *      minus                           |
	 *      modulo                   mod    |
	 *      multipliedBy             times  |
	 *      negated                         |
	 *      plus                            |
	 *      precision                sd     |
	 *      shiftedBy                       |
	 *      squareRoot               sqrt   |
	 *      toExponential                   |
	 *      toFixed                         |
	 *      toFormat                        |
	 *      toFraction                      |
	 *      toJSON                          |
	 *      toNumber                        |
	 *      toPrecision                     |
	 *      toString                        |
	 *      valueOf                         |
	 *
	 */


	var
	  isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

	  mathceil = Math.ceil,
	  mathfloor = Math.floor,

	  bignumberError = '[BigNumber Error] ',
	  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

	  BASE = 1e14,
	  LOG_BASE = 14,
	  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	  SQRT_BASE = 1e7,

	  // EDITABLE
	  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
	  MAX = 1E9;                                   // 0 to MAX_INT32


	/*
	 * Create and return a BigNumber constructor.
	 */
	function clone(configObject) {
	  var div, convertBase, parseNumeric,
	    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
	    ONE = new BigNumber(1),


	    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


	    // The default values below must be integers within the inclusive ranges stated.
	    // The values can also be changed at run-time using BigNumber.set.

	    // The maximum number of decimal places for operations involving division.
	    DECIMAL_PLACES = 20,                     // 0 to MAX

	    // The rounding mode used when rounding to the above decimal places, and when using
	    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
	    // UP         0 Away from zero.
	    // DOWN       1 Towards zero.
	    // CEIL       2 Towards +Infinity.
	    // FLOOR      3 Towards -Infinity.
	    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	    ROUNDING_MODE = 4,                       // 0 to 8

	    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	    // The exponent value at and beneath which toString returns exponential notation.
	    // Number type: -7
	    TO_EXP_NEG = -7,                         // 0 to -MAX

	    // The exponent value at and above which toString returns exponential notation.
	    // Number type: 21
	    TO_EXP_POS = 21,                         // 0 to MAX

	    // RANGE : [MIN_EXP, MAX_EXP]

	    // The minimum exponent value, beneath which underflow to zero occurs.
	    // Number type: -324  (5e-324)
	    MIN_EXP = -1e7,                          // -1 to -MAX

	    // The maximum exponent value, above which overflow to Infinity occurs.
	    // Number type:  308  (1.7976931348623157e+308)
	    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	    MAX_EXP = 1e7,                           // 1 to MAX

	    // Whether to use cryptographically-secure random number generation, if available.
	    CRYPTO = false,                          // true or false

	    // The modulo mode used when calculating the modulus: a mod n.
	    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	    // The remainder (r) is calculated as: r = a - n * q.
	    //
	    // UP        0 The remainder is positive if the dividend is negative, else is negative.
	    // DOWN      1 The remainder has the same sign as the dividend.
	    //             This modulo mode is commonly known as 'truncated division' and is
	    //             equivalent to (a % n) in JavaScript.
	    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
	    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	    //             The remainder is always positive.
	    //
	    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
	    // modes are commonly used for the modulus operation.
	    // Although the other rounding modes can also be used, they may not give useful results.
	    MODULO_MODE = 1,                         // 0 to 9

	    // The maximum number of significant digits of the result of the exponentiatedBy operation.
	    // If POW_PRECISION is 0, there will be unlimited significant digits.
	    POW_PRECISION = 0,                    // 0 to MAX

	    // The format specification used by the BigNumber.prototype.toFormat method.
	    FORMAT = {
	      prefix: '',
	      groupSize: 3,
	      secondaryGroupSize: 0,
	      groupSeparator: ',',
	      decimalSeparator: '.',
	      fractionGroupSize: 0,
	      fractionGroupSeparator: '\xA0',      // non-breaking space
	      suffix: ''
	    },

	    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
	    // '-', '.', whitespace, or repeated character.
	    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
	    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


	  //------------------------------------------------------------------------------------------


	  // CONSTRUCTOR


	  /*
	   * The BigNumber constructor and exported function.
	   * Create and return a new instance of a BigNumber object.
	   *
	   * v {number|string|BigNumber} A numeric value.
	   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
	   */
	  function BigNumber(v, b) {
	    var alphabet, c, caseChanged, e, i, isNum, len, str,
	      x = this;

	    // Enable constructor call without `new`.
	    if (!(x instanceof BigNumber)) return new BigNumber(v, b);

	    if (b == null) {

	      if (v && v._isBigNumber === true) {
	        x.s = v.s;

	        if (!v.c || v.e > MAX_EXP) {
	          x.c = x.e = null;
	        } else if (v.e < MIN_EXP) {
	          x.c = [x.e = 0];
	        } else {
	          x.e = v.e;
	          x.c = v.c.slice();
	        }

	        return;
	      }

	      if ((isNum = typeof v == 'number') && v * 0 == 0) {

	        // Use `1 / n` to handle minus zero also.
	        x.s = 1 / v < 0 ? (v = -v, -1) : 1;

	        // Fast path for integers, where n < 2147483648 (2**31).
	        if (v === ~~v) {
	          for (e = 0, i = v; i >= 10; i /= 10, e++);

	          if (e > MAX_EXP) {
	            x.c = x.e = null;
	          } else {
	            x.e = e;
	            x.c = [v];
	          }

	          return;
	        }

	        str = String(v);
	      } else {

	        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

	        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
	      }

	      // Decimal point?
	      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	      // Exponential form?
	      if ((i = str.search(/e/i)) > 0) {

	        // Determine exponent.
	        if (e < 0) e = i;
	        e += +str.slice(i + 1);
	        str = str.substring(0, i);
	      } else if (e < 0) {

	        // Integer.
	        e = str.length;
	      }

	    } else {

	      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	      intCheck(b, 2, ALPHABET.length, 'Base');

	      // Allow exponential notation to be used with base 10 argument, while
	      // also rounding to DECIMAL_PLACES as with other bases.
	      if (b == 10) {
	        x = new BigNumber(v);
	        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
	      }

	      str = String(v);

	      if (isNum = typeof v == 'number') {

	        // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

	        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

	        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	        if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
	          throw Error
	           (tooManyDigits + v);
	        }
	      } else {
	        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
	      }

	      alphabet = ALPHABET.slice(0, b);
	      e = i = 0;

	      // Check that str is a valid base b number.
	      // Don't use RegExp, so alphabet can contain special characters.
	      for (len = str.length; i < len; i++) {
	        if (alphabet.indexOf(c = str.charAt(i)) < 0) {
	          if (c == '.') {

	            // If '.' is not the first character and it has not be found before.
	            if (i > e) {
	              e = len;
	              continue;
	            }
	          } else if (!caseChanged) {

	            // Allow e.g. hexadecimal 'FF' as well as 'ff'.
	            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
	                str == str.toLowerCase() && (str = str.toUpperCase())) {
	              caseChanged = true;
	              i = -1;
	              e = 0;
	              continue;
	            }
	          }

	          return parseNumeric(x, String(v), isNum, b);
	        }
	      }

	      // Prevent later check for length on converted number.
	      isNum = false;
	      str = convertBase(str, b, 10, x.s);

	      // Decimal point?
	      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
	      else e = str.length;
	    }

	    // Determine leading zeros.
	    for (i = 0; str.charCodeAt(i) === 48; i++);

	    // Determine trailing zeros.
	    for (len = str.length; str.charCodeAt(--len) === 48;);

	    if (str = str.slice(i, ++len)) {
	      len -= i;

	      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	      if (isNum && BigNumber.DEBUG &&
	        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
	          throw Error
	           (tooManyDigits + (x.s * v));
	      }

	       // Overflow?
	      if ((e = e - i - 1) > MAX_EXP) {

	        // Infinity.
	        x.c = x.e = null;

	      // Underflow?
	      } else if (e < MIN_EXP) {

	        // Zero.
	        x.c = [x.e = 0];
	      } else {
	        x.e = e;
	        x.c = [];

	        // Transform base

	        // e is the base 10 exponent.
	        // i is where to slice str to get the first element of the coefficient array.
	        i = (e + 1) % LOG_BASE;
	        if (e < 0) i += LOG_BASE;  // i < 1

	        if (i < len) {
	          if (i) x.c.push(+str.slice(0, i));

	          for (len -= LOG_BASE; i < len;) {
	            x.c.push(+str.slice(i, i += LOG_BASE));
	          }

	          i = LOG_BASE - (str = str.slice(i)).length;
	        } else {
	          i -= len;
	        }

	        for (; i--; str += '0');
	        x.c.push(+str);
	      }
	    } else {

	      // Zero.
	      x.c = [x.e = 0];
	    }
	  }


	  // CONSTRUCTOR PROPERTIES


	  BigNumber.clone = clone;

	  BigNumber.ROUND_UP = 0;
	  BigNumber.ROUND_DOWN = 1;
	  BigNumber.ROUND_CEIL = 2;
	  BigNumber.ROUND_FLOOR = 3;
	  BigNumber.ROUND_HALF_UP = 4;
	  BigNumber.ROUND_HALF_DOWN = 5;
	  BigNumber.ROUND_HALF_EVEN = 6;
	  BigNumber.ROUND_HALF_CEIL = 7;
	  BigNumber.ROUND_HALF_FLOOR = 8;
	  BigNumber.EUCLID = 9;


	  /*
	   * Configure infrequently-changing library-wide settings.
	   *
	   * Accept an object with the following optional properties (if the value of a property is
	   * a number, it must be an integer within the inclusive range stated):
	   *
	   *   DECIMAL_PLACES   {number}           0 to MAX
	   *   ROUNDING_MODE    {number}           0 to 8
	   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
	   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
	   *   CRYPTO           {boolean}          true or false
	   *   MODULO_MODE      {number}           0 to 9
	   *   POW_PRECISION       {number}           0 to MAX
	   *   ALPHABET         {string}           A string of two or more unique characters which does
	   *                                     not contain '.'.
	   *   FORMAT           {object}           An object with some of the following properties:
	   *     prefix                 {string}
	   *     groupSize              {number}
	   *     secondaryGroupSize     {number}
	   *     groupSeparator         {string}
	   *     decimalSeparator       {string}
	   *     fractionGroupSize      {number}
	   *     fractionGroupSeparator {string}
	   *     suffix                 {string}
	   *
	   * (The values assigned to the above FORMAT object properties are not checked for validity.)
	   *
	   * E.g.
	   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	   *
	   * Ignore properties/parameters set to null or undefined, except for ALPHABET.
	   *
	   * Return an object with the properties current values.
	   */
	  BigNumber.config = BigNumber.set = function (obj) {
	    var p, v;

	    if (obj != null) {

	      if (typeof obj == 'object') {

	        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
	          v = obj[p];
	          intCheck(v, 0, MAX, p);
	          DECIMAL_PLACES = v;
	        }

	        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
	          v = obj[p];
	          intCheck(v, 0, 8, p);
	          ROUNDING_MODE = v;
	        }

	        // EXPONENTIAL_AT {number|number[]}
	        // Integer, -MAX to MAX inclusive or
	        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
	          v = obj[p];
	          if (v && v.pop) {
	            intCheck(v[0], -MAX, 0, p);
	            intCheck(v[1], 0, MAX, p);
	            TO_EXP_NEG = v[0];
	            TO_EXP_POS = v[1];
	          } else {
	            intCheck(v, -MAX, MAX, p);
	            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
	          }
	        }

	        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
	        if (obj.hasOwnProperty(p = 'RANGE')) {
	          v = obj[p];
	          if (v && v.pop) {
	            intCheck(v[0], -MAX, -1, p);
	            intCheck(v[1], 1, MAX, p);
	            MIN_EXP = v[0];
	            MAX_EXP = v[1];
	          } else {
	            intCheck(v, -MAX, MAX, p);
	            if (v) {
	              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
	            } else {
	              throw Error
	               (bignumberError + p + ' cannot be zero: ' + v);
	            }
	          }
	        }

	        // CRYPTO {boolean} true or false.
	        // '[BigNumber Error] CRYPTO not true or false: {v}'
	        // '[BigNumber Error] crypto unavailable'
	        if (obj.hasOwnProperty(p = 'CRYPTO')) {
	          v = obj[p];
	          if (v === !!v) {
	            if (v) {
	              if (typeof crypto != 'undefined' && crypto &&
	               (crypto.getRandomValues || crypto.randomBytes)) {
	                CRYPTO = v;
	              } else {
	                CRYPTO = !v;
	                throw Error
	                 (bignumberError + 'crypto unavailable');
	              }
	            } else {
	              CRYPTO = v;
	            }
	          } else {
	            throw Error
	             (bignumberError + p + ' not true or false: ' + v);
	          }
	        }

	        // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
	          v = obj[p];
	          intCheck(v, 0, 9, p);
	          MODULO_MODE = v;
	        }

	        // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
	          v = obj[p];
	          intCheck(v, 0, MAX, p);
	          POW_PRECISION = v;
	        }

	        // FORMAT {object}
	        // '[BigNumber Error] FORMAT not an object: {v}'
	        if (obj.hasOwnProperty(p = 'FORMAT')) {
	          v = obj[p];
	          if (typeof v == 'object') FORMAT = v;
	          else throw Error
	           (bignumberError + p + ' not an object: ' + v);
	        }

	        // ALPHABET {string}
	        // '[BigNumber Error] ALPHABET invalid: {v}'
	        if (obj.hasOwnProperty(p = 'ALPHABET')) {
	          v = obj[p];

	          // Disallow if only one character,
	          // or if it contains '+', '-', '.', whitespace, or a repeated character.
	          if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) {
	            ALPHABET = v;
	          } else {
	            throw Error
	             (bignumberError + p + ' invalid: ' + v);
	          }
	        }

	      } else {

	        // '[BigNumber Error] Object expected: {v}'
	        throw Error
	         (bignumberError + 'Object expected: ' + obj);
	      }
	    }

	    return {
	      DECIMAL_PLACES: DECIMAL_PLACES,
	      ROUNDING_MODE: ROUNDING_MODE,
	      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
	      RANGE: [MIN_EXP, MAX_EXP],
	      CRYPTO: CRYPTO,
	      MODULO_MODE: MODULO_MODE,
	      POW_PRECISION: POW_PRECISION,
	      FORMAT: FORMAT,
	      ALPHABET: ALPHABET
	    };
	  };


	  /*
	   * Return true if v is a BigNumber instance, otherwise return false.
	   *
	   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
	   *
	   * v {any}
	   *
	   * '[BigNumber Error] Invalid BigNumber: {v}'
	   */
	  BigNumber.isBigNumber = function (v) {
	    if (!v || v._isBigNumber !== true) return false;
	    if (!BigNumber.DEBUG) return true;

	    var i, n,
	      c = v.c,
	      e = v.e,
	      s = v.s;

	    out: if ({}.toString.call(c) == '[object Array]') {

	      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

	        // If the first element is zero, the BigNumber value must be zero.
	        if (c[0] === 0) {
	          if (e === 0 && c.length === 1) return true;
	          break out;
	        }

	        // Calculate number of digits that c[0] should have, based on the exponent.
	        i = (e + 1) % LOG_BASE;
	        if (i < 1) i += LOG_BASE;

	        // Calculate number of digits of c[0].
	        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
	        if (String(c[0]).length == i) {

	          for (i = 0; i < c.length; i++) {
	            n = c[i];
	            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
	          }

	          // Last element cannot be zero, unless it is the only element.
	          if (n !== 0) return true;
	        }
	      }

	    // Infinity/NaN
	    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
	      return true;
	    }

	    throw Error
	      (bignumberError + 'Invalid BigNumber: ' + v);
	  };


	  /*
	   * Return a new BigNumber whose value is the maximum of the arguments.
	   *
	   * arguments {number|string|BigNumber}
	   */
	  BigNumber.maximum = BigNumber.max = function () {
	    return maxOrMin(arguments, P.lt);
	  };


	  /*
	   * Return a new BigNumber whose value is the minimum of the arguments.
	   *
	   * arguments {number|string|BigNumber}
	   */
	  BigNumber.minimum = BigNumber.min = function () {
	    return maxOrMin(arguments, P.gt);
	  };


	  /*
	   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	   * zeros are produced).
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
	   * '[BigNumber Error] crypto unavailable'
	   */
	  BigNumber.random = (function () {
	    var pow2_53 = 0x20000000000000;

	    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	    // Check if Math.random() produces more than 32 bits of randomness.
	    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	     ? function () { return mathfloor(Math.random() * pow2_53); }
	     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	       (Math.random() * 0x800000 | 0); };

	    return function (dp) {
	      var a, b, e, k, v,
	        i = 0,
	        c = [],
	        rand = new BigNumber(ONE);

	      if (dp == null) dp = DECIMAL_PLACES;
	      else intCheck(dp, 0, MAX);

	      k = mathceil(dp / LOG_BASE);

	      if (CRYPTO) {

	        // Browsers supporting crypto.getRandomValues.
	        if (crypto.getRandomValues) {

	          a = crypto.getRandomValues(new Uint32Array(k *= 2));

	          for (; i < k;) {

	            // 53 bits:
	            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	            //                                     11111 11111111 11111111
	            // 0x20000 is 2^21.
	            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	            // Rejection sampling:
	            // 0 <= v < 9007199254740992
	            // Probability that v >= 9e15, is
	            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	            if (v >= 9e15) {
	              b = crypto.getRandomValues(new Uint32Array(2));
	              a[i] = b[0];
	              a[i + 1] = b[1];
	            } else {

	              // 0 <= v <= 8999999999999999
	              // 0 <= (v % 1e14) <= 99999999999999
	              c.push(v % 1e14);
	              i += 2;
	            }
	          }
	          i = k / 2;

	        // Node.js supporting crypto.randomBytes.
	        } else if (crypto.randomBytes) {

	          // buffer
	          a = crypto.randomBytes(k *= 7);

	          for (; i < k;) {

	            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	            // 0x100000000 is 2^32, 0x1000000 is 2^24
	            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	            // 0 <= v < 9007199254740992
	            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
	               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
	               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

	            if (v >= 9e15) {
	              crypto.randomBytes(7).copy(a, i);
	            } else {

	              // 0 <= (v % 1e14) <= 99999999999999
	              c.push(v % 1e14);
	              i += 7;
	            }
	          }
	          i = k / 7;
	        } else {
	          CRYPTO = false;
	          throw Error
	           (bignumberError + 'crypto unavailable');
	        }
	      }

	      // Use Math.random.
	      if (!CRYPTO) {

	        for (; i < k;) {
	          v = random53bitInt();
	          if (v < 9e15) c[i++] = v % 1e14;
	        }
	      }

	      k = c[--i];
	      dp %= LOG_BASE;

	      // Convert trailing digits to zeros according to dp.
	      if (k && dp) {
	        v = POWS_TEN[LOG_BASE - dp];
	        c[i] = mathfloor(k / v) * v;
	      }

	      // Remove trailing elements which are zero.
	      for (; c[i] === 0; c.pop(), i--);

	      // Zero?
	      if (i < 0) {
	        c = [e = 0];
	      } else {

	        // Remove leading elements which are zero and adjust exponent accordingly.
	        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

	        // Count the digits of the first element of c to determine leading zeros, and...
	        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

	        // adjust the exponent accordingly.
	        if (i < LOG_BASE) e -= LOG_BASE - i;
	      }

	      rand.e = e;
	      rand.c = c;
	      return rand;
	    };
	  })();


	   /*
	   * Return a BigNumber whose value is the sum of the arguments.
	   *
	   * arguments {number|string|BigNumber}
	   */
	  BigNumber.sum = function () {
	    var i = 1,
	      args = arguments,
	      sum = new BigNumber(args[0]);
	    for (; i < args.length;) sum = sum.plus(args[i++]);
	    return sum;
	  };


	  // PRIVATE FUNCTIONS


	  // Called by BigNumber and BigNumber.prototype.toString.
	  convertBase = (function () {
	    var decimal = '0123456789';

	    /*
	     * Convert string of baseIn to an array of numbers of baseOut.
	     * Eg. toBaseOut('255', 10, 16) returns [15, 15].
	     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
	     */
	    function toBaseOut(str, baseIn, baseOut, alphabet) {
	      var j,
	        arr = [0],
	        arrL,
	        i = 0,
	        len = str.length;

	      for (; i < len;) {
	        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

	        arr[0] += alphabet.indexOf(str.charAt(i++));

	        for (j = 0; j < arr.length; j++) {

	          if (arr[j] > baseOut - 1) {
	            if (arr[j + 1] == null) arr[j + 1] = 0;
	            arr[j + 1] += arr[j] / baseOut | 0;
	            arr[j] %= baseOut;
	          }
	        }
	      }

	      return arr.reverse();
	    }

	    // Convert a numeric string of baseIn to a numeric string of baseOut.
	    // If the caller is toString, we are converting from base 10 to baseOut.
	    // If the caller is BigNumber, we are converting from baseIn to base 10.
	    return function (str, baseIn, baseOut, sign, callerIsToString) {
	      var alphabet, d, e, k, r, x, xc, y,
	        i = str.indexOf('.'),
	        dp = DECIMAL_PLACES,
	        rm = ROUNDING_MODE;

	      // Non-integer.
	      if (i >= 0) {
	        k = POW_PRECISION;

	        // Unlimited precision.
	        POW_PRECISION = 0;
	        str = str.replace('.', '');
	        y = new BigNumber(baseIn);
	        x = y.pow(str.length - i);
	        POW_PRECISION = k;

	        // Convert str as if an integer, then restore the fraction part by dividing the
	        // result by its base raised to a power.

	        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
	         10, baseOut, decimal);
	        y.e = y.c.length;
	      }

	      // Convert the number as integer.

	      xc = toBaseOut(str, baseIn, baseOut, callerIsToString
	       ? (alphabet = ALPHABET, decimal)
	       : (alphabet = decimal, ALPHABET));

	      // xc now represents str as an integer and converted to baseOut. e is the exponent.
	      e = k = xc.length;

	      // Remove trailing zeros.
	      for (; xc[--k] == 0; xc.pop());

	      // Zero?
	      if (!xc[0]) return alphabet.charAt(0);

	      // Does str represent an integer? If so, no need for the division.
	      if (i < 0) {
	        --e;
	      } else {
	        x.c = xc;
	        x.e = e;

	        // The sign is needed for correct rounding.
	        x.s = sign;
	        x = div(x, y, dp, rm, baseOut);
	        xc = x.c;
	        r = x.r;
	        e = x.e;
	      }

	      // xc now represents str converted to baseOut.

	      // THe index of the rounding digit.
	      d = e + dp + 1;

	      // The rounding digit: the digit to the right of the digit that may be rounded up.
	      i = xc[d];

	      // Look at the rounding digits and mode to determine whether to round up.

	      k = baseOut / 2;
	      r = r || d < 0 || xc[d + 1] != null;

	      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	             rm == (x.s < 0 ? 8 : 7));

	      // If the index of the rounding digit is not greater than zero, or xc represents
	      // zero, then the result of the base conversion is zero or, if rounding up, a value
	      // such as 0.00001.
	      if (d < 1 || !xc[0]) {

	        // 1^-dp or 0
	        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
	      } else {

	        // Truncate xc to the required number of decimal places.
	        xc.length = d;

	        // Round up?
	        if (r) {

	          // Rounding up may mean the previous digit has to be rounded up and so on.
	          for (--baseOut; ++xc[--d] > baseOut;) {
	            xc[d] = 0;

	            if (!d) {
	              ++e;
	              xc = [1].concat(xc);
	            }
	          }
	        }

	        // Determine trailing zeros.
	        for (k = xc.length; !xc[--k];);

	        // E.g. [4, 11, 15] becomes 4bf.
	        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

	        // Add leading zeros, decimal point and trailing zeros as required.
	        str = toFixedPoint(str, e, alphabet.charAt(0));
	      }

	      // The caller will add the sign.
	      return str;
	    };
	  })();


	  // Perform division in the specified base. Called by div and convertBase.
	  div = (function () {

	    // Assume non-zero x and k.
	    function multiply(x, k, base) {
	      var m, temp, xlo, xhi,
	        carry = 0,
	        i = x.length,
	        klo = k % SQRT_BASE,
	        khi = k / SQRT_BASE | 0;

	      for (x = x.slice(); i--;) {
	        xlo = x[i] % SQRT_BASE;
	        xhi = x[i] / SQRT_BASE | 0;
	        m = khi * xlo + xhi * klo;
	        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
	        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
	        x[i] = temp % base;
	      }

	      if (carry) x = [carry].concat(x);

	      return x;
	    }

	    function compare(a, b, aL, bL) {
	      var i, cmp;

	      if (aL != bL) {
	        cmp = aL > bL ? 1 : -1;
	      } else {

	        for (i = cmp = 0; i < aL; i++) {

	          if (a[i] != b[i]) {
	            cmp = a[i] > b[i] ? 1 : -1;
	            break;
	          }
	        }
	      }

	      return cmp;
	    }

	    function subtract(a, b, aL, base) {
	      var i = 0;

	      // Subtract b from a.
	      for (; aL--;) {
	        a[aL] -= i;
	        i = a[aL] < b[aL] ? 1 : 0;
	        a[aL] = i * base + a[aL] - b[aL];
	      }

	      // Remove leading zeros.
	      for (; !a[0] && a.length > 1; a.splice(0, 1));
	    }

	    // x: dividend, y: divisor.
	    return function (x, y, dp, rm, base) {
	      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	        yL, yz,
	        s = x.s == y.s ? 1 : -1,
	        xc = x.c,
	        yc = y.c;

	      // Either NaN, Infinity or 0?
	      if (!xc || !xc[0] || !yc || !yc[0]) {

	        return new BigNumber(

	         // Return NaN if either NaN, or both Infinity or 0.
	         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

	          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	       );
	      }

	      q = new BigNumber(s);
	      qc = q.c = [];
	      e = x.e - y.e;
	      s = dp + e + 1;

	      if (!base) {
	        base = BASE;
	        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
	        s = s / LOG_BASE | 0;
	      }

	      // Result exponent may be one less then the current value of e.
	      // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	      for (i = 0; yc[i] == (xc[i] || 0); i++);

	      if (yc[i] > (xc[i] || 0)) e--;

	      if (s < 0) {
	        qc.push(1);
	        more = true;
	      } else {
	        xL = xc.length;
	        yL = yc.length;
	        i = 0;
	        s += 2;

	        // Normalise xc and yc so highest order digit of yc is >= base / 2.

	        n = mathfloor(base / (yc[0] + 1));

	        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
	        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
	        if (n > 1) {
	          yc = multiply(yc, n, base);
	          xc = multiply(xc, n, base);
	          yL = yc.length;
	          xL = xc.length;
	        }

	        xi = yL;
	        rem = xc.slice(0, yL);
	        remL = rem.length;

	        // Add zeros to make remainder as long as divisor.
	        for (; remL < yL; rem[remL++] = 0);
	        yz = yc.slice();
	        yz = [0].concat(yz);
	        yc0 = yc[0];
	        if (yc[1] >= base / 2) yc0++;
	        // Not necessary, but to prevent trial digit n > base, when using base 3.
	        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

	        do {
	          n = 0;

	          // Compare divisor and remainder.
	          cmp = compare(yc, rem, yL, remL);

	          // If divisor < remainder.
	          if (cmp < 0) {

	            // Calculate trial digit, n.

	            rem0 = rem[0];
	            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	            // n is how many times the divisor goes into the current remainder.
	            n = mathfloor(rem0 / yc0);

	            //  Algorithm:
	            //  product = divisor multiplied by trial digit (n).
	            //  Compare product and remainder.
	            //  If product is greater than remainder:
	            //    Subtract divisor from product, decrement trial digit.
	            //  Subtract product from remainder.
	            //  If product was less than remainder at the last compare:
	            //    Compare new remainder and divisor.
	            //    If remainder is greater than divisor:
	            //      Subtract divisor from remainder, increment trial digit.

	            if (n > 1) {

	              // n may be > base only when base is 3.
	              if (n >= base) n = base - 1;

	              // product = divisor * trial digit.
	              prod = multiply(yc, n, base);
	              prodL = prod.length;
	              remL = rem.length;

	              // Compare product and remainder.
	              // If product > remainder then trial digit n too high.
	              // n is 1 too high about 5% of the time, and is not known to have
	              // ever been more than 1 too high.
	              while (compare(prod, rem, prodL, remL) == 1) {
	                n--;

	                // Subtract divisor from product.
	                subtract(prod, yL < prodL ? yz : yc, prodL, base);
	                prodL = prod.length;
	                cmp = 1;
	              }
	            } else {

	              // n is 0 or 1, cmp is -1.
	              // If n is 0, there is no need to compare yc and rem again below,
	              // so change cmp to 1 to avoid it.
	              // If n is 1, leave cmp as -1, so yc and rem are compared again.
	              if (n == 0) {

	                // divisor < remainder, so n must be at least 1.
	                cmp = n = 1;
	              }

	              // product = divisor
	              prod = yc.slice();
	              prodL = prod.length;
	            }

	            if (prodL < remL) prod = [0].concat(prod);

	            // Subtract product from remainder.
	            subtract(rem, prod, remL, base);
	            remL = rem.length;

	             // If product was < remainder.
	            if (cmp == -1) {

	              // Compare divisor and new remainder.
	              // If divisor < new remainder, subtract divisor from remainder.
	              // Trial digit n too low.
	              // n is 1 too low about 5% of the time, and very rarely 2 too low.
	              while (compare(yc, rem, yL, remL) < 1) {
	                n++;

	                // Subtract divisor from remainder.
	                subtract(rem, yL < remL ? yz : yc, remL, base);
	                remL = rem.length;
	              }
	            }
	          } else if (cmp === 0) {
	            n++;
	            rem = [0];
	          } // else cmp === 1 and n will be 0

	          // Add the next digit, n, to the result array.
	          qc[i++] = n;

	          // Update the remainder.
	          if (rem[0]) {
	            rem[remL++] = xc[xi] || 0;
	          } else {
	            rem = [xc[xi]];
	            remL = 1;
	          }
	        } while ((xi++ < xL || rem[0] != null) && s--);

	        more = rem[0] != null;

	        // Leading zero?
	        if (!qc[0]) qc.splice(0, 1);
	      }

	      if (base == BASE) {

	        // To calculate q.e, first get the number of digits of qc[0].
	        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

	        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

	      // Caller is convertBase.
	      } else {
	        q.e = e;
	        q.r = +more;
	      }

	      return q;
	    };
	  })();


	  /*
	   * Return a string representing the value of BigNumber n in fixed-point or exponential
	   * notation rounded to the specified decimal places or significant digits.
	   *
	   * n: a BigNumber.
	   * i: the index of the last digit required (i.e. the digit that may be rounded up).
	   * rm: the rounding mode.
	   * id: 1 (toExponential) or 2 (toPrecision).
	   */
	  function format(n, i, rm, id) {
	    var c0, e, ne, len, str;

	    if (rm == null) rm = ROUNDING_MODE;
	    else intCheck(rm, 0, 8);

	    if (!n.c) return n.toString();

	    c0 = n.c[0];
	    ne = n.e;

	    if (i == null) {
	      str = coeffToString(n.c);
	      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
	       ? toExponential(str, ne)
	       : toFixedPoint(str, ne, '0');
	    } else {
	      n = round(new BigNumber(n), i, rm);

	      // n.e may have changed if the value was rounded up.
	      e = n.e;

	      str = coeffToString(n.c);
	      len = str.length;

	      // toPrecision returns exponential notation if the number of significant digits
	      // specified is less than the number of digits necessary to represent the integer
	      // part of the value in fixed-point notation.

	      // Exponential notation.
	      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

	        // Append zeros?
	        for (; len < i; str += '0', len++);
	        str = toExponential(str, e);

	      // Fixed-point notation.
	      } else {
	        i -= ne;
	        str = toFixedPoint(str, e, '0');

	        // Append zeros?
	        if (e + 1 > len) {
	          if (--i > 0) for (str += '.'; i--; str += '0');
	        } else {
	          i += e - len;
	          if (i > 0) {
	            if (e + 1 == len) str += '.';
	            for (; i--; str += '0');
	          }
	        }
	      }
	    }

	    return n.s < 0 && c0 ? '-' + str : str;
	  }


	  // Handle BigNumber.max and BigNumber.min.
	  function maxOrMin(args, method) {
	    var n,
	      i = 1,
	      m = new BigNumber(args[0]);

	    for (; i < args.length; i++) {
	      n = new BigNumber(args[i]);

	      // If any number is NaN, return NaN.
	      if (!n.s) {
	        m = n;
	        break;
	      } else if (method.call(m, n)) {
	        m = n;
	      }
	    }

	    return m;
	  }


	  /*
	   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	   * Called by minus, plus and times.
	   */
	  function normalise(n, c, e) {
	    var i = 1,
	      j = c.length;

	     // Remove trailing zeros.
	    for (; !c[--j]; c.pop());

	    // Calculate the base 10 exponent. First get the number of digits of c[0].
	    for (j = c[0]; j >= 10; j /= 10, i++);

	    // Overflow?
	    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

	      // Infinity.
	      n.c = n.e = null;

	    // Underflow?
	    } else if (e < MIN_EXP) {

	      // Zero.
	      n.c = [n.e = 0];
	    } else {
	      n.e = e;
	      n.c = c;
	    }

	    return n;
	  }


	  // Handle values that fail the validity test in BigNumber.
	  parseNumeric = (function () {
	    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	      dotAfter = /^([^.]+)\.$/,
	      dotBefore = /^\.([^.]+)$/,
	      isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	      whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	    return function (x, str, isNum, b) {
	      var base,
	        s = isNum ? str : str.replace(whitespaceOrPlus, '');

	      // No exception on ±Infinity or NaN.
	      if (isInfinityOrNaN.test(s)) {
	        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	      } else {
	        if (!isNum) {

	          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	          s = s.replace(basePrefix, function (m, p1, p2) {
	            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	            return !b || b == base ? p1 : m;
	          });

	          if (b) {
	            base = b;

	            // E.g. '1.' to '1', '.1' to '0.1'
	            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
	          }

	          if (str != s) return new BigNumber(s, base);
	        }

	        // '[BigNumber Error] Not a number: {n}'
	        // '[BigNumber Error] Not a base {b} number: {n}'
	        if (BigNumber.DEBUG) {
	          throw Error
	            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
	        }

	        // NaN
	        x.s = null;
	      }

	      x.c = x.e = null;
	    }
	  })();


	  /*
	   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	   * If r is truthy, it is known that there are more digits after the rounding digit.
	   */
	  function round(x, sd, rm, r) {
	    var d, i, j, k, n, ni, rd,
	      xc = x.c,
	      pows10 = POWS_TEN;

	    // if x is not Infinity or NaN...
	    if (xc) {

	      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	      // n is a base 1e14 number, the value of the element of array x.c containing rd.
	      // ni is the index of n within x.c.
	      // d is the number of digits of n.
	      // i is the index of rd within n including leading zeros.
	      // j is the actual index of rd within n (if < 0, rd is a leading zero).
	      out: {

	        // Get the number of digits of the first element of xc.
	        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
	        i = sd - d;

	        // If the rounding digit is in the first element of xc...
	        if (i < 0) {
	          i += LOG_BASE;
	          j = sd;
	          n = xc[ni = 0];

	          // Get the rounding digit at index j of n.
	          rd = n / pows10[d - j - 1] % 10 | 0;
	        } else {
	          ni = mathceil((i + 1) / LOG_BASE);

	          if (ni >= xc.length) {

	            if (r) {

	              // Needed by sqrt.
	              for (; xc.length <= ni; xc.push(0));
	              n = rd = 0;
	              d = 1;
	              i %= LOG_BASE;
	              j = i - LOG_BASE + 1;
	            } else {
	              break out;
	            }
	          } else {
	            n = k = xc[ni];

	            // Get the number of digits of n.
	            for (d = 1; k >= 10; k /= 10, d++);

	            // Get the index of rd within n.
	            i %= LOG_BASE;

	            // Get the index of rd within n, adjusted for leading zeros.
	            // The number of leading zeros of n is given by LOG_BASE - d.
	            j = i - LOG_BASE + d;

	            // Get the rounding digit at index j of n.
	            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
	          }
	        }

	        r = r || sd < 0 ||

	        // Are there any non-zero digits after the rounding digit?
	        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
	        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

	        r = rm < 4
	         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

	          // Check whether the digit to the left of the rounding digit is odd.
	          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
	           rm == (x.s < 0 ? 8 : 7));

	        if (sd < 1 || !xc[0]) {
	          xc.length = 0;

	          if (r) {

	            // Convert sd to decimal places.
	            sd -= x.e + 1;

	            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
	            x.e = -sd || 0;
	          } else {

	            // Zero.
	            xc[0] = x.e = 0;
	          }

	          return x;
	        }

	        // Remove excess digits.
	        if (i == 0) {
	          xc.length = ni;
	          k = 1;
	          ni--;
	        } else {
	          xc.length = ni + 1;
	          k = pows10[LOG_BASE - i];

	          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	          // j > 0 means i > number of leading zeros of n.
	          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
	        }

	        // Round up?
	        if (r) {

	          for (; ;) {

	            // If the digit to be rounded up is in the first element of xc...
	            if (ni == 0) {

	              // i will be the length of xc[0] before k is added.
	              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
	              j = xc[0] += k;
	              for (k = 1; j >= 10; j /= 10, k++);

	              // if i != k the length has increased.
	              if (i != k) {
	                x.e++;
	                if (xc[0] == BASE) xc[0] = 1;
	              }

	              break;
	            } else {
	              xc[ni] += k;
	              if (xc[ni] != BASE) break;
	              xc[ni--] = 0;
	              k = 1;
	            }
	          }
	        }

	        // Remove trailing zeros.
	        for (i = xc.length; xc[--i] === 0; xc.pop());
	      }

	      // Overflow? Infinity.
	      if (x.e > MAX_EXP) {
	        x.c = x.e = null;

	      // Underflow? Zero.
	      } else if (x.e < MIN_EXP) {
	        x.c = [x.e = 0];
	      }
	    }

	    return x;
	  }


	  function valueOf(n) {
	    var str,
	      e = n.e;

	    if (e === null) return n.toString();

	    str = coeffToString(n.c);

	    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	      ? toExponential(str, e)
	      : toFixedPoint(str, e, '0');

	    return n.s < 0 ? '-' + str : str;
	  }


	  // PROTOTYPE/INSTANCE METHODS


	  /*
	   * Return a new BigNumber whose value is the absolute value of this BigNumber.
	   */
	  P.absoluteValue = P.abs = function () {
	    var x = new BigNumber(this);
	    if (x.s < 0) x.s = 1;
	    return x;
	  };


	  /*
	   * Return
	   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	   *   0 if they have the same value,
	   *   or null if the value of either is NaN.
	   */
	  P.comparedTo = function (y, b) {
	    return compare(this, new BigNumber(y, b));
	  };


	  /*
	   * If dp is undefined or null or true or false, return the number of decimal places of the
	   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	   *
	   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
	   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
	   * ROUNDING_MODE if rm is omitted.
	   *
	   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	   */
	  P.decimalPlaces = P.dp = function (dp, rm) {
	    var c, n, v,
	      x = this;

	    if (dp != null) {
	      intCheck(dp, 0, MAX);
	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);

	      return round(new BigNumber(x), dp + x.e + 1, rm);
	    }

	    if (!(c = x.c)) return null;
	    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

	    // Subtract the number of trailing zeros of the last number.
	    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
	    if (n < 0) n = 0;

	    return n;
	  };


	  /*
	   *  n / 0 = I
	   *  n / N = N
	   *  n / I = 0
	   *  0 / n = 0
	   *  0 / 0 = N
	   *  0 / N = N
	   *  0 / I = 0
	   *  N / n = N
	   *  N / 0 = N
	   *  N / N = N
	   *  N / I = N
	   *  I / n = I
	   *  I / 0 = I
	   *  I / N = N
	   *  I / I = N
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	   */
	  P.dividedBy = P.div = function (y, b) {
	    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
	  };


	  /*
	   * Return a new BigNumber whose value is the integer part of dividing the value of this
	   * BigNumber by the value of BigNumber(y, b).
	   */
	  P.dividedToIntegerBy = P.idiv = function (y, b) {
	    return div(this, new BigNumber(y, b), 0, 1);
	  };


	  /*
	   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
	   *
	   * If m is present, return the result modulo m.
	   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
	   *
	   * The modular power operation works efficiently when x, n, and m are integers, otherwise it
	   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
	   *
	   * n {number|string|BigNumber} The exponent. An integer.
	   * [m] {number|string|BigNumber} The modulus.
	   *
	   * '[BigNumber Error] Exponent not an integer: {n}'
	   */
	  P.exponentiatedBy = P.pow = function (n, m) {
	    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
	      x = this;

	    n = new BigNumber(n);

	    // Allow NaN and ±Infinity, but not other non-integers.
	    if (n.c && !n.isInteger()) {
	      throw Error
	        (bignumberError + 'Exponent not an integer: ' + valueOf(n));
	    }

	    if (m != null) m = new BigNumber(m);

	    // Exponent of MAX_SAFE_INTEGER is 15.
	    nIsBig = n.e > 14;

	    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
	    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

	      // The sign of the result of pow when x is negative depends on the evenness of n.
	      // If +n overflows to ±Infinity, the evenness of n would be not be known.
	      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
	      return m ? y.mod(m) : y;
	    }

	    nIsNeg = n.s < 0;

	    if (m) {

	      // x % m returns NaN if abs(m) is zero, or m is NaN.
	      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

	      isModExp = !nIsNeg && x.isInteger() && m.isInteger();

	      if (isModExp) x = x.mod(m);

	    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
	    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
	    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
	      // [1, 240000000]
	      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
	      // [80000000000000]  [99999750000000]
	      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

	      // If x is negative and n is odd, k = -0, else k = 0.
	      k = x.s < 0 && isOdd(n) ? -0 : 0;

	      // If x >= 1, k = ±Infinity.
	      if (x.e > -1) k = 1 / k;

	      // If n is negative return ±0, else return ±Infinity.
	      return new BigNumber(nIsNeg ? 1 / k : k);

	    } else if (POW_PRECISION) {

	      // Truncating each coefficient array to a length of k after each multiplication
	      // equates to truncating significant digits to POW_PRECISION + [28, 41],
	      // i.e. there will be a minimum of 28 guard digits retained.
	      k = mathceil(POW_PRECISION / LOG_BASE + 2);
	    }

	    if (nIsBig) {
	      half = new BigNumber(0.5);
	      if (nIsNeg) n.s = 1;
	      nIsOdd = isOdd(n);
	    } else {
	      i = Math.abs(+valueOf(n));
	      nIsOdd = i % 2;
	    }

	    y = new BigNumber(ONE);

	    // Performs 54 loop iterations for n of 9007199254740991.
	    for (; ;) {

	      if (nIsOdd) {
	        y = y.times(x);
	        if (!y.c) break;

	        if (k) {
	          if (y.c.length > k) y.c.length = k;
	        } else if (isModExp) {
	          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
	        }
	      }

	      if (i) {
	        i = mathfloor(i / 2);
	        if (i === 0) break;
	        nIsOdd = i % 2;
	      } else {
	        n = n.times(half);
	        round(n, n.e + 1, 1);

	        if (n.e > 14) {
	          nIsOdd = isOdd(n);
	        } else {
	          i = +valueOf(n);
	          if (i === 0) break;
	          nIsOdd = i % 2;
	        }
	      }

	      x = x.times(x);

	      if (k) {
	        if (x.c && x.c.length > k) x.c.length = k;
	      } else if (isModExp) {
	        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
	      }
	    }

	    if (isModExp) return y;
	    if (nIsNeg) y = ONE.div(y);

	    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
	  };


	  /*
	   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
	   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	   *
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
	   */
	  P.integerValue = function (rm) {
	    var n = new BigNumber(this);
	    if (rm == null) rm = ROUNDING_MODE;
	    else intCheck(rm, 0, 8);
	    return round(n, n.e + 1, rm);
	  };


	  /*
	   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	   * otherwise return false.
	   */
	  P.isEqualTo = P.eq = function (y, b) {
	    return compare(this, new BigNumber(y, b)) === 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is a finite number, otherwise return false.
	   */
	  P.isFinite = function () {
	    return !!this.c;
	  };


	  /*
	   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	   * otherwise return false.
	   */
	  P.isGreaterThan = P.gt = function (y, b) {
	    return compare(this, new BigNumber(y, b)) > 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is greater than or equal to the value of
	   * BigNumber(y, b), otherwise return false.
	   */
	  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
	    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

	  };


	  /*
	   * Return true if the value of this BigNumber is an integer, otherwise return false.
	   */
	  P.isInteger = function () {
	    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
	  };


	  /*
	   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	   * otherwise return false.
	   */
	  P.isLessThan = P.lt = function (y, b) {
	    return compare(this, new BigNumber(y, b)) < 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is less than or equal to the value of
	   * BigNumber(y, b), otherwise return false.
	   */
	  P.isLessThanOrEqualTo = P.lte = function (y, b) {
	    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is NaN, otherwise return false.
	   */
	  P.isNaN = function () {
	    return !this.s;
	  };


	  /*
	   * Return true if the value of this BigNumber is negative, otherwise return false.
	   */
	  P.isNegative = function () {
	    return this.s < 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is positive, otherwise return false.
	   */
	  P.isPositive = function () {
	    return this.s > 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
	   */
	  P.isZero = function () {
	    return !!this.c && this.c[0] == 0;
	  };


	  /*
	   *  n - 0 = n
	   *  n - N = N
	   *  n - I = -I
	   *  0 - n = -n
	   *  0 - 0 = 0
	   *  0 - N = N
	   *  0 - I = -I
	   *  N - n = N
	   *  N - 0 = N
	   *  N - N = N
	   *  N - I = N
	   *  I - n = I
	   *  I - 0 = I
	   *  I - N = N
	   *  I - I = N
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	   * BigNumber(y, b).
	   */
	  P.minus = function (y, b) {
	    var i, j, t, xLTy,
	      x = this,
	      a = x.s;

	    y = new BigNumber(y, b);
	    b = y.s;

	    // Either NaN?
	    if (!a || !b) return new BigNumber(NaN);

	    // Signs differ?
	    if (a != b) {
	      y.s = -b;
	      return x.plus(y);
	    }

	    var xe = x.e / LOG_BASE,
	      ye = y.e / LOG_BASE,
	      xc = x.c,
	      yc = y.c;

	    if (!xe || !ye) {

	      // Either Infinity?
	      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

	      // Either zero?
	      if (!xc[0] || !yc[0]) {

	        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

	         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	         ROUNDING_MODE == 3 ? -0 : 0);
	      }
	    }

	    xe = bitFloor(xe);
	    ye = bitFloor(ye);
	    xc = xc.slice();

	    // Determine which is the bigger number.
	    if (a = xe - ye) {

	      if (xLTy = a < 0) {
	        a = -a;
	        t = xc;
	      } else {
	        ye = xe;
	        t = yc;
	      }

	      t.reverse();

	      // Prepend zeros to equalise exponents.
	      for (b = a; b--; t.push(0));
	      t.reverse();
	    } else {

	      // Exponents equal. Check digit by digit.
	      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

	      for (a = b = 0; b < j; b++) {

	        if (xc[b] != yc[b]) {
	          xLTy = xc[b] < yc[b];
	          break;
	        }
	      }
	    }

	    // x < y? Point xc to the array of the bigger number.
	    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	    b = (j = yc.length) - (i = xc.length);

	    // Append zeros to xc if shorter.
	    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	    if (b > 0) for (; b--; xc[i++] = 0);
	    b = BASE - 1;

	    // Subtract yc from xc.
	    for (; j > a;) {

	      if (xc[--j] < yc[j]) {
	        for (i = j; i && !xc[--i]; xc[i] = b);
	        --xc[i];
	        xc[j] += BASE;
	      }

	      xc[j] -= yc[j];
	    }

	    // Remove leading zeros and adjust exponent accordingly.
	    for (; xc[0] == 0; xc.splice(0, 1), --ye);

	    // Zero?
	    if (!xc[0]) {

	      // Following IEEE 754 (2008) 6.3,
	      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	      y.s = ROUNDING_MODE == 3 ? -1 : 1;
	      y.c = [y.e = 0];
	      return y;
	    }

	    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	    // for finite x and y.
	    return normalise(y, xc, ye);
	  };


	  /*
	   *   n % 0 =  N
	   *   n % N =  N
	   *   n % I =  n
	   *   0 % n =  0
	   *  -0 % n = -0
	   *   0 % 0 =  N
	   *   0 % N =  N
	   *   0 % I =  0
	   *   N % n =  N
	   *   N % 0 =  N
	   *   N % N =  N
	   *   N % I =  N
	   *   I % n =  N
	   *   I % 0 =  N
	   *   I % N =  N
	   *   I % I =  N
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	   * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	   */
	  P.modulo = P.mod = function (y, b) {
	    var q, s,
	      x = this;

	    y = new BigNumber(y, b);

	    // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	    if (!x.c || !y.s || y.c && !y.c[0]) {
	      return new BigNumber(NaN);

	    // Return x if y is Infinity or x is zero.
	    } else if (!y.c || x.c && !x.c[0]) {
	      return new BigNumber(x);
	    }

	    if (MODULO_MODE == 9) {

	      // Euclidian division: q = sign(y) * floor(x / abs(y))
	      // r = x - qy    where  0 <= r < abs(y)
	      s = y.s;
	      y.s = 1;
	      q = div(x, y, 0, 3);
	      y.s = s;
	      q.s *= s;
	    } else {
	      q = div(x, y, 0, MODULO_MODE);
	    }

	    y = x.minus(q.times(y));

	    // To match JavaScript %, ensure sign of zero is sign of dividend.
	    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

	    return y;
	  };


	  /*
	   *  n * 0 = 0
	   *  n * N = N
	   *  n * I = I
	   *  0 * n = 0
	   *  0 * 0 = 0
	   *  0 * N = N
	   *  0 * I = N
	   *  N * n = N
	   *  N * 0 = N
	   *  N * N = N
	   *  N * I = N
	   *  I * n = I
	   *  I * 0 = N
	   *  I * N = N
	   *  I * I = I
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
	   * of BigNumber(y, b).
	   */
	  P.multipliedBy = P.times = function (y, b) {
	    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	      base, sqrtBase,
	      x = this,
	      xc = x.c,
	      yc = (y = new BigNumber(y, b)).c;

	    // Either NaN, ±Infinity or ±0?
	    if (!xc || !yc || !xc[0] || !yc[0]) {

	      // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
	        y.c = y.e = y.s = null;
	      } else {
	        y.s *= x.s;

	        // Return ±Infinity if either is ±Infinity.
	        if (!xc || !yc) {
	          y.c = y.e = null;

	        // Return ±0 if either is ±0.
	        } else {
	          y.c = [0];
	          y.e = 0;
	        }
	      }

	      return y;
	    }

	    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
	    y.s *= x.s;
	    xcL = xc.length;
	    ycL = yc.length;

	    // Ensure xc points to longer array and xcL to its length.
	    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	    // Initialise the result array with zeros.
	    for (i = xcL + ycL, zc = []; i--; zc.push(0));

	    base = BASE;
	    sqrtBase = SQRT_BASE;

	    for (i = ycL; --i >= 0;) {
	      c = 0;
	      ylo = yc[i] % sqrtBase;
	      yhi = yc[i] / sqrtBase | 0;

	      for (k = xcL, j = i + k; j > i;) {
	        xlo = xc[--k] % sqrtBase;
	        xhi = xc[k] / sqrtBase | 0;
	        m = yhi * xlo + xhi * ylo;
	        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
	        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
	        zc[j--] = xlo % base;
	      }

	      zc[j] = c;
	    }

	    if (c) {
	      ++e;
	    } else {
	      zc.splice(0, 1);
	    }

	    return normalise(y, zc, e);
	  };


	  /*
	   * Return a new BigNumber whose value is the value of this BigNumber negated,
	   * i.e. multiplied by -1.
	   */
	  P.negated = function () {
	    var x = new BigNumber(this);
	    x.s = -x.s || null;
	    return x;
	  };


	  /*
	   *  n + 0 = n
	   *  n + N = N
	   *  n + I = I
	   *  0 + n = n
	   *  0 + 0 = 0
	   *  0 + N = N
	   *  0 + I = I
	   *  N + n = N
	   *  N + 0 = N
	   *  N + N = N
	   *  N + I = N
	   *  I + n = I
	   *  I + 0 = I
	   *  I + N = N
	   *  I + I = I
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	   * BigNumber(y, b).
	   */
	  P.plus = function (y, b) {
	    var t,
	      x = this,
	      a = x.s;

	    y = new BigNumber(y, b);
	    b = y.s;

	    // Either NaN?
	    if (!a || !b) return new BigNumber(NaN);

	    // Signs differ?
	     if (a != b) {
	      y.s = -b;
	      return x.minus(y);
	    }

	    var xe = x.e / LOG_BASE,
	      ye = y.e / LOG_BASE,
	      xc = x.c,
	      yc = y.c;

	    if (!xe || !ye) {

	      // Return ±Infinity if either ±Infinity.
	      if (!xc || !yc) return new BigNumber(a / 0);

	      // Either zero?
	      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
	    }

	    xe = bitFloor(xe);
	    ye = bitFloor(ye);
	    xc = xc.slice();

	    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	    if (a = xe - ye) {
	      if (a > 0) {
	        ye = xe;
	        t = yc;
	      } else {
	        a = -a;
	        t = xc;
	      }

	      t.reverse();
	      for (; a--; t.push(0));
	      t.reverse();
	    }

	    a = xc.length;
	    b = yc.length;

	    // Point xc to the longer array, and b to the shorter length.
	    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

	    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	    for (a = 0; b;) {
	      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
	      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
	    }

	    if (a) {
	      xc = [a].concat(xc);
	      ++ye;
	    }

	    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	    // ye = MAX_EXP + 1 possible
	    return normalise(y, xc, ye);
	  };


	  /*
	   * If sd is undefined or null or true or false, return the number of significant digits of
	   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	   * If sd is true include integer-part trailing zeros in the count.
	   *
	   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
	   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
	   * ROUNDING_MODE if rm is omitted.
	   *
	   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
	   *                     boolean: whether to count integer-part trailing zeros: true or false.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	   */
	  P.precision = P.sd = function (sd, rm) {
	    var c, n, v,
	      x = this;

	    if (sd != null && sd !== !!sd) {
	      intCheck(sd, 1, MAX);
	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);

	      return round(new BigNumber(x), sd, rm);
	    }

	    if (!(c = x.c)) return null;
	    v = c.length - 1;
	    n = v * LOG_BASE + 1;

	    if (v = c[v]) {

	      // Subtract the number of trailing zeros of the last element.
	      for (; v % 10 == 0; v /= 10, n--);

	      // Add the number of digits of the first element.
	      for (v = c[0]; v >= 10; v /= 10, n++);
	    }

	    if (sd && x.e + 1 > n) n = x.e + 1;

	    return n;
	  };


	  /*
	   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	   *
	   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
	   */
	  P.shiftedBy = function (k) {
	    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    return this.times('1e' + k);
	  };


	  /*
	   *  sqrt(-n) =  N
	   *  sqrt(N) =  N
	   *  sqrt(-I) =  N
	   *  sqrt(I) =  I
	   *  sqrt(0) =  0
	   *  sqrt(-0) = -0
	   *
	   * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	   */
	  P.squareRoot = P.sqrt = function () {
	    var m, n, r, rep, t,
	      x = this,
	      c = x.c,
	      s = x.s,
	      e = x.e,
	      dp = DECIMAL_PLACES + 4,
	      half = new BigNumber('0.5');

	    // Negative/NaN/Infinity/zero?
	    if (s !== 1 || !c || !c[0]) {
	      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
	    }

	    // Initial estimate.
	    s = Math.sqrt(+valueOf(x));

	    // Math.sqrt underflow/overflow?
	    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	    if (s == 0 || s == 1 / 0) {
	      n = coeffToString(c);
	      if ((n.length + e) % 2 == 0) n += '0';
	      s = Math.sqrt(+n);
	      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

	      if (s == 1 / 0) {
	        n = '5e' + e;
	      } else {
	        n = s.toExponential();
	        n = n.slice(0, n.indexOf('e') + 1) + e;
	      }

	      r = new BigNumber(n);
	    } else {
	      r = new BigNumber(s + '');
	    }

	    // Check for zero.
	    // r could be zero if MIN_EXP is changed after the this value was created.
	    // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	    // coeffToString to throw.
	    if (r.c[0]) {
	      e = r.e;
	      s = e + dp;
	      if (s < 3) s = 0;

	      // Newton-Raphson iteration.
	      for (; ;) {
	        t = r;
	        r = half.times(t.plus(div(x, t, dp, 1)));

	        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

	          // The exponent of r may here be one less than the final result exponent,
	          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	          // are indexed correctly.
	          if (r.e < e) --s;
	          n = n.slice(s - 3, s + 1);

	          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	          // iteration.
	          if (n == '9999' || !rep && n == '4999') {

	            // On the first iteration only, check to see if rounding up gives the
	            // exact result as the nines may infinitely repeat.
	            if (!rep) {
	              round(t, t.e + DECIMAL_PLACES + 2, 0);

	              if (t.times(t).eq(x)) {
	                r = t;
	                break;
	              }
	            }

	            dp += 4;
	            s += 4;
	            rep = 1;
	          } else {

	            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	            // result. If not, then there are further digits and m will be truthy.
	            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	              // Truncate to the first rounding digit.
	              round(r, r.e + DECIMAL_PLACES + 2, 1);
	              m = !r.times(r).eq(x);
	            }

	            break;
	          }
	        }
	      }
	    }

	    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
	  };


	  /*
	   * Return a string representing the value of this BigNumber in exponential notation and
	   * rounded using ROUNDING_MODE to dp fixed decimal places.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	   */
	  P.toExponential = function (dp, rm) {
	    if (dp != null) {
	      intCheck(dp, 0, MAX);
	      dp++;
	    }
	    return format(this, dp, rm, 1);
	  };


	  /*
	   * Return a string representing the value of this BigNumber in fixed-point notation rounding
	   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	   *
	   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	   * but e.g. (-0.00001).toFixed(0) is '-0'.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	   */
	  P.toFixed = function (dp, rm) {
	    if (dp != null) {
	      intCheck(dp, 0, MAX);
	      dp = dp + this.e + 1;
	    }
	    return format(this, dp, rm);
	  };


	  /*
	   * Return a string representing the value of this BigNumber in fixed-point notation rounded
	   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	   * of the format or FORMAT object (see BigNumber.set).
	   *
	   * The formatting object may contain some or all of the properties shown below.
	   *
	   * FORMAT = {
	   *   prefix: '',
	   *   groupSize: 3,
	   *   secondaryGroupSize: 0,
	   *   groupSeparator: ',',
	   *   decimalSeparator: '.',
	   *   fractionGroupSize: 0,
	   *   fractionGroupSeparator: '\xA0',      // non-breaking space
	   *   suffix: ''
	   * };
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   * [format] {object} Formatting options. See FORMAT pbject above.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	   * '[BigNumber Error] Argument not an object: {format}'
	   */
	  P.toFormat = function (dp, rm, format) {
	    var str,
	      x = this;

	    if (format == null) {
	      if (dp != null && rm && typeof rm == 'object') {
	        format = rm;
	        rm = null;
	      } else if (dp && typeof dp == 'object') {
	        format = dp;
	        dp = rm = null;
	      } else {
	        format = FORMAT;
	      }
	    } else if (typeof format != 'object') {
	      throw Error
	        (bignumberError + 'Argument not an object: ' + format);
	    }

	    str = x.toFixed(dp, rm);

	    if (x.c) {
	      var i,
	        arr = str.split('.'),
	        g1 = +format.groupSize,
	        g2 = +format.secondaryGroupSize,
	        groupSeparator = format.groupSeparator || '',
	        intPart = arr[0],
	        fractionPart = arr[1],
	        isNeg = x.s < 0,
	        intDigits = isNeg ? intPart.slice(1) : intPart,
	        len = intDigits.length;

	      if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	      if (g1 > 0 && len > 0) {
	        i = len % g1 || g1;
	        intPart = intDigits.substr(0, i);
	        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
	        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
	        if (isNeg) intPart = '-' + intPart;
	      }

	      str = fractionPart
	       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
	        ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
	         '$&' + (format.fractionGroupSeparator || ''))
	        : fractionPart)
	       : intPart;
	    }

	    return (format.prefix || '') + str + (format.suffix || '');
	  };


	  /*
	   * Return an array of two BigNumbers representing the value of this BigNumber as a simple
	   * fraction with an integer numerator and an integer denominator.
	   * The denominator will be a positive non-zero value less than or equal to the specified
	   * maximum denominator. If a maximum denominator is not specified, the denominator will be
	   * the lowest value necessary to represent the number exactly.
	   *
	   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
	   *
	   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
	   */
	  P.toFraction = function (md) {
	    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
	      x = this,
	      xc = x.c;

	    if (md != null) {
	      n = new BigNumber(md);

	      // Throw if md is less than one or is not an integer, unless it is Infinity.
	      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
	        throw Error
	          (bignumberError + 'Argument ' +
	            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
	      }
	    }

	    if (!xc) return new BigNumber(x);

	    d = new BigNumber(ONE);
	    n1 = d0 = new BigNumber(ONE);
	    d1 = n0 = new BigNumber(ONE);
	    s = coeffToString(xc);

	    // Determine initial denominator.
	    // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	    e = d.e = s.length - x.e - 1;
	    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
	    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

	    exp = MAX_EXP;
	    MAX_EXP = 1 / 0;
	    n = new BigNumber(s);

	    // n0 = d1 = 0
	    n0.c[0] = 0;

	    for (; ;)  {
	      q = div(n, d, 0, 1);
	      d2 = d0.plus(q.times(d1));
	      if (d2.comparedTo(md) == 1) break;
	      d0 = d1;
	      d1 = d2;
	      n1 = n0.plus(q.times(d2 = n1));
	      n0 = d2;
	      d = n.minus(q.times(d2 = d));
	      n = d2;
	    }

	    d2 = div(md.minus(d0), d1, 0, 1);
	    n0 = n0.plus(d2.times(n1));
	    d0 = d0.plus(d2.times(d1));
	    n0.s = n1.s = x.s;
	    e = e * 2;

	    // Determine which fraction is closer to x, n0/d0 or n1/d1
	    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
	        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

	    MAX_EXP = exp;

	    return r;
	  };


	  /*
	   * Return the value of this BigNumber converted to a number primitive.
	   */
	  P.toNumber = function () {
	    return +valueOf(this);
	  };


	  /*
	   * Return a string representing the value of this BigNumber rounded to sd significant digits
	   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	   * necessary to represent the integer part of the value in fixed-point notation, then use
	   * exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	   */
	  P.toPrecision = function (sd, rm) {
	    if (sd != null) intCheck(sd, 1, MAX);
	    return format(this, sd, rm, 2);
	  };


	  /*
	   * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	   * TO_EXP_NEG, return exponential notation.
	   *
	   * [b] {number} Integer, 2 to ALPHABET.length inclusive.
	   *
	   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	   */
	  P.toString = function (b) {
	    var str,
	      n = this,
	      s = n.s,
	      e = n.e;

	    // Infinity or NaN?
	    if (e === null) {
	      if (s) {
	        str = 'Infinity';
	        if (s < 0) str = '-' + str;
	      } else {
	        str = 'NaN';
	      }
	    } else {
	      if (b == null) {
	        str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	         ? toExponential(coeffToString(n.c), e)
	         : toFixedPoint(coeffToString(n.c), e, '0');
	      } else if (b === 10) {
	        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
	        str = toFixedPoint(coeffToString(n.c), n.e, '0');
	      } else {
	        intCheck(b, 2, ALPHABET.length, 'Base');
	        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
	      }

	      if (s < 0 && n.c[0]) str = '-' + str;
	    }

	    return str;
	  };


	  /*
	   * Return as toString, but do not accept a base argument, and include the minus sign for
	   * negative zero.
	   */
	  P.valueOf = P.toJSON = function () {
	    return valueOf(this);
	  };


	  P._isBigNumber = true;

	  P[Symbol.toStringTag] = 'BigNumber';

	  // Node.js v10.12.0+
	  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;

	  if (configObject != null) BigNumber.set(configObject);

	  return BigNumber;
	}


	// PRIVATE HELPER FUNCTIONS

	// These functions don't need access to variables,
	// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


	function bitFloor(n) {
	  var i = n | 0;
	  return n > 0 || n === i ? i : i - 1;
	}


	// Return a coefficient array as a string of base 10 digits.
	function coeffToString(a) {
	  var s, z,
	    i = 1,
	    j = a.length,
	    r = a[0] + '';

	  for (; i < j;) {
	    s = a[i++] + '';
	    z = LOG_BASE - s.length;
	    for (; z--; s = '0' + s);
	    r += s;
	  }

	  // Determine trailing zeros.
	  for (j = r.length; r.charCodeAt(--j) === 48;);

	  return r.slice(0, j + 1 || 1);
	}


	// Compare the value of BigNumbers x and y.
	function compare(x, y) {
	  var a, b,
	    xc = x.c,
	    yc = y.c,
	    i = x.s,
	    j = y.s,
	    k = x.e,
	    l = y.e;

	  // Either NaN?
	  if (!i || !j) return null;

	  a = xc && !xc[0];
	  b = yc && !yc[0];

	  // Either zero?
	  if (a || b) return a ? b ? 0 : -j : i;

	  // Signs differ?
	  if (i != j) return i;

	  a = i < 0;
	  b = k == l;

	  // Either Infinity?
	  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

	  // Compare exponents.
	  if (!b) return k > l ^ a ? 1 : -1;

	  j = (k = xc.length) < (l = yc.length) ? k : l;

	  // Compare digit by digit.
	  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

	  // Compare lengths.
	  return k == l ? 0 : k > l ^ a ? 1 : -1;
	}


	/*
	 * Check that n is a primitive number, an integer, and in range, otherwise throw.
	 */
	function intCheck(n, min, max, name) {
	  if (n < min || n > max || n !== mathfloor(n)) {
	    throw Error
	     (bignumberError + (name || 'Argument') + (typeof n == 'number'
	       ? n < min || n > max ? ' out of range: ' : ' not an integer: '
	       : ' not a primitive number: ') + String(n));
	  }
	}


	// Assumes finite n.
	function isOdd(n) {
	  var k = n.c.length - 1;
	  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
	}


	function toExponential(str, e) {
	  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
	   (e < 0 ? 'e' : 'e+') + e;
	}


	function toFixedPoint(str, e, z) {
	  var len, zs;

	  // Negative exponent?
	  if (e < 0) {

	    // Prepend zeros.
	    for (zs = z + '.'; ++e; zs += z);
	    str = zs + str;

	  // Positive exponent
	  } else {
	    len = str.length;

	    // Append zeros.
	    if (++e > len) {
	      for (zs = z, e -= len; --e; zs += z);
	      str += zs;
	    } else if (e < len) {
	      str = str.slice(0, e) + '.' + str.slice(e);
	    }
	  }

	  return str;
	}


	// EXPORT


	var BigNumber = clone();

	var bn = createCommonjsModule(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    Buffer = bufferEs6.Buffer;
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	    }

	    if (base === 16) {
	      this._parseHex(number, start);
	    } else {
	      this._parseBase(number, base, start);
	    }

	    if (number[0] === '-') {
	      this.negative = 1;
	    }

	    this.strip();

	    if (endian !== 'le') return;

	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex (str, start, end) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r <<= 4;

	      // 'a' - 'f'
	      if (c >= 49 && c <= 54) {
	        r |= c - 49 + 0xa;

	      // 'A' - 'F'
	      } else if (c >= 17 && c <= 22) {
	        r |= c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r |= c & 0xf;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    // Scan 24-bit chunks and add them to the number
	    var off = 0;
	    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
	      w = parseHex(number, i, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	    if (i + 6 !== start) {
	      w = parseHex(number, start, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	    }
	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is BN v4 instance
	        r.strip();
	      } else {
	        // r is BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})( module, commonjsGlobal);
	});

	var _version = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.version = "4.0.48";
	});

	var errors = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	// Unknown Error
	exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';
	// Not implemented
	exports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
	// Missing new operator to an object
	//  - name: The name of the class
	exports.MISSING_NEW = 'MISSING_NEW';
	// Call exception
	//  - transaction: the transaction
	//  - address?: the contract address
	//  - args?: The arguments passed into the function
	//  - method?: The Solidity method signature
	//  - errorSignature?: The EIP848 error signature
	//  - errorArgs?: The EIP848 error parameters
	//  - reason: The reason (only for EIP848 "Error(string)")
	exports.CALL_EXCEPTION = 'CALL_EXCEPTION';
	// Invalid argument (e.g. value is incompatible with type) to a function:
	//   - argument: The argument name that was invalid
	//   - value: The value of the argument
	exports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';
	// Missing argument to a function:
	//   - count: The number of arguments received
	//   - expectedCount: The number of arguments expected
	exports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';
	// Too many arguments
	//   - count: The number of arguments received
	//   - expectedCount: The number of arguments expected
	exports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';
	// Numeric Fault
	//   - operation: the operation being executed
	//   - fault: the reason this faulted
	exports.NUMERIC_FAULT = 'NUMERIC_FAULT';
	// Insufficien funds (< value + gasLimit * gasPrice)
	//   - transaction: the transaction attempted
	exports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';
	// Nonce has already been used
	//   - transaction: the transaction attempted
	exports.NONCE_EXPIRED = 'NONCE_EXPIRED';
	// The replacement fee for the transaction is too low
	//   - transaction: the transaction attempted
	exports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';
	// Unsupported operation
	//   - operation
	exports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';
	var _permanentCensorErrors = false;
	var _censorErrors = false;
	// @TODO: Enum
	function throwError(message, code, params) {
	    if (_censorErrors) {
	        throw new Error('unknown error');
	    }
	    if (!code) {
	        code = exports.UNKNOWN_ERROR;
	    }
	    if (!params) {
	        params = {};
	    }
	    var messageDetails = [];
	    Object.keys(params).forEach(function (key) {
	        try {
	            messageDetails.push(key + '=' + JSON.stringify(params[key]));
	        }
	        catch (error) {
	            messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));
	        }
	    });
	    messageDetails.push("version=" + _version.version);
	    var reason = message;
	    if (messageDetails.length) {
	        message += ' (' + messageDetails.join(', ') + ')';
	    }
	    // @TODO: Any??
	    var error = new Error(message);
	    error.reason = reason;
	    error.code = code;
	    Object.keys(params).forEach(function (key) {
	        error[key] = params[key];
	    });
	    throw error;
	}
	exports.throwError = throwError;
	function checkNew(self, kind) {
	    if (!(self instanceof kind)) {
	        throwError('missing new', exports.MISSING_NEW, { name: kind.name });
	    }
	}
	exports.checkNew = checkNew;
	function checkArgumentCount(count, expectedCount, suffix) {
	    if (!suffix) {
	        suffix = '';
	    }
	    if (count < expectedCount) {
	        throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });
	    }
	    if (count > expectedCount) {
	        throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });
	    }
	}
	exports.checkArgumentCount = checkArgumentCount;
	function setCensorship(censorship, permanent) {
	    if (_permanentCensorErrors) {
	        throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCensorship' });
	    }
	    _censorErrors = !!censorship;
	    _permanentCensorErrors = !!permanent;
	}
	exports.setCensorship = setCensorship;
	function checkNormalize() {
	    try {
	        // Make sure all forms of normalization are supported
	        ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
	            try {
	                "test".normalize(form);
	            }
	            catch (error) {
	                throw new Error('missing ' + form);
	            }
	        });
	        if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {
	            throw new Error('broken implementation');
	        }
	    }
	    catch (error) {
	        throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, { operation: 'String.prototype.normalize', form: error.message });
	    }
	}
	exports.checkNormalize = checkNormalize;
	var LogLevels = { debug: 1, "default": 2, info: 2, warn: 3, error: 4, off: 5 };
	var LogLevel = LogLevels["default"];
	function setLogLevel(logLevel) {
	    var level = LogLevels[logLevel];
	    if (level == null) {
	        warn("invliad log level - " + logLevel);
	        return;
	    }
	    LogLevel = level;
	}
	exports.setLogLevel = setLogLevel;
	function log(logLevel, args) {
	    if (LogLevel > LogLevels[logLevel]) {
	        return;
	    }
	    console.log.apply(console, args);
	}
	function warn() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    log("warn", args);
	}
	exports.warn = warn;
	function info() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    log("info", args);
	}
	exports.info = info;
	});

	var bytes = createCommonjsModule(function (module, exports) {
	/**
	 *  Conversion Utilities
	 *
	 */
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var errors$1 = __importStar(errors);
	///////////////////////////////
	function isHexable(value) {
	    return !!(value.toHexString);
	}
	exports.isHexable = isHexable;
	function addSlice(array) {
	    if (array.slice) {
	        return array;
	    }
	    array.slice = function () {
	        var args = Array.prototype.slice.call(arguments);
	        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
	    };
	    return array;
	}
	function isArrayish(value) {
	    if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {
	        return false;
	    }
	    for (var i = 0; i < value.length; i++) {
	        var v = value[i];
	        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.isArrayish = isArrayish;
	function arrayify(value) {
	    if (value == null) {
	        errors$1.throwError('cannot convert null value to array', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	    }
	    if (isHexable(value)) {
	        value = value.toHexString();
	    }
	    if (typeof (value) === 'string') {
	        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
	        if (!match) {
	            errors$1.throwError('invalid hexidecimal string', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	        }
	        if (match[1] !== '0x') {
	            errors$1.throwError('hex string must have 0x prefix', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	        }
	        value = value.substring(2);
	        if (value.length % 2) {
	            value = '0' + value;
	        }
	        var result = [];
	        for (var i = 0; i < value.length; i += 2) {
	            result.push(parseInt(value.substr(i, 2), 16));
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (isArrayish(value)) {
	        return addSlice(new Uint8Array(value));
	    }
	    errors$1.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });
	    return null;
	}
	exports.arrayify = arrayify;
	function concat(objects) {
	    var arrays = [];
	    var length = 0;
	    for (var i = 0; i < objects.length; i++) {
	        var object = arrayify(objects[i]);
	        arrays.push(object);
	        length += object.length;
	    }
	    var result = new Uint8Array(length);
	    var offset = 0;
	    for (var i = 0; i < arrays.length; i++) {
	        result.set(arrays[i], offset);
	        offset += arrays[i].length;
	    }
	    return addSlice(result);
	}
	exports.concat = concat;
	function stripZeros(value) {
	    var result = arrayify(value);
	    if (result.length === 0) {
	        return result;
	    }
	    // Find the first non-zero entry
	    var start = 0;
	    while (result[start] === 0) {
	        start++;
	    }
	    // If we started with zeros, strip them
	    if (start) {
	        result = result.slice(start);
	    }
	    return result;
	}
	exports.stripZeros = stripZeros;
	function padZeros(value, length) {
	    value = arrayify(value);
	    if (length < value.length) {
	        throw new Error('cannot pad');
	    }
	    var result = new Uint8Array(length);
	    result.set(value, length - value.length);
	    return addSlice(result);
	}
	exports.padZeros = padZeros;
	function isHexString(value, length) {
	    if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	        return false;
	    }
	    if (length && value.length !== 2 + 2 * length) {
	        return false;
	    }
	    return true;
	}
	exports.isHexString = isHexString;
	var HexCharacters = '0123456789abcdef';
	function hexlify(value) {
	    if (isHexable(value)) {
	        return value.toHexString();
	    }
	    if (typeof (value) === 'number') {
	        if (value < 0) {
	            errors$1.throwError('cannot hexlify negative value', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	        }
	        // @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible
	        // We can about (value == MAX_INT) to as well, since that may indicate we underflowed already
	        if (value >= 9007199254740991) {
	            errors$1.throwError("out-of-range", errors$1.NUMERIC_FAULT, {
	                operartion: "hexlify",
	                fault: "out-of-safe-range"
	            });
	        }
	        var hex = '';
	        while (value) {
	            hex = HexCharacters[value & 0x0f] + hex;
	            value = Math.floor(value / 16);
	        }
	        if (hex.length) {
	            if (hex.length % 2) {
	                hex = '0' + hex;
	            }
	            return '0x' + hex;
	        }
	        return '0x00';
	    }
	    if (typeof (value) === 'string') {
	        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
	        if (!match) {
	            errors$1.throwError('invalid hexidecimal string', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	        }
	        if (match[1] !== '0x') {
	            errors$1.throwError('hex string must have 0x prefix', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	        }
	        if (value.length % 2) {
	            value = '0x0' + value.substring(2);
	        }
	        return value;
	    }
	    if (isArrayish(value)) {
	        var result = [];
	        for (var i = 0; i < value.length; i++) {
	            var v = value[i];
	            result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);
	        }
	        return '0x' + result.join('');
	    }
	    errors$1.throwError('invalid hexlify value', null, { arg: 'value', value: value });
	    return 'never';
	}
	exports.hexlify = hexlify;
	function hexDataLength(data) {
	    if (!isHexString(data) || (data.length % 2) !== 0) {
	        return null;
	    }
	    return (data.length - 2) / 2;
	}
	exports.hexDataLength = hexDataLength;
	function hexDataSlice(data, offset, endOffset) {
	    if (!isHexString(data)) {
	        errors$1.throwError('invalid hex data', errors$1.INVALID_ARGUMENT, { arg: 'value', value: data });
	    }
	    if ((data.length % 2) !== 0) {
	        errors$1.throwError('hex data length must be even', errors$1.INVALID_ARGUMENT, { arg: 'value', value: data });
	    }
	    offset = 2 + 2 * offset;
	    if (endOffset != null) {
	        return '0x' + data.substring(offset, 2 + 2 * endOffset);
	    }
	    return '0x' + data.substring(offset);
	}
	exports.hexDataSlice = hexDataSlice;
	function hexStripZeros(value) {
	    if (!isHexString(value)) {
	        errors$1.throwError('invalid hex string', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	    }
	    while (value.length > 3 && value.substring(0, 3) === '0x0') {
	        value = '0x' + value.substring(3);
	    }
	    return value;
	}
	exports.hexStripZeros = hexStripZeros;
	function hexZeroPad(value, length) {
	    if (!isHexString(value)) {
	        errors$1.throwError('invalid hex string', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	    }
	    while (value.length < 2 * length + 2) {
	        value = '0x0' + value.substring(2);
	    }
	    return value;
	}
	exports.hexZeroPad = hexZeroPad;
	function isSignature(value) {
	    return (value && value.r != null && value.s != null);
	}
	function splitSignature(signature) {
	    var v = 0;
	    var r = '0x', s = '0x';
	    if (isSignature(signature)) {
	        if (signature.v == null && signature.recoveryParam == null) {
	            errors$1.throwError('at least on of recoveryParam or v must be specified', errors$1.INVALID_ARGUMENT, { argument: 'signature', value: signature });
	        }
	        r = hexZeroPad(signature.r, 32);
	        s = hexZeroPad(signature.s, 32);
	        v = signature.v;
	        if (typeof (v) === 'string') {
	            v = parseInt(v, 16);
	        }
	        var recoveryParam = signature.recoveryParam;
	        if (recoveryParam == null && signature.v != null) {
	            recoveryParam = 1 - (v % 2);
	        }
	        v = 27 + recoveryParam;
	    }
	    else {
	        var bytes = arrayify(signature);
	        if (bytes.length !== 65) {
	            throw new Error('invalid signature');
	        }
	        r = hexlify(bytes.slice(0, 32));
	        s = hexlify(bytes.slice(32, 64));
	        v = bytes[64];
	        if (v !== 27 && v !== 28) {
	            v = 27 + (v % 2);
	        }
	    }
	    return {
	        r: r,
	        s: s,
	        recoveryParam: (v - 27),
	        v: v
	    };
	}
	exports.splitSignature = splitSignature;
	function joinSignature(signature) {
	    signature = splitSignature(signature);
	    return hexlify(concat([
	        signature.r,
	        signature.s,
	        (signature.recoveryParam ? '0x1c' : '0x1b')
	    ]));
	}
	exports.joinSignature = joinSignature;
	});

	var properties = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var errors$1 = __importStar(errors);
	function defineReadOnly(object, name, value) {
	    Object.defineProperty(object, name, {
	        enumerable: true,
	        value: value,
	        writable: false,
	    });
	}
	exports.defineReadOnly = defineReadOnly;
	// There are some issues with instanceof with npm link, so we use this
	// to ensure types are what we expect.
	function setType(object, type) {
	    Object.defineProperty(object, '_ethersType', { configurable: false, value: type, writable: false });
	}
	exports.setType = setType;
	function isType(object, type) {
	    return (object && object._ethersType === type);
	}
	exports.isType = isType;
	function resolveProperties(object) {
	    var result = {};
	    var promises = [];
	    Object.keys(object).forEach(function (key) {
	        var value = object[key];
	        if (value instanceof Promise) {
	            promises.push(value.then(function (value) {
	                result[key] = value;
	                return null;
	            }));
	        }
	        else {
	            result[key] = value;
	        }
	    });
	    return Promise.all(promises).then(function () {
	        return result;
	    });
	}
	exports.resolveProperties = resolveProperties;
	function checkProperties(object, properties) {
	    if (!object || typeof (object) !== 'object') {
	        errors$1.throwError('invalid object', errors$1.INVALID_ARGUMENT, {
	            argument: 'object',
	            value: object
	        });
	    }
	    Object.keys(object).forEach(function (key) {
	        if (!properties[key]) {
	            errors$1.throwError('invalid object key - ' + key, errors$1.INVALID_ARGUMENT, {
	                argument: 'transaction',
	                value: object,
	                key: key
	            });
	        }
	    });
	}
	exports.checkProperties = checkProperties;
	function shallowCopy(object) {
	    var result = {};
	    for (var key in object) {
	        result[key] = object[key];
	    }
	    return result;
	}
	exports.shallowCopy = shallowCopy;
	var opaque = { boolean: true, number: true, string: true };
	function deepCopy(object, frozen) {
	    // Opaque objects are not mutable, so safe to copy by assignment
	    if (object === undefined || object === null || opaque[typeof (object)]) {
	        return object;
	    }
	    // Arrays are mutable, so we need to create a copy
	    if (Array.isArray(object)) {
	        var result = object.map(function (item) { return deepCopy(item, frozen); });
	        if (frozen) {
	            Object.freeze(result);
	        }
	        return result;
	    }
	    if (typeof (object) === 'object') {
	        // Some internal objects, which are already immutable
	        if (isType(object, 'BigNumber')) {
	            return object;
	        }
	        if (isType(object, 'Description')) {
	            return object;
	        }
	        if (isType(object, 'Indexed')) {
	            return object;
	        }
	        var result = {};
	        for (var key in object) {
	            var value = object[key];
	            if (value === undefined) {
	                continue;
	            }
	            defineReadOnly(result, key, deepCopy(value, frozen));
	        }
	        if (frozen) {
	            Object.freeze(result);
	        }
	        return result;
	    }
	    // The function type is also immutable, so safe to copy by assignment
	    if (typeof (object) === 'function') {
	        return object;
	    }
	    throw new Error('Cannot deepCopy ' + typeof (object));
	}
	exports.deepCopy = deepCopy;
	// See: https://github.com/isaacs/inherits/blob/master/inherits_browser.js
	function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	            value: ctor,
	            enumerable: false,
	            writable: true,
	            configurable: true
	        }
	    });
	}
	function inheritable(parent) {
	    return function (child) {
	        inherits(child, parent);
	        defineReadOnly(child, 'inherits', inheritable(child));
	    };
	}
	exports.inheritable = inheritable;
	});

	var bignumber = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 *  BigNumber
	 *
	 *  A wrapper around the BN.js object. We use the BN.js library
	 *  because it is used by elliptic, so it is required regardles.
	 *
	 */
	var bn_js_1 = __importDefault(bn);


	var errors$1 = __importStar(errors);
	var BN_1 = new bn_js_1.default.BN(-1);
	function toHex(bn) {
	    var value = bn.toString(16);
	    if (value[0] === '-') {
	        if ((value.length % 2) === 0) {
	            return '-0x0' + value.substring(1);
	        }
	        return "-0x" + value.substring(1);
	    }
	    if ((value.length % 2) === 1) {
	        return '0x0' + value;
	    }
	    return '0x' + value;
	}
	function toBN(value) {
	    return _bnify(bigNumberify(value));
	}
	function toBigNumber(bn) {
	    return new BigNumber(toHex(bn));
	}
	function _bnify(value) {
	    var hex = value._hex;
	    if (hex[0] === '-') {
	        return (new bn_js_1.default.BN(hex.substring(3), 16)).mul(BN_1);
	    }
	    return new bn_js_1.default.BN(hex.substring(2), 16);
	}
	var BigNumber = /** @class */ (function () {
	    function BigNumber(value) {
	        errors$1.checkNew(this, BigNumber);
	        properties.setType(this, 'BigNumber');
	        if (typeof (value) === 'string') {
	            if (bytes.isHexString(value)) {
	                if (value == '0x') {
	                    value = '0x0';
	                }
	                properties.defineReadOnly(this, '_hex', value);
	            }
	            else if (value[0] === '-' && bytes.isHexString(value.substring(1))) {
	                properties.defineReadOnly(this, '_hex', value);
	            }
	            else if (value.match(/^-?[0-9]*$/)) {
	                if (value == '') {
	                    value = '0';
	                }
	                properties.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
	            }
	            else {
	                errors$1.throwError('invalid BigNumber string value', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	            }
	        }
	        else if (typeof (value) === 'number') {
	            if (parseInt(String(value)) !== value) {
	                errors$1.throwError('underflow', errors$1.NUMERIC_FAULT, { operation: 'setValue', fault: 'underflow', value: value, outputValue: parseInt(String(value)) });
	            }
	            try {
	                properties.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));
	            }
	            catch (error) {
	                errors$1.throwError('overflow', errors$1.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
	            }
	        }
	        else if (value instanceof BigNumber) {
	            properties.defineReadOnly(this, '_hex', value._hex);
	        }
	        else if (value.toHexString) {
	            properties.defineReadOnly(this, '_hex', toHex(toBN(value.toHexString())));
	        }
	        else if (value._hex && bytes.isHexString(value._hex)) {
	            properties.defineReadOnly(this, '_hex', value._hex);
	        }
	        else if (bytes.isArrayish(value)) {
	            properties.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(bytes.hexlify(value).substring(2), 16)));
	        }
	        else {
	            errors$1.throwError('invalid BigNumber value', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	        }
	    }
	    BigNumber.prototype.fromTwos = function (value) {
	        return toBigNumber(_bnify(this).fromTwos(value));
	    };
	    BigNumber.prototype.toTwos = function (value) {
	        return toBigNumber(_bnify(this).toTwos(value));
	    };
	    BigNumber.prototype.abs = function () {
	        if (this._hex[0] === '-') {
	            return toBigNumber(_bnify(this).mul(BN_1));
	        }
	        return this;
	    };
	    BigNumber.prototype.add = function (other) {
	        return toBigNumber(_bnify(this).add(toBN(other)));
	    };
	    BigNumber.prototype.sub = function (other) {
	        return toBigNumber(_bnify(this).sub(toBN(other)));
	    };
	    BigNumber.prototype.div = function (other) {
	        var o = bigNumberify(other);
	        if (o.isZero()) {
	            errors$1.throwError('division by zero', errors$1.NUMERIC_FAULT, { operation: 'divide', fault: 'division by zero' });
	        }
	        return toBigNumber(_bnify(this).div(toBN(other)));
	    };
	    BigNumber.prototype.mul = function (other) {
	        return toBigNumber(_bnify(this).mul(toBN(other)));
	    };
	    BigNumber.prototype.mod = function (other) {
	        return toBigNumber(_bnify(this).mod(toBN(other)));
	    };
	    BigNumber.prototype.pow = function (other) {
	        return toBigNumber(_bnify(this).pow(toBN(other)));
	    };
	    BigNumber.prototype.maskn = function (value) {
	        return toBigNumber(_bnify(this).maskn(value));
	    };
	    BigNumber.prototype.eq = function (other) {
	        return _bnify(this).eq(toBN(other));
	    };
	    BigNumber.prototype.lt = function (other) {
	        return _bnify(this).lt(toBN(other));
	    };
	    BigNumber.prototype.lte = function (other) {
	        return _bnify(this).lte(toBN(other));
	    };
	    BigNumber.prototype.gt = function (other) {
	        return _bnify(this).gt(toBN(other));
	    };
	    BigNumber.prototype.gte = function (other) {
	        return _bnify(this).gte(toBN(other));
	    };
	    BigNumber.prototype.isZero = function () {
	        return _bnify(this).isZero();
	    };
	    BigNumber.prototype.toNumber = function () {
	        try {
	            return _bnify(this).toNumber();
	        }
	        catch (error) {
	            errors$1.throwError('overflow', errors$1.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
	        }
	        return null;
	    };
	    BigNumber.prototype.toString = function () {
	        return _bnify(this).toString(10);
	    };
	    BigNumber.prototype.toHexString = function () {
	        return this._hex;
	    };
	    BigNumber.isBigNumber = function (value) {
	        return properties.isType(value, 'BigNumber');
	    };
	    return BigNumber;
	}());
	exports.BigNumber = BigNumber;
	function bigNumberify(value) {
	    if (BigNumber.isBigNumber(value)) {
	        return value;
	    }
	    return new BigNumber(value);
	}
	exports.bigNumberify = bigNumberify;
	});

	var constants = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var AddressZero = '0x0000000000000000000000000000000000000000';
	exports.AddressZero = AddressZero;
	var HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';
	exports.HashZero = HashZero;
	// NFKD (decomposed)
	//const EtherSymbol = '\uD835\uDF63';
	// NFKC (composed)
	var EtherSymbol = '\u039e';
	exports.EtherSymbol = EtherSymbol;
	var NegativeOne = bignumber.bigNumberify(-1);
	exports.NegativeOne = NegativeOne;
	var Zero = bignumber.bigNumberify(0);
	exports.Zero = Zero;
	var One = bignumber.bigNumberify(1);
	exports.One = One;
	var Two = bignumber.bigNumberify(2);
	exports.Two = Two;
	var WeiPerEther = bignumber.bigNumberify('1000000000000000000');
	exports.WeiPerEther = WeiPerEther;
	var MaxUint256 = bignumber.bigNumberify('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
	exports.MaxUint256 = MaxUint256;
	});

	var sha3 = createCommonjsModule(function (module) {
	/**
	 * [js-sha3]{@link https://github.com/emn178/js-sha3}
	 *
	 * @version 0.5.7
	 * @author Chen, Yi-Cyuan [emn178@gmail.com]
	 * @copyright Chen, Yi-Cyuan 2015-2016
	 * @license MIT
	 */
	/*jslint bitwise: true */
	(function () {

	  var root = typeof window === 'object' ? window : {};
	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof browser$1 === 'object' && browser$1.versions && browser$1.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  }
	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
	            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
	            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
	            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
	            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

	  var createOutputMethod = function (bits, padding, outputType) {
	    return function (message) {
	      return new Keccak(bits, padding, bits).update(message)[outputType]();
	    };
	  };

	  var createShakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits) {
	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
	    };
	  };

	  var createMethod = function (bits, padding) {
	    var method = createOutputMethod(bits, padding, 'hex');
	    method.create = function () {
	      return new Keccak(bits, padding, bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createOutputMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var createShakeMethod = function (bits, padding) {
	    var method = createShakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits) {
	      return new Keccak(bits, padding, outputBits);
	    };
	    method.update = function (message, outputBits) {
	      return method.create(outputBits).update(message);
	    };
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createShakeOutputMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var algorithms = [
	    {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
	    {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
	    {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
	  ];

	  var methods = {}, methodNames = [];

	  for (var i = 0; i < algorithms.length; ++i) {
	    var algorithm = algorithms[i];
	    var bits  = algorithm.bits;
	    for (var j = 0; j < bits.length; ++j) {
	      var methodName = algorithm.name +'_' + bits[j];
	      methodNames.push(methodName);
	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
	    }
	  }

	  function Keccak(bits, padding, outputBits) {
	    this.blocks = [];
	    this.s = [];
	    this.padding = padding;
	    this.outputBits = outputBits;
	    this.reset = true;
	    this.block = 0;
	    this.start = 0;
	    this.blockCount = (1600 - (bits << 1)) >> 5;
	    this.byteCount = this.blockCount << 2;
	    this.outputBlocks = outputBits >> 5;
	    this.extraBytes = (outputBits & 31) >> 3;

	    for (var i = 0; i < 50; ++i) {
	      this.s[i] = 0;
	    }
	  }

	  Keccak.prototype.update = function (message) {
	    var notString = typeof message !== 'string';
	    if (notString && message.constructor === ArrayBuffer) {
	      message = new Uint8Array(message);
	    }
	    var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
	      blockCount = this.blockCount, index = 0, s = this.s, i, code;

	    while (index < length) {
	      if (this.reset) {
	        this.reset = false;
	        blocks[0] = this.block;
	        for (i = 1; i < blockCount + 1; ++i) {
	          blocks[i] = 0;
	        }
	      }
	      if (notString) {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      this.lastByteIndex = i;
	      if (i >= byteCount) {
	        this.start = i - byteCount;
	        this.block = blocks[blockCount];
	        for (i = 0; i < blockCount; ++i) {
	          s[i] ^= blocks[i];
	        }
	        f(s);
	        this.reset = true;
	      } else {
	        this.start = i;
	      }
	    }
	    return this;
	  };

	  Keccak.prototype.finalize = function () {
	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
	    blocks[i >> 2] |= this.padding[i & 3];
	    if (this.lastByteIndex === this.byteCount) {
	      blocks[0] = blocks[blockCount];
	      for (i = 1; i < blockCount + 1; ++i) {
	        blocks[i] = 0;
	      }
	    }
	    blocks[blockCount - 1] |= 0x80000000;
	    for (i = 0; i < blockCount; ++i) {
	      s[i] ^= blocks[i];
	    }
	    f(s);
	  };

	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	        extraBytes = this.extraBytes, i = 0, j = 0;
	    var hex = '', block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        block = s[i];
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
	               HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
	               HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
	               HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	        i = 0;
	      }
	    }
	    if (extraBytes) {
	      block = s[i];
	      if (extraBytes > 0) {
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
	      }
	      if (extraBytes > 1) {
	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
	      }
	      if (extraBytes > 2) {
	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
	      }
	    }
	    return hex;
	  };

	  Keccak.prototype.arrayBuffer = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	        extraBytes = this.extraBytes, i = 0, j = 0;
	    var bytes = this.outputBits >> 3;
	    var buffer;
	    if (extraBytes) {
	      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
	    } else {
	      buffer = new ArrayBuffer(bytes);
	    }
	    var array = new Uint32Array(buffer);
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        array[j] = s[i];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      array[i] = s[i];
	      buffer = buffer.slice(0, bytes);
	    }
	    return buffer;
	  };

	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

	  Keccak.prototype.digest = Keccak.prototype.array = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	        extraBytes = this.extraBytes, i = 0, j = 0;
	    var array = [], offset, block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        offset = j << 2;
	        block = s[i];
	        array[offset] = block & 0xFF;
	        array[offset + 1] = (block >> 8) & 0xFF;
	        array[offset + 2] = (block >> 16) & 0xFF;
	        array[offset + 3] = (block >> 24) & 0xFF;
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      offset = j << 2;
	      block = s[i];
	      if (extraBytes > 0) {
	        array[offset] = block & 0xFF;
	      }
	      if (extraBytes > 1) {
	        array[offset + 1] = (block >> 8) & 0xFF;
	      }
	      if (extraBytes > 2) {
	        array[offset + 2] = (block >> 16) & 0xFF;
	      }
	    }
	    return array;
	  };

	  var f = function (s) {
	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
	        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
	        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
	        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    for (n = 0; n < 48; n += 2) {
	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
	      s[0] ^= h;
	      s[1] ^= l;
	      s[10] ^= h;
	      s[11] ^= l;
	      s[20] ^= h;
	      s[21] ^= l;
	      s[30] ^= h;
	      s[31] ^= l;
	      s[40] ^= h;
	      s[41] ^= l;
	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
	      s[2] ^= h;
	      s[3] ^= l;
	      s[12] ^= h;
	      s[13] ^= l;
	      s[22] ^= h;
	      s[23] ^= l;
	      s[32] ^= h;
	      s[33] ^= l;
	      s[42] ^= h;
	      s[43] ^= l;
	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
	      s[4] ^= h;
	      s[5] ^= l;
	      s[14] ^= h;
	      s[15] ^= l;
	      s[24] ^= h;
	      s[25] ^= l;
	      s[34] ^= h;
	      s[35] ^= l;
	      s[44] ^= h;
	      s[45] ^= l;
	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
	      s[6] ^= h;
	      s[7] ^= l;
	      s[16] ^= h;
	      s[17] ^= l;
	      s[26] ^= h;
	      s[27] ^= l;
	      s[36] ^= h;
	      s[37] ^= l;
	      s[46] ^= h;
	      s[47] ^= l;
	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
	      s[8] ^= h;
	      s[9] ^= l;
	      s[18] ^= h;
	      s[19] ^= l;
	      s[28] ^= h;
	      s[29] ^= l;
	      s[38] ^= h;
	      s[39] ^= l;
	      s[48] ^= h;
	      s[49] ^= l;

	      b0 = s[0];
	      b1 = s[1];
	      b32 = (s[11] << 4) | (s[10] >>> 28);
	      b33 = (s[10] << 4) | (s[11] >>> 28);
	      b14 = (s[20] << 3) | (s[21] >>> 29);
	      b15 = (s[21] << 3) | (s[20] >>> 29);
	      b46 = (s[31] << 9) | (s[30] >>> 23);
	      b47 = (s[30] << 9) | (s[31] >>> 23);
	      b28 = (s[40] << 18) | (s[41] >>> 14);
	      b29 = (s[41] << 18) | (s[40] >>> 14);
	      b20 = (s[2] << 1) | (s[3] >>> 31);
	      b21 = (s[3] << 1) | (s[2] >>> 31);
	      b2 = (s[13] << 12) | (s[12] >>> 20);
	      b3 = (s[12] << 12) | (s[13] >>> 20);
	      b34 = (s[22] << 10) | (s[23] >>> 22);
	      b35 = (s[23] << 10) | (s[22] >>> 22);
	      b16 = (s[33] << 13) | (s[32] >>> 19);
	      b17 = (s[32] << 13) | (s[33] >>> 19);
	      b48 = (s[42] << 2) | (s[43] >>> 30);
	      b49 = (s[43] << 2) | (s[42] >>> 30);
	      b40 = (s[5] << 30) | (s[4] >>> 2);
	      b41 = (s[4] << 30) | (s[5] >>> 2);
	      b22 = (s[14] << 6) | (s[15] >>> 26);
	      b23 = (s[15] << 6) | (s[14] >>> 26);
	      b4 = (s[25] << 11) | (s[24] >>> 21);
	      b5 = (s[24] << 11) | (s[25] >>> 21);
	      b36 = (s[34] << 15) | (s[35] >>> 17);
	      b37 = (s[35] << 15) | (s[34] >>> 17);
	      b18 = (s[45] << 29) | (s[44] >>> 3);
	      b19 = (s[44] << 29) | (s[45] >>> 3);
	      b10 = (s[6] << 28) | (s[7] >>> 4);
	      b11 = (s[7] << 28) | (s[6] >>> 4);
	      b42 = (s[17] << 23) | (s[16] >>> 9);
	      b43 = (s[16] << 23) | (s[17] >>> 9);
	      b24 = (s[26] << 25) | (s[27] >>> 7);
	      b25 = (s[27] << 25) | (s[26] >>> 7);
	      b6 = (s[36] << 21) | (s[37] >>> 11);
	      b7 = (s[37] << 21) | (s[36] >>> 11);
	      b38 = (s[47] << 24) | (s[46] >>> 8);
	      b39 = (s[46] << 24) | (s[47] >>> 8);
	      b30 = (s[8] << 27) | (s[9] >>> 5);
	      b31 = (s[9] << 27) | (s[8] >>> 5);
	      b12 = (s[18] << 20) | (s[19] >>> 12);
	      b13 = (s[19] << 20) | (s[18] >>> 12);
	      b44 = (s[29] << 7) | (s[28] >>> 25);
	      b45 = (s[28] << 7) | (s[29] >>> 25);
	      b26 = (s[38] << 8) | (s[39] >>> 24);
	      b27 = (s[39] << 8) | (s[38] >>> 24);
	      b8 = (s[48] << 14) | (s[49] >>> 18);
	      b9 = (s[49] << 14) | (s[48] >>> 18);

	      s[0] = b0 ^ (~b2 & b4);
	      s[1] = b1 ^ (~b3 & b5);
	      s[10] = b10 ^ (~b12 & b14);
	      s[11] = b11 ^ (~b13 & b15);
	      s[20] = b20 ^ (~b22 & b24);
	      s[21] = b21 ^ (~b23 & b25);
	      s[30] = b30 ^ (~b32 & b34);
	      s[31] = b31 ^ (~b33 & b35);
	      s[40] = b40 ^ (~b42 & b44);
	      s[41] = b41 ^ (~b43 & b45);
	      s[2] = b2 ^ (~b4 & b6);
	      s[3] = b3 ^ (~b5 & b7);
	      s[12] = b12 ^ (~b14 & b16);
	      s[13] = b13 ^ (~b15 & b17);
	      s[22] = b22 ^ (~b24 & b26);
	      s[23] = b23 ^ (~b25 & b27);
	      s[32] = b32 ^ (~b34 & b36);
	      s[33] = b33 ^ (~b35 & b37);
	      s[42] = b42 ^ (~b44 & b46);
	      s[43] = b43 ^ (~b45 & b47);
	      s[4] = b4 ^ (~b6 & b8);
	      s[5] = b5 ^ (~b7 & b9);
	      s[14] = b14 ^ (~b16 & b18);
	      s[15] = b15 ^ (~b17 & b19);
	      s[24] = b24 ^ (~b26 & b28);
	      s[25] = b25 ^ (~b27 & b29);
	      s[34] = b34 ^ (~b36 & b38);
	      s[35] = b35 ^ (~b37 & b39);
	      s[44] = b44 ^ (~b46 & b48);
	      s[45] = b45 ^ (~b47 & b49);
	      s[6] = b6 ^ (~b8 & b0);
	      s[7] = b7 ^ (~b9 & b1);
	      s[16] = b16 ^ (~b18 & b10);
	      s[17] = b17 ^ (~b19 & b11);
	      s[26] = b26 ^ (~b28 & b20);
	      s[27] = b27 ^ (~b29 & b21);
	      s[36] = b36 ^ (~b38 & b30);
	      s[37] = b37 ^ (~b39 & b31);
	      s[46] = b46 ^ (~b48 & b40);
	      s[47] = b47 ^ (~b49 & b41);
	      s[8] = b8 ^ (~b0 & b2);
	      s[9] = b9 ^ (~b1 & b3);
	      s[18] = b18 ^ (~b10 & b12);
	      s[19] = b19 ^ (~b11 & b13);
	      s[28] = b28 ^ (~b20 & b22);
	      s[29] = b29 ^ (~b21 & b23);
	      s[38] = b38 ^ (~b30 & b32);
	      s[39] = b39 ^ (~b31 & b33);
	      s[48] = b48 ^ (~b40 & b42);
	      s[49] = b49 ^ (~b41 & b43);

	      s[0] ^= RC[n];
	      s[1] ^= RC[n + 1];
	    }
	  };

	  if (COMMON_JS) {
	    module.exports = methods;
	  } else {
	    for (var i = 0; i < methodNames.length; ++i) {
	      root[methodNames[i]] = methods[methodNames[i]];
	    }
	  }
	})();
	});

	var keccak256_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	function keccak256(data) {
	    return '0x' + sha3.keccak_256(bytes.arrayify(data));
	}
	exports.keccak256 = keccak256;
	});

	var rlp = createCommonjsModule(function (module, exports) {
	//See: https://github.com/ethereum/wiki/wiki/RLP
	Object.defineProperty(exports, "__esModule", { value: true });

	function arrayifyInteger(value) {
	    var result = [];
	    while (value) {
	        result.unshift(value & 0xff);
	        value >>= 8;
	    }
	    return result;
	}
	function unarrayifyInteger(data, offset, length) {
	    var result = 0;
	    for (var i = 0; i < length; i++) {
	        result = (result * 256) + data[offset + i];
	    }
	    return result;
	}
	function _encode(object) {
	    if (Array.isArray(object)) {
	        var payload = [];
	        object.forEach(function (child) {
	            payload = payload.concat(_encode(child));
	        });
	        if (payload.length <= 55) {
	            payload.unshift(0xc0 + payload.length);
	            return payload;
	        }
	        var length = arrayifyInteger(payload.length);
	        length.unshift(0xf7 + length.length);
	        return length.concat(payload);
	    }
	    var data = Array.prototype.slice.call(bytes.arrayify(object));
	    if (data.length === 1 && data[0] <= 0x7f) {
	        return data;
	    }
	    else if (data.length <= 55) {
	        data.unshift(0x80 + data.length);
	        return data;
	    }
	    var length = arrayifyInteger(data.length);
	    length.unshift(0xb7 + length.length);
	    return length.concat(data);
	}
	function encode(object) {
	    return bytes.hexlify(_encode(object));
	}
	exports.encode = encode;
	function _decodeChildren(data, offset, childOffset, length) {
	    var result = [];
	    while (childOffset < offset + 1 + length) {
	        var decoded = _decode(data, childOffset);
	        result.push(decoded.result);
	        childOffset += decoded.consumed;
	        if (childOffset > offset + 1 + length) {
	            throw new Error('invalid rlp');
	        }
	    }
	    return { consumed: (1 + length), result: result };
	}
	// returns { consumed: number, result: Object }
	function _decode(data, offset) {
	    if (data.length === 0) {
	        throw new Error('invalid rlp data');
	    }
	    // Array with extra length prefix
	    if (data[offset] >= 0xf8) {
	        var lengthLength = data[offset] - 0xf7;
	        if (offset + 1 + lengthLength > data.length) {
	            throw new Error('too short');
	        }
	        var length = unarrayifyInteger(data, offset + 1, lengthLength);
	        if (offset + 1 + lengthLength + length > data.length) {
	            throw new Error('to short');
	        }
	        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
	    }
	    else if (data[offset] >= 0xc0) {
	        var length = data[offset] - 0xc0;
	        if (offset + 1 + length > data.length) {
	            throw new Error('invalid rlp data');
	        }
	        return _decodeChildren(data, offset, offset + 1, length);
	    }
	    else if (data[offset] >= 0xb8) {
	        var lengthLength = data[offset] - 0xb7;
	        if (offset + 1 + lengthLength > data.length) {
	            throw new Error('invalid rlp data');
	        }
	        var length = unarrayifyInteger(data, offset + 1, lengthLength);
	        if (offset + 1 + lengthLength + length > data.length) {
	            throw new Error('invalid rlp data');
	        }
	        var result = bytes.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
	        return { consumed: (1 + lengthLength + length), result: result };
	    }
	    else if (data[offset] >= 0x80) {
	        var length = data[offset] - 0x80;
	        if (offset + 1 + length > data.length) {
	            throw new Error('invalid rlp data');
	        }
	        var result = bytes.hexlify(data.slice(offset + 1, offset + 1 + length));
	        return { consumed: (1 + length), result: result };
	    }
	    return { consumed: 1, result: bytes.hexlify(data[offset]) };
	}
	function decode(data) {
	    var bytes$1 = bytes.arrayify(data);
	    var decoded = _decode(bytes$1, 0);
	    if (decoded.consumed !== bytes$1.length) {
	        throw new Error('invalid rlp data');
	    }
	    return decoded.result;
	}
	exports.decode = decode;
	});

	var address = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	// We use this for base 36 maths
	var bn_js_1 = __importDefault(bn);




	///////////////////////////////
	function getChecksumAddress(address) {
	    if (typeof (address) !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
	        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
	    }
	    address = address.toLowerCase();
	    var chars = address.substring(2).split('');
	    var hashed = new Uint8Array(40);
	    for (var i_1 = 0; i_1 < 40; i_1++) {
	        hashed[i_1] = chars[i_1].charCodeAt(0);
	    }
	    hashed = bytes.arrayify(keccak256_1.keccak256(hashed));
	    for (var i = 0; i < 40; i += 2) {
	        if ((hashed[i >> 1] >> 4) >= 8) {
	            chars[i] = chars[i].toUpperCase();
	        }
	        if ((hashed[i >> 1] & 0x0f) >= 8) {
	            chars[i + 1] = chars[i + 1].toUpperCase();
	        }
	    }
	    return '0x' + chars.join('');
	}
	// Shims for environments that are missing some required constants and functions
	var MAX_SAFE_INTEGER = 0x1fffffffffffff;
	function log10(x) {
	    if (Math.log10) {
	        return Math.log10(x);
	    }
	    return Math.log(x) / Math.LN10;
	}
	// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
	// Create lookup table
	var ibanLookup = {};
	for (var i = 0; i < 10; i++) {
	    ibanLookup[String(i)] = String(i);
	}
	for (var i = 0; i < 26; i++) {
	    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
	}
	// How many decimal digits can we process? (for 64-bit float, this is 15)
	var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
	function ibanChecksum(address) {
	    address = address.toUpperCase();
	    address = address.substring(4) + address.substring(0, 2) + '00';
	    var expanded = '';
	    address.split('').forEach(function (c) {
	        expanded += ibanLookup[c];
	    });
	    // Javascript can handle integers safely up to 15 (decimal) digits
	    while (expanded.length >= safeDigits) {
	        var block = expanded.substring(0, safeDigits);
	        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
	    }
	    var checksum = String(98 - (parseInt(expanded, 10) % 97));
	    while (checksum.length < 2) {
	        checksum = '0' + checksum;
	    }
	    return checksum;
	}
	function getAddress(address) {
	    var result = null;
	    if (typeof (address) !== 'string') {
	        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
	    }
	    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
	        // Missing the 0x prefix
	        if (address.substring(0, 2) !== '0x') {
	            address = '0x' + address;
	        }
	        result = getChecksumAddress(address);
	        // It is a checksummed address with a bad checksum
	        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
	            errors.throwError('bad address checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
	        }
	        // Maybe ICAP? (we only support direct mode)
	    }
	    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
	        // It is an ICAP address with a bad checksum
	        if (address.substring(2, 4) !== ibanChecksum(address)) {
	            errors.throwError('bad icap checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
	        }
	        result = (new bn_js_1.default.BN(address.substring(4), 36)).toString(16);
	        while (result.length < 40) {
	            result = '0' + result;
	        }
	        result = getChecksumAddress('0x' + result);
	    }
	    else {
	        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
	    }
	    return result;
	}
	exports.getAddress = getAddress;
	function getIcapAddress(address) {
	    var base36 = (new bn_js_1.default.BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();
	    while (base36.length < 30) {
	        base36 = '0' + base36;
	    }
	    return 'XE' + ibanChecksum('XE00' + base36) + base36;
	}
	exports.getIcapAddress = getIcapAddress;
	// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
	function getContractAddress(transaction) {
	    if (!transaction.from) {
	        throw new Error('missing from address');
	    }
	    var nonce = transaction.nonce;
	    return getAddress('0x' + keccak256_1.keccak256(rlp.encode([
	        getAddress(transaction.from),
	        bytes.stripZeros(bytes.hexlify(nonce))
	    ])).substring(26));
	}
	exports.getContractAddress = getContractAddress;
	// See: https://eips.ethereum.org/EIPS/eip-1014
	function getCreate2Address(options) {
	    var initCodeHash = options.initCodeHash;
	    if (options.initCode) {
	        if (initCodeHash) {
	            if (keccak256_1.keccak256(options.initCode) !== initCodeHash) {
	                errors.throwError("initCode/initCodeHash mismatch", errors.INVALID_ARGUMENT, {
	                    arg: "options", value: options
	                });
	            }
	        }
	        else {
	            initCodeHash = keccak256_1.keccak256(options.initCode);
	        }
	    }
	    if (!initCodeHash) {
	        errors.throwError("missing initCode or initCodeHash", errors.INVALID_ARGUMENT, {
	            arg: "options", value: options
	        });
	    }
	    var from = getAddress(options.from);
	    var salt = bytes.arrayify(options.salt);
	    if (salt.length !== 32) {
	        errors.throwError("invalid salt", errors.INVALID_ARGUMENT, {
	            arg: "options", value: options
	        });
	    }
	    return getAddress("0x" + keccak256_1.keccak256(bytes.concat([
	        "0xff",
	        from,
	        salt,
	        initCodeHash
	    ])).substring(26));
	}
	exports.getCreate2Address = getCreate2Address;
	});

	var utf8 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	///////////////////////////////
	var UnicodeNormalizationForm;
	(function (UnicodeNormalizationForm) {
	    UnicodeNormalizationForm["current"] = "";
	    UnicodeNormalizationForm["NFC"] = "NFC";
	    UnicodeNormalizationForm["NFD"] = "NFD";
	    UnicodeNormalizationForm["NFKC"] = "NFKC";
	    UnicodeNormalizationForm["NFKD"] = "NFKD";
	})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
	// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
	function toUtf8Bytes(str, form) {
	    if (form === void 0) { form = UnicodeNormalizationForm.current; }
	    if (form != UnicodeNormalizationForm.current) {
	        errors.checkNormalize();
	        str = str.normalize(form);
	    }
	    var result = [];
	    for (var i = 0; i < str.length; i++) {
	        var c = str.charCodeAt(i);
	        if (c < 0x80) {
	            result.push(c);
	        }
	        else if (c < 0x800) {
	            result.push((c >> 6) | 0xc0);
	            result.push((c & 0x3f) | 0x80);
	        }
	        else if ((c & 0xfc00) == 0xd800) {
	            i++;
	            var c2 = str.charCodeAt(i);
	            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
	                throw new Error('invalid utf-8 string');
	            }
	            // Surrogate Pair
	            c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
	            result.push((c >> 18) | 0xf0);
	            result.push(((c >> 12) & 0x3f) | 0x80);
	            result.push(((c >> 6) & 0x3f) | 0x80);
	            result.push((c & 0x3f) | 0x80);
	        }
	        else {
	            result.push((c >> 12) | 0xe0);
	            result.push(((c >> 6) & 0x3f) | 0x80);
	            result.push((c & 0x3f) | 0x80);
	        }
	    }
	    return bytes.arrayify(result);
	}
	exports.toUtf8Bytes = toUtf8Bytes;
	// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
	function toUtf8String(bytes$1, ignoreErrors) {
	    bytes$1 = bytes.arrayify(bytes$1);
	    var result = '';
	    var i = 0;
	    // Invalid bytes are ignored
	    while (i < bytes$1.length) {
	        var c = bytes$1[i++];
	        // 0xxx xxxx
	        if (c >> 7 === 0) {
	            result += String.fromCharCode(c);
	            continue;
	        }
	        // Multibyte; how many bytes left for this character?
	        var extraLength = null;
	        var overlongMask = null;
	        // 110x xxxx 10xx xxxx
	        if ((c & 0xe0) === 0xc0) {
	            extraLength = 1;
	            overlongMask = 0x7f;
	            // 1110 xxxx 10xx xxxx 10xx xxxx
	        }
	        else if ((c & 0xf0) === 0xe0) {
	            extraLength = 2;
	            overlongMask = 0x7ff;
	            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
	        }
	        else if ((c & 0xf8) === 0xf0) {
	            extraLength = 3;
	            overlongMask = 0xffff;
	        }
	        else {
	            if (!ignoreErrors) {
	                if ((c & 0xc0) === 0x80) {
	                    throw new Error('invalid utf8 byte sequence; unexpected continuation byte');
	                }
	                throw new Error('invalid utf8 byte sequence; invalid prefix');
	            }
	            continue;
	        }
	        // Do we have enough bytes in our data?
	        if (i + extraLength > bytes$1.length) {
	            if (!ignoreErrors) {
	                throw new Error('invalid utf8 byte sequence; too short');
	            }
	            // If there is an invalid unprocessed byte, skip continuation bytes
	            for (; i < bytes$1.length; i++) {
	                if (bytes$1[i] >> 6 !== 0x02) {
	                    break;
	                }
	            }
	            continue;
	        }
	        // Remove the length prefix from the char
	        var res = c & ((1 << (8 - extraLength - 1)) - 1);
	        for (var j = 0; j < extraLength; j++) {
	            var nextChar = bytes$1[i];
	            // Invalid continuation byte
	            if ((nextChar & 0xc0) != 0x80) {
	                res = null;
	                break;
	            }
	            res = (res << 6) | (nextChar & 0x3f);
	            i++;
	        }
	        if (res === null) {
	            if (!ignoreErrors) {
	                throw new Error('invalid utf8 byte sequence; invalid continuation byte');
	            }
	            continue;
	        }
	        // Check for overlong seuences (more bytes than needed)
	        if (res <= overlongMask) {
	            if (!ignoreErrors) {
	                throw new Error('invalid utf8 byte sequence; overlong');
	            }
	            continue;
	        }
	        // Maximum code point
	        if (res > 0x10ffff) {
	            if (!ignoreErrors) {
	                throw new Error('invalid utf8 byte sequence; out-of-range');
	            }
	            continue;
	        }
	        // Reserved for UTF-16 surrogate halves
	        if (res >= 0xd800 && res <= 0xdfff) {
	            if (!ignoreErrors) {
	                throw new Error('invalid utf8 byte sequence; utf-16 surrogate');
	            }
	            continue;
	        }
	        if (res <= 0xffff) {
	            result += String.fromCharCode(res);
	            continue;
	        }
	        res -= 0x10000;
	        result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);
	    }
	    return result;
	}
	exports.toUtf8String = toUtf8String;
	function formatBytes32String(text) {
	    // Get the bytes
	    var bytes$1 = toUtf8Bytes(text);
	    // Check we have room for null-termination
	    if (bytes$1.length > 31) {
	        throw new Error('bytes32 string must be less than 32 bytes');
	    }
	    // Zero-pad (implicitly null-terminates)
	    return bytes.hexlify(bytes.concat([bytes$1, constants.HashZero]).slice(0, 32));
	}
	exports.formatBytes32String = formatBytes32String;
	function parseBytes32String(bytes$1) {
	    var data = bytes.arrayify(bytes$1);
	    // Must be 32 bytes with a null-termination
	    if (data.length !== 32) {
	        throw new Error('invalid bytes32 - not 32 bytes long');
	    }
	    if (data[31] !== 0) {
	        throw new Error('invalid bytes32 string - no null terminator');
	    }
	    // Find the null termination
	    var length = 31;
	    while (data[length - 1] === 0) {
	        length--;
	    }
	    // Determine the string value
	    return toUtf8String(data.slice(0, length));
	}
	exports.parseBytes32String = parseBytes32String;
	});

	var abiCoder = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI

	var errors$1 = __importStar(errors);





	///////////////////////////////
	var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
	var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
	var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
	exports.defaultCoerceFunc = function (type, value) {
	    var match = type.match(paramTypeNumber);
	    if (match && parseInt(match[2]) <= 48) {
	        return value.toNumber();
	    }
	    return value;
	};
	///////////////////////////////////
	// Parsing for Solidity Signatures
	var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
	var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
	function verifyType(type) {
	    // These need to be transformed to their full description
	    if (type.match(/^uint($|[^1-9])/)) {
	        type = 'uint256' + type.substring(4);
	    }
	    else if (type.match(/^int($|[^1-9])/)) {
	        type = 'int256' + type.substring(3);
	    }
	    return type;
	}
	function parseParam(param, allowIndexed) {
	    var originalParam = param;
	    function throwError(i) {
	        throw new Error('unexpected character "' + originalParam[i] + '" at position ' + i + ' in "' + originalParam + '"');
	    }
	    param = param.replace(/\s/g, ' ');
	    var parent = { type: '', name: '', state: { allowType: true } };
	    var node = parent;
	    for (var i = 0; i < param.length; i++) {
	        var c = param[i];
	        switch (c) {
	            case '(':
	                if (!node.state.allowParams) {
	                    throwError(i);
	                }
	                node.state.allowType = false;
	                node.type = verifyType(node.type);
	                node.components = [{ type: '', name: '', parent: node, state: { allowType: true } }];
	                node = node.components[0];
	                break;
	            case ')':
	                delete node.state;
	                if (allowIndexed && node.name === 'indexed') {
	                    node.indexed = true;
	                    node.name = '';
	                }
	                node.type = verifyType(node.type);
	                var child = node;
	                node = node.parent;
	                if (!node) {
	                    throwError(i);
	                }
	                delete child.parent;
	                node.state.allowParams = false;
	                node.state.allowName = true;
	                node.state.allowArray = true;
	                break;
	            case ',':
	                delete node.state;
	                if (allowIndexed && node.name === 'indexed') {
	                    node.indexed = true;
	                    node.name = '';
	                }
	                node.type = verifyType(node.type);
	                var sibling = { type: '', name: '', parent: node.parent, state: { allowType: true } };
	                node.parent.components.push(sibling);
	                delete node.parent;
	                node = sibling;
	                break;
	            // Hit a space...
	            case ' ':
	                // If reading type, the type is done and may read a param or name
	                if (node.state.allowType) {
	                    if (node.type !== '') {
	                        node.type = verifyType(node.type);
	                        delete node.state.allowType;
	                        node.state.allowName = true;
	                        node.state.allowParams = true;
	                    }
	                }
	                // If reading name, the name is done
	                if (node.state.allowName) {
	                    if (node.name !== '') {
	                        if (allowIndexed && node.name === 'indexed') {
	                            node.indexed = true;
	                            node.name = '';
	                        }
	                        else {
	                            node.state.allowName = false;
	                        }
	                    }
	                }
	                break;
	            case '[':
	                if (!node.state.allowArray) {
	                    throwError(i);
	                }
	                node.type += c;
	                node.state.allowArray = false;
	                node.state.allowName = false;
	                node.state.readArray = true;
	                break;
	            case ']':
	                if (!node.state.readArray) {
	                    throwError(i);
	                }
	                node.type += c;
	                node.state.readArray = false;
	                node.state.allowArray = true;
	                node.state.allowName = true;
	                break;
	            default:
	                if (node.state.allowType) {
	                    node.type += c;
	                    node.state.allowParams = true;
	                    node.state.allowArray = true;
	                }
	                else if (node.state.allowName) {
	                    node.name += c;
	                    delete node.state.allowArray;
	                }
	                else if (node.state.readArray) {
	                    node.type += c;
	                }
	                else {
	                    throwError(i);
	                }
	        }
	    }
	    if (node.parent) {
	        throw new Error("unexpected eof");
	    }
	    delete parent.state;
	    if (allowIndexed && node.name === 'indexed') {
	        node.indexed = true;
	        node.name = '';
	    }
	    parent.type = verifyType(parent.type);
	    return parent;
	}
	// @TODO: Better return type
	function parseSignatureEvent(fragment) {
	    var abi = {
	        anonymous: false,
	        inputs: [],
	        name: '',
	        type: 'event'
	    };
	    var match = fragment.match(regexParen);
	    if (!match) {
	        throw new Error('invalid event: ' + fragment);
	    }
	    abi.name = match[1].trim();
	    splitNesting(match[2]).forEach(function (param) {
	        param = parseParam(param, true);
	        param.indexed = !!param.indexed;
	        abi.inputs.push(param);
	    });
	    match[3].split(' ').forEach(function (modifier) {
	        switch (modifier) {
	            case 'anonymous':
	                abi.anonymous = true;
	                break;
	            case '':
	                break;
	            default:
	                errors$1.info('unknown modifier: ' + modifier);
	        }
	    });
	    if (abi.name && !abi.name.match(regexIdentifier)) {
	        throw new Error('invalid identifier: "' + abi.name + '"');
	    }
	    return abi;
	}
	function parseSignatureFunction(fragment) {
	    var abi = {
	        constant: false,
	        gas: null,
	        inputs: [],
	        name: '',
	        outputs: [],
	        payable: false,
	        stateMutability: null,
	        type: 'function'
	    };
	    var comps = fragment.split('@');
	    if (comps.length !== 1) {
	        if (comps.length > 2) {
	            throw new Error('invalid signature');
	        }
	        if (!comps[1].match(/^[0-9]+$/)) {
	            throw new Error('invalid signature gas');
	        }
	        abi.gas = bignumber.bigNumberify(comps[1]);
	        fragment = comps[0];
	    }
	    comps = fragment.split(' returns ');
	    var left = comps[0].match(regexParen);
	    if (!left) {
	        throw new Error('invalid signature');
	    }
	    abi.name = left[1].trim();
	    if (!abi.name.match(regexIdentifier)) {
	        throw new Error('invalid identifier: "' + left[1] + '"');
	    }
	    splitNesting(left[2]).forEach(function (param) {
	        abi.inputs.push(parseParam(param));
	    });
	    left[3].split(' ').forEach(function (modifier) {
	        switch (modifier) {
	            case 'constant':
	                abi.constant = true;
	                break;
	            case 'payable':
	                abi.payable = true;
	                abi.stateMutability = 'payable';
	                break;
	            case 'pure':
	                abi.constant = true;
	                abi.stateMutability = 'pure';
	                break;
	            case 'view':
	                abi.constant = true;
	                abi.stateMutability = 'view';
	                break;
	            case 'external':
	            case 'public':
	            case '':
	                break;
	            default:
	                errors$1.info('unknown modifier: ' + modifier);
	        }
	    });
	    // We have outputs
	    if (comps.length > 1) {
	        var right = comps[1].match(regexParen);
	        if (right[1].trim() != '' || right[3].trim() != '') {
	            throw new Error('unexpected tokens');
	        }
	        splitNesting(right[2]).forEach(function (param) {
	            abi.outputs.push(parseParam(param));
	        });
	    }
	    if (abi.name === 'constructor') {
	        abi.type = "constructor";
	        if (abi.outputs.length) {
	            throw new Error('constructor may not have outputs');
	        }
	        delete abi.name;
	        delete abi.outputs;
	    }
	    return abi;
	}
	function parseParamType(type) {
	    return parseParam(type, true);
	}
	exports.parseParamType = parseParamType;
	// @TODO: Allow a second boolean to expose names
	function formatParamType(paramType) {
	    return getParamCoder(exports.defaultCoerceFunc, paramType).type;
	}
	exports.formatParamType = formatParamType;
	// @TODO: Allow a second boolean to expose names and modifiers
	function formatSignature(fragment) {
	    return fragment.name + '(' + fragment.inputs.map(function (i) { return formatParamType(i); }).join(',') + ')';
	}
	exports.formatSignature = formatSignature;
	function parseSignature(fragment) {
	    if (typeof (fragment) === 'string') {
	        // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
	        fragment = fragment.replace(/\s/g, ' ');
	        fragment = fragment.replace(/\(/g, ' (').replace(/\)/g, ') ').replace(/\s+/g, ' ');
	        fragment = fragment.trim();
	        if (fragment.substring(0, 6) === 'event ') {
	            return parseSignatureEvent(fragment.substring(6).trim());
	        }
	        else {
	            if (fragment.substring(0, 9) === 'function ') {
	                fragment = fragment.substring(9);
	            }
	            return parseSignatureFunction(fragment.trim());
	        }
	    }
	    throw new Error('unknown signature');
	}
	exports.parseSignature = parseSignature;
	var Coder = /** @class */ (function () {
	    function Coder(coerceFunc, name, type, localName, dynamic) {
	        this.coerceFunc = coerceFunc;
	        this.name = name;
	        this.type = type;
	        this.localName = localName;
	        this.dynamic = dynamic;
	    }
	    return Coder;
	}());
	// Clones the functionality of an existing Coder, but without a localName
	var CoderAnonymous = /** @class */ (function (_super) {
	    __extends(CoderAnonymous, _super);
	    function CoderAnonymous(coder) {
	        var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;
	        properties.defineReadOnly(_this, 'coder', coder);
	        return _this;
	    }
	    CoderAnonymous.prototype.encode = function (value) { return this.coder.encode(value); };
	    CoderAnonymous.prototype.decode = function (data, offset) { return this.coder.decode(data, offset); };
	    return CoderAnonymous;
	}(Coder));
	var CoderNull = /** @class */ (function (_super) {
	    __extends(CoderNull, _super);
	    function CoderNull(coerceFunc, localName) {
	        return _super.call(this, coerceFunc, 'null', '', localName, false) || this;
	    }
	    CoderNull.prototype.encode = function (value) {
	        return bytes.arrayify([]);
	    };
	    CoderNull.prototype.decode = function (data, offset) {
	        if (offset > data.length) {
	            throw new Error('invalid null');
	        }
	        return {
	            consumed: 0,
	            value: this.coerceFunc('null', undefined)
	        };
	    };
	    return CoderNull;
	}(Coder));
	var CoderNumber = /** @class */ (function (_super) {
	    __extends(CoderNumber, _super);
	    function CoderNumber(coerceFunc, size, signed, localName) {
	        var _this = this;
	        var name = ((signed ? 'int' : 'uint') + (size * 8));
	        _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
	        _this.size = size;
	        _this.signed = signed;
	        return _this;
	    }
	    CoderNumber.prototype.encode = function (value) {
	        try {
	            var v = bignumber.bigNumberify(value);
	            if (this.signed) {
	                var bounds = constants.MaxUint256.maskn(this.size * 8 - 1);
	                if (v.gt(bounds)) {
	                    throw new Error('out-of-bounds');
	                }
	                bounds = bounds.add(constants.One).mul(constants.NegativeOne);
	                if (v.lt(bounds)) {
	                    throw new Error('out-of-bounds');
	                }
	            }
	            else if (v.lt(constants.Zero) || v.gt(constants.MaxUint256.maskn(this.size * 8))) {
	                throw new Error('out-of-bounds');
	            }
	            v = v.toTwos(this.size * 8).maskn(this.size * 8);
	            if (this.signed) {
	                v = v.fromTwos(this.size * 8).toTwos(256);
	            }
	            return bytes.padZeros(bytes.arrayify(v), 32);
	        }
	        catch (error) {
	            errors$1.throwError('invalid number value', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: this.name,
	                value: value
	            });
	        }
	        return null;
	    };
	    CoderNumber.prototype.decode = function (data, offset) {
	        if (data.length < offset + 32) {
	            errors$1.throwError('insufficient data for ' + this.name + ' type', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: this.name,
	                value: bytes.hexlify(data.slice(offset, offset + 32))
	            });
	        }
	        var junkLength = 32 - this.size;
	        var value = bignumber.bigNumberify(data.slice(offset + junkLength, offset + 32));
	        if (this.signed) {
	            value = value.fromTwos(this.size * 8);
	        }
	        else {
	            value = value.maskn(this.size * 8);
	        }
	        return {
	            consumed: 32,
	            value: this.coerceFunc(this.name, value),
	        };
	    };
	    return CoderNumber;
	}(Coder));
	var uint256Coder = new CoderNumber(function (type, value) { return value; }, 32, false, 'none');
	var CoderBoolean = /** @class */ (function (_super) {
	    __extends(CoderBoolean, _super);
	    function CoderBoolean(coerceFunc, localName) {
	        return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;
	    }
	    CoderBoolean.prototype.encode = function (value) {
	        return uint256Coder.encode(!!value ? 1 : 0);
	    };
	    CoderBoolean.prototype.decode = function (data, offset) {
	        try {
	            var result = uint256Coder.decode(data, offset);
	        }
	        catch (error) {
	            if (error.reason === 'insufficient data for uint256 type') {
	                errors$1.throwError('insufficient data for boolean type', errors$1.INVALID_ARGUMENT, {
	                    arg: this.localName,
	                    coderType: 'boolean',
	                    value: error.value
	                });
	            }
	            throw error;
	        }
	        return {
	            consumed: result.consumed,
	            value: this.coerceFunc('bool', !result.value.isZero())
	        };
	    };
	    return CoderBoolean;
	}(Coder));
	var CoderFixedBytes = /** @class */ (function (_super) {
	    __extends(CoderFixedBytes, _super);
	    function CoderFixedBytes(coerceFunc, length, localName) {
	        var _this = this;
	        var name = ('bytes' + length);
	        _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
	        _this.length = length;
	        return _this;
	    }
	    CoderFixedBytes.prototype.encode = function (value) {
	        var result = new Uint8Array(32);
	        try {
	            var data = bytes.arrayify(value);
	            if (data.length !== this.length) {
	                throw new Error('incorrect data length');
	            }
	            result.set(data);
	        }
	        catch (error) {
	            errors$1.throwError('invalid ' + this.name + ' value', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: this.name,
	                value: (error.value || value)
	            });
	        }
	        return result;
	    };
	    CoderFixedBytes.prototype.decode = function (data, offset) {
	        if (data.length < offset + 32) {
	            errors$1.throwError('insufficient data for ' + this.name + ' type', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: this.name,
	                value: bytes.hexlify(data.slice(offset, offset + 32))
	            });
	        }
	        return {
	            consumed: 32,
	            value: this.coerceFunc(this.name, bytes.hexlify(data.slice(offset, offset + this.length)))
	        };
	    };
	    return CoderFixedBytes;
	}(Coder));
	var CoderAddress = /** @class */ (function (_super) {
	    __extends(CoderAddress, _super);
	    function CoderAddress(coerceFunc, localName) {
	        return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;
	    }
	    CoderAddress.prototype.encode = function (value) {
	        var result = new Uint8Array(32);
	        try {
	            result.set(bytes.arrayify(address.getAddress(value)), 12);
	        }
	        catch (error) {
	            errors$1.throwError('invalid address', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: 'address',
	                value: value
	            });
	        }
	        return result;
	    };
	    CoderAddress.prototype.decode = function (data, offset) {
	        if (data.length < offset + 32) {
	            errors$1.throwError('insufficient data for address type', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: 'address',
	                value: bytes.hexlify(data.slice(offset, offset + 32))
	            });
	        }
	        return {
	            consumed: 32,
	            value: this.coerceFunc('address', address.getAddress(bytes.hexlify(data.slice(offset + 12, offset + 32))))
	        };
	    };
	    return CoderAddress;
	}(Coder));
	function _encodeDynamicBytes(value) {
	    var dataLength = 32 * Math.ceil(value.length / 32);
	    var padding = new Uint8Array(dataLength - value.length);
	    return bytes.concat([
	        uint256Coder.encode(value.length),
	        value,
	        padding
	    ]);
	}
	function _decodeDynamicBytes(data, offset, localName) {
	    if (data.length < offset + 32) {
	        errors$1.throwError('insufficient data for dynamicBytes length', errors$1.INVALID_ARGUMENT, {
	            arg: localName,
	            coderType: 'dynamicBytes',
	            value: bytes.hexlify(data.slice(offset, offset + 32))
	        });
	    }
	    var length = uint256Coder.decode(data, offset).value;
	    try {
	        length = length.toNumber();
	    }
	    catch (error) {
	        errors$1.throwError('dynamic bytes count too large', errors$1.INVALID_ARGUMENT, {
	            arg: localName,
	            coderType: 'dynamicBytes',
	            value: length.toString()
	        });
	    }
	    if (data.length < offset + 32 + length) {
	        errors$1.throwError('insufficient data for dynamicBytes type', errors$1.INVALID_ARGUMENT, {
	            arg: localName,
	            coderType: 'dynamicBytes',
	            value: bytes.hexlify(data.slice(offset, offset + 32 + length))
	        });
	    }
	    return {
	        consumed: 32 + 32 * Math.ceil(length / 32),
	        value: data.slice(offset + 32, offset + 32 + length),
	    };
	}
	var CoderDynamicBytes = /** @class */ (function (_super) {
	    __extends(CoderDynamicBytes, _super);
	    function CoderDynamicBytes(coerceFunc, localName) {
	        return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;
	    }
	    CoderDynamicBytes.prototype.encode = function (value) {
	        try {
	            return _encodeDynamicBytes(bytes.arrayify(value));
	        }
	        catch (error) {
	            errors$1.throwError('invalid bytes value', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: 'bytes',
	                value: error.value
	            });
	        }
	        return null;
	    };
	    CoderDynamicBytes.prototype.decode = function (data, offset) {
	        var result = _decodeDynamicBytes(data, offset, this.localName);
	        result.value = this.coerceFunc('bytes', bytes.hexlify(result.value));
	        return result;
	    };
	    return CoderDynamicBytes;
	}(Coder));
	var CoderString = /** @class */ (function (_super) {
	    __extends(CoderString, _super);
	    function CoderString(coerceFunc, localName) {
	        return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;
	    }
	    CoderString.prototype.encode = function (value) {
	        if (typeof (value) !== 'string') {
	            errors$1.throwError('invalid string value', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: 'string',
	                value: value
	            });
	        }
	        return _encodeDynamicBytes(utf8.toUtf8Bytes(value));
	    };
	    CoderString.prototype.decode = function (data, offset) {
	        var result = _decodeDynamicBytes(data, offset, this.localName);
	        result.value = this.coerceFunc('string', utf8.toUtf8String(result.value));
	        return result;
	    };
	    return CoderString;
	}(Coder));
	function alignSize(size) {
	    return 32 * Math.ceil(size / 32);
	}
	function pack(coders, values) {
	    if (Array.isArray(values)) ;
	    else if (values && typeof (values) === 'object') {
	        var arrayValues = [];
	        coders.forEach(function (coder) {
	            arrayValues.push(values[coder.localName]);
	        });
	        values = arrayValues;
	    }
	    else {
	        errors$1.throwError('invalid tuple value', errors$1.INVALID_ARGUMENT, {
	            coderType: 'tuple',
	            value: values
	        });
	    }
	    if (coders.length !== values.length) {
	        errors$1.throwError('types/value length mismatch', errors$1.INVALID_ARGUMENT, {
	            coderType: 'tuple',
	            value: values
	        });
	    }
	    var parts = [];
	    coders.forEach(function (coder, index) {
	        parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
	    });
	    var staticSize = 0, dynamicSize = 0;
	    parts.forEach(function (part) {
	        if (part.dynamic) {
	            staticSize += 32;
	            dynamicSize += alignSize(part.value.length);
	        }
	        else {
	            staticSize += alignSize(part.value.length);
	        }
	    });
	    var offset = 0, dynamicOffset = staticSize;
	    var data = new Uint8Array(staticSize + dynamicSize);
	    parts.forEach(function (part) {
	        if (part.dynamic) {
	            //uint256Coder.encode(dynamicOffset).copy(data, offset);
	            data.set(uint256Coder.encode(dynamicOffset), offset);
	            offset += 32;
	            //part.value.copy(data, dynamicOffset);  @TODO
	            data.set(part.value, dynamicOffset);
	            dynamicOffset += alignSize(part.value.length);
	        }
	        else {
	            //part.value.copy(data, offset);  @TODO
	            data.set(part.value, offset);
	            offset += alignSize(part.value.length);
	        }
	    });
	    return data;
	}
	function unpack(coders, data, offset) {
	    var baseOffset = offset;
	    var consumed = 0;
	    var value = [];
	    coders.forEach(function (coder) {
	        if (coder.dynamic) {
	            var dynamicOffset = uint256Coder.decode(data, offset);
	            var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());
	            // The dynamic part is leap-frogged somewhere else; doesn't count towards size
	            result.consumed = dynamicOffset.consumed;
	        }
	        else {
	            var result = coder.decode(data, offset);
	        }
	        if (result.value != undefined) {
	            value.push(result.value);
	        }
	        offset += result.consumed;
	        consumed += result.consumed;
	    });
	    coders.forEach(function (coder, index) {
	        var name = coder.localName;
	        if (!name) {
	            return;
	        }
	        if (name === 'length') {
	            name = '_length';
	        }
	        if (value[name] != null) {
	            return;
	        }
	        value[name] = value[index];
	    });
	    return {
	        value: value,
	        consumed: consumed
	    };
	}
	var CoderArray = /** @class */ (function (_super) {
	    __extends(CoderArray, _super);
	    function CoderArray(coerceFunc, coder, length, localName) {
	        var _this = this;
	        var type = (coder.type + '[' + (length >= 0 ? length : '') + ']');
	        var dynamic = (length === -1 || coder.dynamic);
	        _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;
	        _this.coder = coder;
	        _this.length = length;
	        return _this;
	    }
	    CoderArray.prototype.encode = function (value) {
	        if (!Array.isArray(value)) {
	            errors$1.throwError('expected array value', errors$1.INVALID_ARGUMENT, {
	                arg: this.localName,
	                coderType: 'array',
	                value: value
	            });
	        }
	        var count = this.length;
	        var result = new Uint8Array(0);
	        if (count === -1) {
	            count = value.length;
	            result = uint256Coder.encode(count);
	        }
	        errors$1.checkArgumentCount(count, value.length, ' in coder array' + (this.localName ? (" " + this.localName) : ""));
	        var coders = [];
	        for (var i = 0; i < value.length; i++) {
	            coders.push(this.coder);
	        }
	        return bytes.concat([result, pack(coders, value)]);
	    };
	    CoderArray.prototype.decode = function (data, offset) {
	        // @TODO:
	        //if (data.length < offset + length * 32) { throw new Error('invalid array'); }
	        var consumed = 0;
	        var count = this.length;
	        if (count === -1) {
	            try {
	                var decodedLength = uint256Coder.decode(data, offset);
	            }
	            catch (error) {
	                errors$1.throwError('insufficient data for dynamic array length', errors$1.INVALID_ARGUMENT, {
	                    arg: this.localName,
	                    coderType: 'array',
	                    value: error.value
	                });
	            }
	            try {
	                count = decodedLength.value.toNumber();
	            }
	            catch (error) {
	                errors$1.throwError('array count too large', errors$1.INVALID_ARGUMENT, {
	                    arg: this.localName,
	                    coderType: 'array',
	                    value: decodedLength.value.toString()
	                });
	            }
	            consumed += decodedLength.consumed;
	            offset += decodedLength.consumed;
	        }
	        var coders = [];
	        for (var i = 0; i < count; i++) {
	            coders.push(new CoderAnonymous(this.coder));
	        }
	        var result = unpack(coders, data, offset);
	        result.consumed += consumed;
	        result.value = this.coerceFunc(this.type, result.value);
	        return result;
	    };
	    return CoderArray;
	}(Coder));
	var CoderTuple = /** @class */ (function (_super) {
	    __extends(CoderTuple, _super);
	    function CoderTuple(coerceFunc, coders, localName) {
	        var _this = this;
	        var dynamic = false;
	        var types = [];
	        coders.forEach(function (coder) {
	            if (coder.dynamic) {
	                dynamic = true;
	            }
	            types.push(coder.type);
	        });
	        var type = ('tuple(' + types.join(',') + ')');
	        _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;
	        _this.coders = coders;
	        return _this;
	    }
	    CoderTuple.prototype.encode = function (value) {
	        return pack(this.coders, value);
	    };
	    CoderTuple.prototype.decode = function (data, offset) {
	        var result = unpack(this.coders, data, offset);
	        result.value = this.coerceFunc(this.type, result.value);
	        return result;
	    };
	    return CoderTuple;
	}(Coder));
	/*
	function getTypes(coders) {
	    var type = coderTuple(coders).type;
	    return type.substring(6, type.length - 1);
	}
	*/
	function splitNesting(value) {
	    value = value.trim();
	    var result = [];
	    var accum = '';
	    var depth = 0;
	    for (var offset = 0; offset < value.length; offset++) {
	        var c = value[offset];
	        if (c === ',' && depth === 0) {
	            result.push(accum);
	            accum = '';
	        }
	        else {
	            accum += c;
	            if (c === '(') {
	                depth++;
	            }
	            else if (c === ')') {
	                depth--;
	                if (depth === -1) {
	                    throw new Error('unbalanced parenthsis');
	                }
	            }
	        }
	    }
	    if (accum) {
	        result.push(accum);
	    }
	    return result;
	}
	// @TODO: Is there a way to return "class"?
	var paramTypeSimple = {
	    address: CoderAddress,
	    bool: CoderBoolean,
	    string: CoderString,
	    bytes: CoderDynamicBytes,
	};
	function getTupleParamCoder(coerceFunc, components, localName) {
	    if (!components) {
	        components = [];
	    }
	    var coders = [];
	    components.forEach(function (component) {
	        coders.push(getParamCoder(coerceFunc, component));
	    });
	    return new CoderTuple(coerceFunc, coders, localName);
	}
	function getParamCoder(coerceFunc, param) {
	    var coder = paramTypeSimple[param.type];
	    if (coder) {
	        return new coder(coerceFunc, param.name);
	    }
	    var match = param.type.match(paramTypeNumber);
	    if (match) {
	        var size = parseInt(match[2] || "256");
	        if (size === 0 || size > 256 || (size % 8) !== 0) {
	            errors$1.throwError('invalid ' + match[1] + ' bit length', errors$1.INVALID_ARGUMENT, {
	                arg: 'param',
	                value: param
	            });
	        }
	        return new CoderNumber(coerceFunc, size / 8, (match[1] === 'int'), param.name);
	    }
	    var match = param.type.match(paramTypeBytes);
	    if (match) {
	        var size = parseInt(match[1]);
	        if (size === 0 || size > 32) {
	            errors$1.throwError('invalid bytes length', errors$1.INVALID_ARGUMENT, {
	                arg: 'param',
	                value: param
	            });
	        }
	        return new CoderFixedBytes(coerceFunc, size, param.name);
	    }
	    var match = param.type.match(paramTypeArray);
	    if (match) {
	        var size = parseInt(match[2] || "-1");
	        param = properties.shallowCopy(param);
	        param.type = match[1];
	        param = properties.deepCopy(param);
	        return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);
	    }
	    if (param.type.substring(0, 5) === 'tuple') {
	        return getTupleParamCoder(coerceFunc, param.components, param.name);
	    }
	    if (param.type === '') {
	        return new CoderNull(coerceFunc, param.name);
	    }
	    errors$1.throwError('invalid type', errors$1.INVALID_ARGUMENT, {
	        arg: 'type',
	        value: param.type
	    });
	    return null;
	}
	var AbiCoder = /** @class */ (function () {
	    function AbiCoder(coerceFunc) {
	        errors$1.checkNew(this, AbiCoder);
	        if (!coerceFunc) {
	            coerceFunc = exports.defaultCoerceFunc;
	        }
	        properties.defineReadOnly(this, 'coerceFunc', coerceFunc);
	    }
	    AbiCoder.prototype.encode = function (types, values) {
	        if (types.length !== values.length) {
	            errors$1.throwError('types/values length mismatch', errors$1.INVALID_ARGUMENT, {
	                count: { types: types.length, values: values.length },
	                value: { types: types, values: values }
	            });
	        }
	        var coders = [];
	        types.forEach(function (type) {
	            // Convert types to type objects
	            //   - "uint foo" => { type: "uint", name: "foo" }
	            //   - "tuple(uint, uint)" => { type: "tuple", components: [ { type: "uint" }, { type: "uint" }, ] }
	            var typeObject = null;
	            if (typeof (type) === 'string') {
	                typeObject = parseParam(type);
	            }
	            else {
	                typeObject = type;
	            }
	            coders.push(getParamCoder(this.coerceFunc, typeObject));
	        }, this);
	        return bytes.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));
	    };
	    AbiCoder.prototype.decode = function (types, data) {
	        var coders = [];
	        types.forEach(function (type) {
	            // See encode for details
	            var typeObject = null;
	            if (typeof (type) === 'string') {
	                typeObject = parseParam(type);
	            }
	            else {
	                typeObject = properties.deepCopy(type);
	            }
	            coders.push(getParamCoder(this.coerceFunc, typeObject));
	        }, this);
	        return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes.arrayify(data), 0).value;
	    };
	    return AbiCoder;
	}());
	exports.AbiCoder = AbiCoder;
	exports.defaultAbiCoder = new AbiCoder();
	});

	var hash = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var errors$1 = __importStar(errors);



	///////////////////////////////
	var Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
	var Partition = new RegExp("^((.*)\\.)?([^.]+)$");
	var UseSTD3ASCIIRules = new RegExp("^[a-z0-9.-]*$");
	function namehash(name) {
	    if (typeof (name) !== 'string') {
	        errors$1.throwError('invalid address - ' + String(name), errors$1.INVALID_ARGUMENT, {
	            argument: 'name',
	            value: name
	        });
	    }
	    name = name.toLowerCase();
	    // Supporting the full UTF-8 space requires additional (and large)
	    // libraries, so for now we simply do not support them.
	    // It should be fairly easy in the future to support systems with
	    // String.normalize, but that is future work.
	    if (!name.match(UseSTD3ASCIIRules)) {
	        errors$1.throwError('contains invalid UseSTD3ASCIIRules characters', errors$1.INVALID_ARGUMENT, {
	            argument: 'name',
	            value: name
	        });
	    }
	    var result = Zeros;
	    while (name.length) {
	        var partition = name.match(Partition);
	        var label = utf8.toUtf8Bytes(partition[3]);
	        result = keccak256_1.keccak256(bytes.concat([result, keccak256_1.keccak256(label)]));
	        name = partition[2] || '';
	    }
	    return bytes.hexlify(result);
	}
	exports.namehash = namehash;
	function id(text) {
	    return keccak256_1.keccak256(utf8.toUtf8Bytes(text));
	}
	exports.id = id;
	function hashMessage(message) {
	    return keccak256_1.keccak256(bytes.concat([
	        utf8.toUtf8Bytes('\x19Ethereum Signed Message:\n'),
	        utf8.toUtf8Bytes(String(message.length)),
	        ((typeof (message) === 'string') ? utf8.toUtf8Bytes(message) : message)
	    ]));
	}
	exports.hashMessage = hashMessage;
	});

	var _interface = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI







	var errors$1 = __importStar(errors);
	///////////////////////////////
	var _Indexed = /** @class */ (function () {
	    function _Indexed(hash) {
	        properties.setType(this, 'Indexed');
	        properties.defineReadOnly(this, 'hash', hash);
	    }
	    return _Indexed;
	}());
	var Description = /** @class */ (function () {
	    function Description(info) {
	        properties.setType(this, 'Description');
	        for (var key in info) {
	            properties.defineReadOnly(this, key, properties.deepCopy(info[key], true));
	        }
	        Object.freeze(this);
	    }
	    return Description;
	}());
	var _DeployDescription = /** @class */ (function (_super) {
	    __extends(_DeployDescription, _super);
	    function _DeployDescription() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    _DeployDescription.prototype.encode = function (bytecode, params) {
	        if (!bytes.isHexString(bytecode)) {
	            errors$1.throwError('invalid contract bytecode', errors$1.INVALID_ARGUMENT, {
	                arg: 'bytecode',
	                value: bytecode
	            });
	        }
	        errors$1.checkArgumentCount(params.length, this.inputs.length, ' in Interface constructor');
	        try {
	            return (bytecode + abiCoder.defaultAbiCoder.encode(this.inputs, params).substring(2));
	        }
	        catch (error) {
	            errors$1.throwError('invalid constructor argument', errors$1.INVALID_ARGUMENT, {
	                arg: error.arg,
	                reason: error.reason,
	                value: error.value
	            });
	        }
	        return null;
	    };
	    return _DeployDescription;
	}(Description));
	var _FunctionDescription = /** @class */ (function (_super) {
	    __extends(_FunctionDescription, _super);
	    function _FunctionDescription() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    _FunctionDescription.prototype.encode = function (params) {
	        errors$1.checkArgumentCount(params.length, this.inputs.length, ' in interface function ' + this.name);
	        try {
	            return this.sighash + abiCoder.defaultAbiCoder.encode(this.inputs, params).substring(2);
	        }
	        catch (error) {
	            errors$1.throwError('invalid input argument', errors$1.INVALID_ARGUMENT, {
	                arg: error.arg,
	                reason: error.reason,
	                value: error.value
	            });
	        }
	        return null;
	    };
	    _FunctionDescription.prototype.decode = function (data) {
	        try {
	            return abiCoder.defaultAbiCoder.decode(this.outputs, bytes.arrayify(data));
	        }
	        catch (error) {
	            errors$1.throwError('invalid data for function output', errors$1.INVALID_ARGUMENT, {
	                arg: 'data',
	                errorArg: error.arg,
	                errorValue: error.value,
	                value: data,
	                reason: error.reason
	            });
	        }
	    };
	    return _FunctionDescription;
	}(Description));
	var Result = /** @class */ (function (_super) {
	    __extends(Result, _super);
	    function Result() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return Result;
	}(Description));
	var _EventDescription = /** @class */ (function (_super) {
	    __extends(_EventDescription, _super);
	    function _EventDescription() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    _EventDescription.prototype.encodeTopics = function (params) {
	        var _this = this;
	        if (params.length > this.inputs.length) {
	            errors$1.throwError('too many arguments for ' + this.name, errors$1.UNEXPECTED_ARGUMENT, { maxCount: params.length, expectedCount: this.inputs.length });
	        }
	        var topics = [];
	        if (!this.anonymous) {
	            topics.push(this.topic);
	        }
	        params.forEach(function (arg, index) {
	            var param = _this.inputs[index];
	            if (!param.indexed) {
	                if (arg != null) {
	                    errors$1.throwError('cannot filter non-indexed parameters; must be null', errors$1.INVALID_ARGUMENT, { argument: (param.name || index), value: arg });
	                }
	                return;
	            }
	            if (arg == null) {
	                topics.push(null);
	            }
	            else if (param.type === 'string') {
	                topics.push(hash.id(arg));
	            }
	            else if (param.type === 'bytes') {
	                topics.push(keccak256_1.keccak256(arg));
	            }
	            else if (param.type.indexOf('[') !== -1 || param.type.substring(0, 5) === 'tuple') {
	                errors$1.throwError('filtering with tuples or arrays not implemented yet; bug us on GitHub', errors$1.NOT_IMPLEMENTED, { operation: 'filter(array|tuple)' });
	            }
	            else {
	                if (param.type === 'address') {
	                    address.getAddress(arg);
	                }
	                topics.push(bytes.hexZeroPad(bytes.hexlify(arg), 32).toLowerCase());
	            }
	        });
	        // Trim off trailing nulls
	        while (topics.length && topics[topics.length - 1] === null) {
	            topics.pop();
	        }
	        return topics;
	    };
	    _EventDescription.prototype.decode = function (data, topics) {
	        // Strip the signature off of non-anonymous topics
	        if (topics != null && !this.anonymous) {
	            topics = topics.slice(1);
	        }
	        var inputIndexed = [];
	        var inputNonIndexed = [];
	        var inputDynamic = [];
	        this.inputs.forEach(function (param, index) {
	            if (param.indexed) {
	                if (param.type === 'string' || param.type === 'bytes' || param.type.indexOf('[') >= 0 || param.type.substring(0, 5) === 'tuple') {
	                    inputIndexed.push({ type: 'bytes32', name: (param.name || '') });
	                    inputDynamic.push(true);
	                }
	                else {
	                    inputIndexed.push(param);
	                    inputDynamic.push(false);
	                }
	            }
	            else {
	                inputNonIndexed.push(param);
	                inputDynamic.push(false);
	            }
	        });
	        if (topics != null) {
	            var resultIndexed = abiCoder.defaultAbiCoder.decode(inputIndexed, bytes.concat(topics));
	        }
	        var resultNonIndexed = abiCoder.defaultAbiCoder.decode(inputNonIndexed, bytes.arrayify(data));
	        var result = {};
	        var nonIndexedIndex = 0, indexedIndex = 0;
	        this.inputs.forEach(function (input, index) {
	            if (input.indexed) {
	                if (topics == null) {
	                    result[index] = new _Indexed(null);
	                }
	                else if (inputDynamic[index]) {
	                    result[index] = new _Indexed(resultIndexed[indexedIndex++]);
	                }
	                else {
	                    result[index] = resultIndexed[indexedIndex++];
	                }
	            }
	            else {
	                result[index] = resultNonIndexed[nonIndexedIndex++];
	            }
	            if (input.name) {
	                result[input.name] = result[index];
	            }
	        });
	        result.length = this.inputs.length;
	        return new Result(result);
	    };
	    return _EventDescription;
	}(Description));
	var _TransactionDescription = /** @class */ (function (_super) {
	    __extends(_TransactionDescription, _super);
	    function _TransactionDescription() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return _TransactionDescription;
	}(Description));
	var _LogDescription = /** @class */ (function (_super) {
	    __extends(_LogDescription, _super);
	    function _LogDescription() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return _LogDescription;
	}(Description));
	function addMethod(method) {
	    switch (method.type) {
	        case 'constructor': {
	            var description = new _DeployDescription({
	                inputs: method.inputs,
	                payable: (method.payable == null || !!method.payable)
	            });
	            if (!this.deployFunction) {
	                this.deployFunction = description;
	            }
	            break;
	        }
	        case 'function': {
	            var signature = abiCoder.formatSignature(method).replace(/tuple/g, '');
	            var sighash = hash.id(signature).substring(0, 10);
	            var isConst = false;
	            if (method.constant != null) {
	                isConst = method.constant;
	            }
	            else if (method.stateMutability != null) {
	                isConst = (method.stateMutability == "view" || method.stateMutability == "pure");
	            }
	            var description = new _FunctionDescription({
	                inputs: method.inputs,
	                outputs: method.outputs,
	                gas: method.gas,
	                payable: (method.payable == null || !!method.payable),
	                type: (isConst ? 'call' : 'transaction'),
	                name: method.name,
	                signature: signature,
	                sighash: sighash,
	            });
	            // Expose the first (and hopefully unique named function)
	            if (method.name) {
	                if (this.functions[method.name] == null) {
	                    properties.defineReadOnly(this.functions, method.name, description);
	                }
	                else {
	                    errors$1.warn('WARNING: Multiple definitions for ' + method.name);
	                }
	            }
	            // Expose all methods by their signature, for overloaded functions
	            if (this.functions[description.signature] == null) {
	                properties.defineReadOnly(this.functions, description.signature, description);
	            }
	            break;
	        }
	        case 'event': {
	            var signature = abiCoder.formatSignature(method).replace(/tuple/g, '');
	            var description = new _EventDescription({
	                name: method.name,
	                signature: signature,
	                inputs: method.inputs,
	                topic: hash.id(signature),
	                anonymous: (!!method.anonymous)
	            });
	            // Expose the first (and hopefully unique) event name
	            if (method.name && this.events[method.name] == null) {
	                properties.defineReadOnly(this.events, method.name, description);
	            }
	            // Expose all events by their signature, for overloaded functions
	            if (this.events[description.signature] == null) {
	                properties.defineReadOnly(this.events, description.signature, description);
	            }
	            break;
	        }
	        case "receive":
	        case 'fallback':
	            // Nothing to do for fallback
	            break;
	        default:
	            errors$1.warn('WARNING: unsupported ABI type - ' + method.type);
	            break;
	    }
	}
	var Interface = /** @class */ (function () {
	    // ParamType is not actually correct here, but for legacy reasons,
	    // we need it. See #721.
	    function Interface(abi) {
	        errors$1.checkNew(this, Interface);
	        if (typeof (abi) === 'string') {
	            try {
	                abi = JSON.parse(abi);
	            }
	            catch (error) {
	                errors$1.throwError('could not parse ABI JSON', errors$1.INVALID_ARGUMENT, {
	                    arg: 'abi',
	                    errorMessage: error.message,
	                    value: abi
	                });
	            }
	            if (!Array.isArray(abi)) {
	                errors$1.throwError('invalid abi', errors$1.INVALID_ARGUMENT, { arg: 'abi', value: abi });
	                return null;
	            }
	        }
	        properties.defineReadOnly(this, 'functions', {});
	        properties.defineReadOnly(this, 'events', {});
	        // Convert any supported ABI format into a standard ABI format
	        var _abi = [];
	        abi.forEach(function (fragment) {
	            if (typeof (fragment) === 'string') {
	                fragment = abiCoder.parseSignature(fragment);
	            }
	            // @TODO: We should probable do some validation; create abiCoder.formatSignature for checking
	            _abi.push(fragment);
	        });
	        properties.defineReadOnly(this, 'abi', properties.deepCopy(_abi, true));
	        _abi.forEach(addMethod, this);
	        // If there wasn't a constructor, create the default constructor
	        if (!this.deployFunction) {
	            addMethod.call(this, { type: 'constructor', inputs: [] });
	        }
	        properties.setType(this, 'Interface');
	    }
	    Interface.prototype.parseTransaction = function (tx) {
	        var sighash = tx.data.substring(0, 10).toLowerCase();
	        for (var name in this.functions) {
	            if (name.indexOf('(') === -1) {
	                continue;
	            }
	            var func = this.functions[name];
	            if (func.sighash === sighash) {
	                var result = abiCoder.defaultAbiCoder.decode(func.inputs, '0x' + tx.data.substring(10));
	                return new _TransactionDescription({
	                    args: result,
	                    decode: func.decode,
	                    name: func.name,
	                    signature: func.signature,
	                    sighash: func.sighash,
	                    value: bignumber.bigNumberify(tx.value || '0'),
	                });
	            }
	        }
	        return null;
	    };
	    Interface.prototype.parseLog = function (log) {
	        for (var name in this.events) {
	            if (name.indexOf('(') === -1) {
	                continue;
	            }
	            var event = this.events[name];
	            if (event.anonymous) {
	                continue;
	            }
	            if (event.topic !== log.topics[0]) {
	                continue;
	            }
	            // @TODO: If anonymous, and the only method, and the input count matches, should we parse and return it?
	            return new _LogDescription({
	                decode: event.decode,
	                name: event.name,
	                signature: event.signature,
	                topic: event.topic,
	                values: event.decode(log.data, log.topics)
	            });
	        }
	        return null;
	    };
	    Interface.isInterface = function (value) {
	        return properties.isType(value, 'Interface');
	    };
	    Interface.isIndexed = function (value) {
	        return properties.isType(value, 'Indexed');
	    };
	    return Interface;
	}());
	exports.Interface = Interface;
	});

	var abstractProvider = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	///////////////////////////////
	// Exported Abstracts
	var Provider = /** @class */ (function () {
	    function Provider() {
	        properties.setType(this, 'Provider');
	    }
	    Provider.isProvider = function (value) {
	        return properties.isType(value, 'Provider');
	    };
	    return Provider;
	}());
	exports.Provider = Provider;
	//defineReadOnly(Signer, 'inherits', inheritable(Abstract));
	});

	var abstractSigner = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	var Signer = /** @class */ (function () {
	    function Signer() {
	        properties.setType(this, 'Signer');
	    }
	    Signer.isSigner = function (value) {
	        return properties.isType(value, 'Signer');
	    };
	    return Signer;
	}());
	exports.Signer = Signer;
	//defineReadOnly(Signer, 'inherits', inheritable(Signer));
	});

	var contract = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var errors$1 = __importStar(errors);






	///////////////////////////////
	// Imported Abstracts


	///////////////////////////////
	var VoidSigner = /** @class */ (function (_super) {
	    __extends(VoidSigner, _super);
	    function VoidSigner(address, provider) {
	        var _this = _super.call(this) || this;
	        properties.defineReadOnly(_this, 'address', address);
	        properties.defineReadOnly(_this, 'provider', provider);
	        return _this;
	    }
	    VoidSigner.prototype.getAddress = function () {
	        return Promise.resolve(this.address);
	    };
	    VoidSigner.prototype._fail = function (message, operation) {
	        return Promise.resolve().then(function () {
	            errors$1.throwError(message, errors$1.UNSUPPORTED_OPERATION, { operation: operation });
	        });
	    };
	    VoidSigner.prototype.signMessage = function (message) {
	        return this._fail('VoidSigner cannot sign messages', 'signMessage');
	    };
	    VoidSigner.prototype.sendTransaction = function (transaction) {
	        return this._fail('VoidSigner cannot sign transactions', 'sendTransaction');
	    };
	    VoidSigner.prototype.connect = function (provider) {
	        return new VoidSigner(this.address, provider);
	    };
	    return VoidSigner;
	}(abstractSigner.Signer));
	exports.VoidSigner = VoidSigner;
	var allowedTransactionKeys = {
	    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true
	};
	// Recursively replaces ENS names with promises to resolve the name and
	// stalls until all promises have returned
	// @TODO: Expand this to resolve any promises too
	function resolveAddresses(provider, value, paramType) {
	    if (Array.isArray(paramType)) {
	        var promises_1 = [];
	        paramType.forEach(function (paramType, index) {
	            var v = null;
	            if (Array.isArray(value)) {
	                v = value[index];
	            }
	            else {
	                v = value[paramType.name];
	            }
	            promises_1.push(resolveAddresses(provider, v, paramType));
	        });
	        return Promise.all(promises_1);
	    }
	    if (paramType.type === 'address') {
	        return provider.resolveName(value);
	    }
	    if (paramType.type === 'tuple') {
	        return resolveAddresses(provider, value, paramType.components);
	    }
	    // Strips one level of array indexing off the end to recuse into
	    var isArrayMatch = paramType.type.match(/(.*)(\[[0-9]*\]$)/);
	    if (isArrayMatch) {
	        if (!Array.isArray(value)) {
	            throw new Error('invalid value for array');
	        }
	        var promises = [];
	        var subParamType = {
	            components: paramType.components,
	            type: isArrayMatch[1],
	        };
	        value.forEach(function (v) {
	            promises.push(resolveAddresses(provider, v, subParamType));
	        });
	        return Promise.all(promises);
	    }
	    return Promise.resolve(value);
	}
	function runMethod(contract, functionName, estimateOnly) {
	    var method = contract.interface.functions[functionName];
	    return function () {
	        var params = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            params[_i] = arguments[_i];
	        }
	        var tx = {};
	        var blockTag = null;
	        // If 1 extra parameter was passed in, it contains overrides
	        if (params.length === method.inputs.length + 1 && typeof (params[params.length - 1]) === 'object') {
	            tx = properties.shallowCopy(params.pop());
	            if (tx.blockTag != null) {
	                blockTag = tx.blockTag;
	            }
	            delete tx.blockTag;
	            // Check for unexpected keys (e.g. using "gas" instead of "gasLimit")
	            for (var key in tx) {
	                if (!allowedTransactionKeys[key]) {
	                    throw new Error('unknown transaction override ' + key);
	                }
	            }
	        }
	        if (params.length != method.inputs.length) {
	            throw new Error('incorrect number of arguments');
	        }
	        // Check overrides make sense
	        ['data', 'to'].forEach(function (key) {
	            if (tx[key] != null) {
	                errors$1.throwError('cannot override ' + key, errors$1.UNSUPPORTED_OPERATION, { operation: key });
	            }
	        });
	        tx.to = contract._deployed(blockTag).then(function () {
	            return contract.addressPromise;
	        });
	        return resolveAddresses(contract.provider, params, method.inputs).then(function (params) {
	            tx.data = method.encode(params);
	            if (method.type === 'call') {
	                // Call (constant functions) always cost 0 ether
	                if (estimateOnly) {
	                    return Promise.resolve(constants.Zero);
	                }
	                if (!contract.provider) {
	                    errors$1.throwError('call (constant functions) require a provider or a signer with a provider', errors$1.UNSUPPORTED_OPERATION, { operation: 'call' });
	                }
	                // Check overrides make sense
	                ['gasLimit', 'gasPrice', 'value'].forEach(function (key) {
	                    if (tx[key] != null) {
	                        throw new Error('call cannot override ' + key);
	                    }
	                });
	                if (tx.from == null && contract.signer) {
	                    tx.from = contract.signer.getAddress();
	                }
	                return contract.provider.call(tx, blockTag).then(function (value) {
	                    if ((bytes.hexDataLength(value) % 32) === 4 && bytes.hexDataSlice(value, 0, 4) === '0x08c379a0') {
	                        var reason = abiCoder.defaultAbiCoder.decode(['string'], bytes.hexDataSlice(value, 4));
	                        errors$1.throwError('call revert exception', errors$1.CALL_EXCEPTION, {
	                            address: contract.address,
	                            args: params,
	                            method: method.signature,
	                            errorSignature: 'Error(string)',
	                            errorArgs: [reason],
	                            reason: reason,
	                            transaction: tx
	                        });
	                    }
	                    try {
	                        var result = method.decode(value);
	                        if (method.outputs.length === 1) {
	                            result = result[0];
	                        }
	                        return result;
	                    }
	                    catch (error) {
	                        if (value === '0x' && method.outputs.length > 0) {
	                            errors$1.throwError('call exception', errors$1.CALL_EXCEPTION, {
	                                address: contract.address,
	                                method: method.signature,
	                                args: params
	                            });
	                        }
	                        throw error;
	                    }
	                });
	            }
	            else if (method.type === 'transaction') {
	                // Only computing the transaction estimate
	                if (estimateOnly) {
	                    if (!contract.provider) {
	                        errors$1.throwError('estimate gas require a provider or a signer with a provider', errors$1.UNSUPPORTED_OPERATION, { operation: 'estimateGas' });
	                    }
	                    if (tx.from == null && contract.signer) {
	                        tx.from = contract.signer.getAddress();
	                    }
	                    return contract.provider.estimateGas(tx);
	                }
	                if (tx.gasLimit == null && method.gas != null) {
	                    tx.gasLimit = bignumber.bigNumberify(method.gas).add(21000);
	                }
	                if (!contract.signer) {
	                    errors$1.throwError('sending a transaction requires a signer', errors$1.UNSUPPORTED_OPERATION, { operation: 'sendTransaction' });
	                }
	                // Make sure they aren't overriding something they shouldn't
	                if (tx.from != null) {
	                    errors$1.throwError('cannot override from in a transaction', errors$1.UNSUPPORTED_OPERATION, { operation: 'sendTransaction' });
	                }
	                return contract.signer.sendTransaction(tx).then(function (tx) {
	                    var wait = tx.wait.bind(tx);
	                    tx.wait = function (confirmations) {
	                        return wait(confirmations).then(function (receipt) {
	                            receipt.events = receipt.logs.map(function (log) {
	                                var event = properties.deepCopy(log);
	                                var parsed = contract.interface.parseLog(log);
	                                if (parsed) {
	                                    event.args = parsed.values;
	                                    event.decode = parsed.decode;
	                                    event.event = parsed.name;
	                                    event.eventSignature = parsed.signature;
	                                }
	                                event.removeListener = function () { return contract.provider; };
	                                event.getBlock = function () {
	                                    return contract.provider.getBlock(receipt.blockHash);
	                                };
	                                event.getTransaction = function () {
	                                    return contract.provider.getTransaction(receipt.transactionHash);
	                                };
	                                event.getTransactionReceipt = function () {
	                                    return Promise.resolve(receipt);
	                                };
	                                return event;
	                            });
	                            return receipt;
	                        });
	                    };
	                    return tx;
	                });
	            }
	            throw new Error('invalid type - ' + method.type);
	        });
	    };
	}
	function getEventTag(filter) {
	    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
	        return '*';
	    }
	    return (filter.address || '*') + '@' + (filter.topics ? filter.topics.join(':') : '');
	}
	var Contract = /** @class */ (function () {
	    // https://github.com/Microsoft/TypeScript/issues/5453
	    // Once this issue is resolved (there are open PR) we can do this nicer
	    // by making addressOrName default to null for 2 operand calls. :)
	    // ParamType is not actually correct here, but for legacy reasons,
	    // we need it. See #721.
	    function Contract(addressOrName, contractInterface, signerOrProvider) {
	        var _this = this;
	        errors$1.checkNew(this, Contract);
	        // @TODO: Maybe still check the addressOrName looks like a valid address or name?
	        //address = getAddress(address);
	        if (_interface.Interface.isInterface(contractInterface)) {
	            properties.defineReadOnly(this, 'interface', contractInterface);
	        }
	        else {
	            properties.defineReadOnly(this, 'interface', new _interface.Interface(contractInterface));
	        }
	        if (abstractSigner.Signer.isSigner(signerOrProvider)) {
	            properties.defineReadOnly(this, 'provider', signerOrProvider.provider);
	            properties.defineReadOnly(this, 'signer', signerOrProvider);
	        }
	        else if (abstractProvider.Provider.isProvider(signerOrProvider)) {
	            properties.defineReadOnly(this, 'provider', signerOrProvider);
	            properties.defineReadOnly(this, 'signer', null);
	        }
	        else {
	            errors$1.throwError('invalid signer or provider', errors$1.INVALID_ARGUMENT, { arg: 'signerOrProvider', value: signerOrProvider });
	        }
	        properties.defineReadOnly(this, 'estimate', {});
	        properties.defineReadOnly(this, 'functions', {});
	        properties.defineReadOnly(this, 'filters', {});
	        Object.keys(this.interface.events).forEach(function (eventName) {
	            var event = _this.interface.events[eventName];
	            properties.defineReadOnly(_this.filters, eventName, function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return {
	                    address: _this.address,
	                    topics: event.encodeTopics(args)
	                };
	            });
	        });
	        this._events = [];
	        properties.defineReadOnly(this, 'address', addressOrName);
	        if (this.provider) {
	            properties.defineReadOnly(this, 'addressPromise', this.provider.resolveName(addressOrName).then(function (address) {
	                if (address == null) {
	                    throw new Error('name not found');
	                }
	                return address;
	            }).catch(function (error) {
	                throw error;
	            }));
	        }
	        else {
	            try {
	                properties.defineReadOnly(this, 'addressPromise', Promise.resolve(address.getAddress(addressOrName)));
	            }
	            catch (error) {
	                // Without a provider, we cannot use ENS names
	                errors$1.throwError('provider is required to use non-address contract address', errors$1.INVALID_ARGUMENT, { argument: 'addressOrName', value: addressOrName });
	            }
	        }
	        Object.keys(this.interface.functions).forEach(function (name) {
	            var run = runMethod(_this, name, false);
	            if (_this[name] == null) {
	                properties.defineReadOnly(_this, name, run);
	            }
	            else {
	                errors$1.warn('WARNING: Multiple definitions for ' + name);
	            }
	            if (_this.functions[name] == null) {
	                properties.defineReadOnly(_this.functions, name, run);
	                properties.defineReadOnly(_this.estimate, name, runMethod(_this, name, true));
	            }
	        });
	    }
	    // @TODO: Allow timeout?
	    Contract.prototype.deployed = function () {
	        return this._deployed();
	    };
	    Contract.prototype._deployed = function (blockTag) {
	        var _this = this;
	        if (!this._deployedPromise) {
	            // If we were just deployed, we know the transaction we should occur in
	            if (this.deployTransaction) {
	                this._deployedPromise = this.deployTransaction.wait().then(function () {
	                    return _this;
	                });
	            }
	            else {
	                // @TODO: Once we allow a timeout to be passed in, we will wait
	                // up to that many blocks for getCode
	                // Otherwise, poll for our code to be deployed
	                this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
	                    if (code === '0x') {
	                        errors$1.throwError('contract not deployed', errors$1.UNSUPPORTED_OPERATION, {
	                            contractAddress: _this.address,
	                            operation: 'getDeployed'
	                        });
	                    }
	                    return _this;
	                });
	            }
	        }
	        return this._deployedPromise;
	    };
	    // @TODO:
	    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
	    // @TODO:
	    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
	    Contract.prototype.fallback = function (overrides) {
	        var _this = this;
	        if (!this.signer) {
	            errors$1.throwError('sending a transaction requires a signer', errors$1.UNSUPPORTED_OPERATION, { operation: 'sendTransaction(fallback)' });
	        }
	        var tx = properties.shallowCopy(overrides || {});
	        ['from', 'to'].forEach(function (key) {
	            if (tx[key] == null) {
	                return;
	            }
	            errors$1.throwError('cannot override ' + key, errors$1.UNSUPPORTED_OPERATION, { operation: key });
	        });
	        tx.to = this.addressPromise;
	        return this.deployed().then(function () {
	            return _this.signer.sendTransaction(tx);
	        });
	    };
	    // Reconnect to a different signer or provider
	    Contract.prototype.connect = function (signerOrProvider) {
	        if (typeof (signerOrProvider) === 'string') {
	            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
	        }
	        var contract = new Contract(this.address, this.interface, signerOrProvider);
	        if (this.deployTransaction) {
	            properties.defineReadOnly(contract, 'deployTransaction', this.deployTransaction);
	        }
	        return contract;
	    };
	    // Re-attach to a different on=chain instance of this contract
	    Contract.prototype.attach = function (addressOrName) {
	        return new Contract(addressOrName, this.interface, this.signer || this.provider);
	    };
	    Contract.isIndexed = function (value) {
	        return _interface.Interface.isIndexed(value);
	    };
	    Contract.prototype._getEventFilter = function (eventName) {
	        var _this = this;
	        if (typeof (eventName) === 'string') {
	            // Listen for any event
	            if (eventName === '*') {
	                return {
	                    prepareEvent: function (e) {
	                        var parsed = _this.interface.parseLog(e);
	                        if (parsed) {
	                            e.args = parsed.values;
	                            e.decode = parsed.decode;
	                            e.event = parsed.name;
	                            e.eventSignature = parsed.signature;
	                        }
	                        return [e];
	                    },
	                    eventTag: '*',
	                    filter: { address: this.address },
	                };
	            }
	            // Normalize the eventName
	            if (eventName.indexOf('(') !== -1) {
	                eventName = abiCoder.formatSignature(abiCoder.parseSignature('event ' + eventName));
	            }
	            var event_1 = this.interface.events[eventName];
	            if (!event_1) {
	                errors$1.throwError('unknown event - ' + eventName, errors$1.INVALID_ARGUMENT, { argumnet: 'eventName', value: eventName });
	            }
	            var filter_1 = {
	                address: this.address,
	                topics: [event_1.topic]
	            };
	            return {
	                prepareEvent: function (e) {
	                    var args = event_1.decode(e.data, e.topics);
	                    e.args = args;
	                    var result = Array.prototype.slice.call(args);
	                    result.push(e);
	                    return result;
	                },
	                event: event_1,
	                eventTag: getEventTag(filter_1),
	                filter: filter_1
	            };
	        }
	        var filter = {
	            address: this.address
	        };
	        // Find the matching event in the ABI; if none, we still allow filtering
	        // since it may be a filter for an otherwise unknown event
	        var event = null;
	        if (eventName.topics && eventName.topics[0]) {
	            filter.topics = eventName.topics;
	            for (var name_1 in this.interface.events) {
	                if (name_1.indexOf('(') === -1) {
	                    continue;
	                }
	                var e = this.interface.events[name_1];
	                if (e.topic === eventName.topics[0].toLowerCase()) {
	                    event = e;
	                    break;
	                }
	            }
	        }
	        return {
	            prepareEvent: function (e) {
	                if (!event) {
	                    return [e];
	                }
	                var args = event.decode(e.data, e.topics);
	                e.args = args;
	                var result = Array.prototype.slice.call(args);
	                result.push(e);
	                return result;
	            },
	            event: event,
	            eventTag: getEventTag(filter),
	            filter: filter
	        };
	    };
	    Contract.prototype._addEventListener = function (eventFilter, listener, once) {
	        var _this = this;
	        if (!this.provider) {
	            errors$1.throwError('events require a provider or a signer with a provider', errors$1.UNSUPPORTED_OPERATION, { operation: 'once' });
	        }
	        var wrappedListener = function (log) {
	            var event = properties.deepCopy(log);
	            var args = eventFilter.prepareEvent(event);
	            if (eventFilter.event) {
	                event.decode = eventFilter.event.decode;
	                event.event = eventFilter.event.name;
	                event.eventSignature = eventFilter.event.signature;
	            }
	            event.removeListener = function () { _this.removeListener(eventFilter.filter, listener); };
	            event.getBlock = function () { return _this.provider.getBlock(log.blockHash); };
	            event.getTransaction = function () { return _this.provider.getTransaction(log.transactionHash); };
	            event.getTransactionReceipt = function () { return _this.provider.getTransactionReceipt(log.transactionHash); };
	            _this.emit.apply(_this, [eventFilter.filter].concat(args));
	        };
	        this.provider.on(eventFilter.filter, wrappedListener);
	        this._events.push({ eventFilter: eventFilter, listener: listener, wrappedListener: wrappedListener, once: once });
	    };
	    Contract.prototype.on = function (event, listener) {
	        this._addEventListener(this._getEventFilter(event), listener, false);
	        return this;
	    };
	    Contract.prototype.once = function (event, listener) {
	        this._addEventListener(this._getEventFilter(event), listener, true);
	        return this;
	    };
	    Contract.prototype.addListener = function (eventName, listener) {
	        return this.on(eventName, listener);
	    };
	    Contract.prototype.emit = function (eventName) {
	        var _this = this;
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        if (!this.provider) {
	            return false;
	        }
	        var result = false;
	        var eventFilter = this._getEventFilter(eventName);
	        this._events = this._events.filter(function (event) {
	            // Not this event (keep it for later)
	            if (event.eventFilter.eventTag !== eventFilter.eventTag) {
	                return true;
	            }
	            // Call the callback in the next event loop
	            setTimeout(function () {
	                event.listener.apply(_this, args);
	            }, 0);
	            result = true;
	            // Reschedule it if it not "once"
	            return !(event.once);
	        });
	        return result;
	    };
	    Contract.prototype.listenerCount = function (eventName) {
	        if (!this.provider) {
	            return 0;
	        }
	        var eventFilter = this._getEventFilter(eventName);
	        return this._events.filter(function (event) {
	            return event.eventFilter.eventTag === eventFilter.eventTag;
	        }).length;
	    };
	    Contract.prototype.listeners = function (eventName) {
	        if (!this.provider) {
	            return [];
	        }
	        var eventFilter = this._getEventFilter(eventName);
	        return this._events.filter(function (event) {
	            return event.eventFilter.eventTag === eventFilter.eventTag;
	        }).map(function (event) { return event.listener; });
	    };
	    Contract.prototype.removeAllListeners = function (eventName) {
	        var _this = this;
	        if (!this.provider) {
	            return this;
	        }
	        var eventFilter = this._getEventFilter(eventName);
	        this._events = this._events.filter(function (event) {
	            // Keep all other events
	            if (event.eventFilter.eventTag !== eventFilter.eventTag) {
	                return true;
	            }
	            // Deregister this event from the provider and filter it out
	            _this.provider.removeListener(event.eventFilter.filter, event.wrappedListener);
	            return false;
	        });
	        return this;
	    };
	    Contract.prototype.removeListener = function (eventName, listener) {
	        var _this = this;
	        if (!this.provider) {
	            return this;
	        }
	        var found = false;
	        var eventFilter = this._getEventFilter(eventName);
	        this._events = this._events.filter(function (event) {
	            // Make sure this event and listener match
	            if (event.eventFilter.eventTag !== eventFilter.eventTag) {
	                return true;
	            }
	            if (event.listener !== listener) {
	                return true;
	            }
	            _this.provider.removeListener(event.eventFilter.filter, event.wrappedListener);
	            // Already found a matching event in a previous loop
	            if (found) {
	                return true;
	            }
	            // REmove this event (returning false filters us out)
	            found = true;
	            return false;
	        });
	        return this;
	    };
	    return Contract;
	}());
	exports.Contract = Contract;
	var ContractFactory = /** @class */ (function () {
	    // ParamType is not actually correct here, but for legacy reasons,
	    // we need it. See #721.
	    function ContractFactory(contractInterface, bytecode, signer) {
	        var bytecodeHex = null;
	        // Allow the bytecode object from the Solidity compiler
	        if (typeof (bytecode) === 'string') {
	            bytecodeHex = bytecode;
	        }
	        else if (bytes.isArrayish(bytecode)) {
	            bytecodeHex = bytes.hexlify(bytecode);
	        }
	        else if (typeof (bytecode.object) === 'string') {
	            bytecodeHex = bytecode.object;
	        }
	        else {
	            errors$1.throwError('bytecode must be a valid hex string', errors$1.INVALID_ARGUMENT, { arg: 'bytecode', value: bytecode });
	        }
	        // Make sure it is 0x prefixed
	        if (bytecodeHex.substring(0, 2) !== '0x') {
	            bytecodeHex = '0x' + bytecodeHex;
	        }
	        if (!bytes.isHexString(bytecodeHex)) {
	            errors$1.throwError('bytecode must be a valid hex string', errors$1.INVALID_ARGUMENT, { arg: 'bytecode', value: bytecode });
	        }
	        if ((bytecodeHex.length % 2) !== 0) {
	            errors$1.throwError('bytecode must be valid data (even length)', errors$1.INVALID_ARGUMENT, { arg: 'bytecode', value: bytecode });
	        }
	        properties.defineReadOnly(this, 'bytecode', bytecodeHex);
	        if (_interface.Interface.isInterface(contractInterface)) {
	            properties.defineReadOnly(this, 'interface', contractInterface);
	        }
	        else {
	            properties.defineReadOnly(this, 'interface', new _interface.Interface(contractInterface));
	        }
	        if (signer && !abstractSigner.Signer.isSigner(signer)) {
	            errors$1.throwError('invalid signer', errors$1.INVALID_ARGUMENT, { arg: 'signer', value: null });
	        }
	        properties.defineReadOnly(this, 'signer', signer || null);
	    }
	    ContractFactory.prototype.getDeployTransaction = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var tx = {};
	        // If we have 1 additional argument, we allow transaction overrides
	        if (args.length === this.interface.deployFunction.inputs.length + 1) {
	            tx = properties.shallowCopy(args.pop());
	            for (var key in tx) {
	                if (!allowedTransactionKeys[key]) {
	                    throw new Error('unknown transaction override ' + key);
	                }
	            }
	        }
	        // Do not allow these to be overridden in a deployment transaction
	        ['data', 'from', 'to'].forEach(function (key) {
	            if (tx[key] == null) {
	                return;
	            }
	            errors$1.throwError('cannot override ' + key, errors$1.UNSUPPORTED_OPERATION, { operation: key });
	        });
	        // Make sure the call matches the constructor signature
	        errors$1.checkArgumentCount(args.length, this.interface.deployFunction.inputs.length, ' in Contract constructor');
	        // Set the data to the bytecode + the encoded constructor arguments
	        tx.data = this.interface.deployFunction.encode(this.bytecode, args);
	        return tx;
	    };
	    ContractFactory.prototype.deploy = function () {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        // Get the deployment transaction (with optional overrides)
	        var tx = this.getDeployTransaction.apply(this, args);
	        // Send the deployment transaction
	        return this.signer.sendTransaction(tx).then(function (tx) {
	            var contract = new Contract(address.getContractAddress(tx), _this.interface, _this.signer);
	            properties.defineReadOnly(contract, 'deployTransaction', tx);
	            return contract;
	        });
	    };
	    ContractFactory.prototype.attach = function (address) {
	        return new Contract(address, this.interface, this.signer);
	    };
	    ContractFactory.prototype.connect = function (signer) {
	        return new ContractFactory(this.interface, this.bytecode, signer);
	    };
	    ContractFactory.fromSolidity = function (compilerOutput, signer) {
	        if (compilerOutput == null) {
	            errors$1.throwError('missing compiler output', errors$1.MISSING_ARGUMENT, { argument: 'compilerOutput' });
	        }
	        if (typeof (compilerOutput) === 'string') {
	            compilerOutput = JSON.parse(compilerOutput);
	        }
	        var abi = compilerOutput.abi;
	        var bytecode = null;
	        if (compilerOutput.bytecode) {
	            bytecode = compilerOutput.bytecode;
	        }
	        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
	            bytecode = compilerOutput.evm.bytecode;
	        }
	        return new ContractFactory(abi, bytecode, signer);
	    };
	    return ContractFactory;
	}());
	exports.ContractFactory = ContractFactory;
	});

	var wordlist = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	function check(wordlist) {
	    var words = [];
	    for (var i = 0; i < 2048; i++) {
	        var word = wordlist.getWord(i);
	        if (i !== wordlist.getWordIndex(word)) {
	            return '0x';
	        }
	        words.push(word);
	    }
	    return hash.id(words.join('\n') + '\n');
	}
	exports.check = check;
	var Wordlist = /** @class */ (function () {
	    function Wordlist(locale) {
	        properties.defineReadOnly(this, 'locale', locale);
	    }
	    // Subclasses may override this
	    Wordlist.prototype.split = function (mnemonic) {
	        return mnemonic.toLowerCase().split(/ +/g);
	    };
	    // Subclasses may override this
	    Wordlist.prototype.join = function (words) {
	        return words.join(' ');
	    };
	    return Wordlist;
	}());
	exports.Wordlist = Wordlist;
	function register(lang, name) {
	    if (!name) {
	        name = lang.locale;
	    }
	}
	exports.register = register;
	});

	var langEn_1 = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
	var wordlist$1 = null;
	function loadWords(lang) {
	    if (wordlist$1 != null) {
	        return;
	    }
	    wordlist$1 = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ');
	    if (wordlist.check(lang) !== '0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60') {
	        wordlist$1 = null;
	        throw new Error('BIP39 Wordlist for en (English) FAILED');
	    }
	}
	var LangEn = /** @class */ (function (_super) {
	    __extends(LangEn, _super);
	    function LangEn() {
	        return _super.call(this, 'en') || this;
	    }
	    LangEn.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist$1[index];
	    };
	    LangEn.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        return wordlist$1.indexOf(word);
	    };
	    return LangEn;
	}(wordlist.Wordlist));
	var langEn = new LangEn();
	exports.langEn = langEn;
	wordlist.register(langEn);
	});

	var basex = createCommonjsModule(function (module, exports) {
	/**
	 * var basex = require('base-x');
	 *
	 * This implementation is heavily based on base-x. The main reason to
	 * deviate was to prevent the dependency of Buffer.
	 *
	 * Contributors:
	 *
	 * base-x encoding
	 * Forked from https://github.com/cryptocoinjs/bs58
	 * Originally written by Mike Hearn for BitcoinJ
	 * Copyright (c) 2011 Google Inc
	 * Ported to JavaScript by Stefan Thomas
	 * Merged Buffer refactorings from base58-native by Stephen Pair
	 * Copyright (c) 2013 BitPay Inc
	 *
	 * The MIT License (MIT)
	 *
	 * Copyright base-x contributors (c) 2016
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a
	 * copy of this software and associated documentation files (the "Software"),
	 * to deal in the Software without restriction, including without limitation
	 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
	 * and/or sell copies of the Software, and to permit persons to whom the
	 * Software is furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.

	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	 * IN THE SOFTWARE.
	 *
	 */
	Object.defineProperty(exports, "__esModule", { value: true });


	var BaseX = /** @class */ (function () {
	    function BaseX(alphabet) {
	        properties.defineReadOnly(this, "alphabet", alphabet);
	        properties.defineReadOnly(this, "base", alphabet.length);
	        properties.defineReadOnly(this, "_alphabetMap", {});
	        properties.defineReadOnly(this, "_leader", alphabet.charAt(0));
	        // pre-compute lookup table
	        for (var i = 0; i < alphabet.length; i++) {
	            this._alphabetMap[alphabet.charAt(i)] = i;
	        }
	    }
	    BaseX.prototype.encode = function (value) {
	        var source = bytes.arrayify(value);
	        if (source.length === 0) {
	            return '';
	        }
	        var digits = [0];
	        for (var i = 0; i < source.length; ++i) {
	            var carry = source[i];
	            for (var j = 0; j < digits.length; ++j) {
	                carry += digits[j] << 8;
	                digits[j] = carry % this.base;
	                carry = (carry / this.base) | 0;
	            }
	            while (carry > 0) {
	                digits.push(carry % this.base);
	                carry = (carry / this.base) | 0;
	            }
	        }
	        var string = '';
	        // deal with leading zeros
	        for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
	            string += this._leader;
	        }
	        // convert digits to a string
	        for (var q = digits.length - 1; q >= 0; --q) {
	            string += this.alphabet[digits[q]];
	        }
	        return string;
	    };
	    BaseX.prototype.decode = function (value) {
	        if (typeof (value) !== 'string') {
	            throw new TypeError('Expected String');
	        }
	        var bytes$1 = [];
	        if (value.length === 0) {
	            return new Uint8Array(bytes$1);
	        }
	        bytes$1.push(0);
	        for (var i = 0; i < value.length; i++) {
	            var byte = this._alphabetMap[value[i]];
	            if (byte === undefined) {
	                throw new Error('Non-base' + this.base + ' character');
	            }
	            var carry = byte;
	            for (var j = 0; j < bytes$1.length; ++j) {
	                carry += bytes$1[j] * this.base;
	                bytes$1[j] = carry & 0xff;
	                carry >>= 8;
	            }
	            while (carry > 0) {
	                bytes$1.push(carry & 0xff);
	                carry >>= 8;
	            }
	        }
	        // deal with leading zeros
	        for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
	            bytes$1.push(0);
	        }
	        return bytes.arrayify(new Uint8Array(bytes$1.reverse()));
	    };
	    return BaseX;
	}());
	exports.BaseX = BaseX;
	var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
	exports.Base32 = Base32;
	var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
	exports.Base58 = Base58;
	//console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
	//console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))
	});

	var require$$0$1 = {};

	var pbkdf2_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	function bufferify(value) {
	    return Buffer.from(bytes.arrayify(value));
	}
	function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
	    return bytes.arrayify(require$$0$1.pbkdf2Sync(bufferify(password), bufferify(salt), iterations, keylen, hashAlgorithm));
	}
	exports.pbkdf2 = pbkdf2;
	});

	var hmac = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var errors$1 = __importStar(errors);
	var SupportedAlgorithms;
	(function (SupportedAlgorithms) {
	    SupportedAlgorithms["sha256"] = "sha256";
	    SupportedAlgorithms["sha512"] = "sha512";
	})(SupportedAlgorithms = exports.SupportedAlgorithms || (exports.SupportedAlgorithms = {}));
	function computeHmac(algorithm, key, data) {
	    if (!SupportedAlgorithms[algorithm]) {
	        errors$1.throwError('unsupported algorithm ' + algorithm, errors$1.UNSUPPORTED_OPERATION, { operation: 'hmac', algorithm: algorithm });
	    }
	    return bytes.arrayify(require$$0$1.createHmac(algorithm, Buffer.from(bytes.arrayify(key))).update(Buffer.from(bytes.arrayify(data))).digest());
	}
	exports.computeHmac = computeHmac;
	});

	var name = "elliptic";
	var version$1 = "6.5.3";
	var description = "EC cryptography";
	var main = "lib/elliptic.js";
	var files = [
		"lib"
	];
	var scripts = {
		jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
		jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
		lint: "npm run jscs && npm run jshint",
		unit: "istanbul test _mocha --reporter=spec test/index.js",
		test: "npm run lint && npm run unit",
		version: "grunt dist && git add dist/"
	};
	var repository = {
		type: "git",
		url: "git@github.com:indutny/elliptic"
	};
	var keywords = [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	];
	var author = "Fedor Indutny <fedor@indutny.com>";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/indutny/elliptic/issues"
	};
	var homepage = "https://github.com/indutny/elliptic";
	var devDependencies = {
		brfs: "^1.4.3",
		coveralls: "^3.0.8",
		grunt: "^1.0.4",
		"grunt-browserify": "^5.0.0",
		"grunt-cli": "^1.2.0",
		"grunt-contrib-connect": "^1.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^1.0.1",
		"grunt-mocha-istanbul": "^3.0.1",
		"grunt-saucelabs": "^9.0.1",
		istanbul: "^0.4.2",
		jscs: "^3.0.7",
		jshint: "^2.10.3",
		mocha: "^6.2.2"
	};
	var dependencies = {
		"bn.js": "^4.4.0",
		brorand: "^1.0.1",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.0",
		inherits: "^2.0.1",
		"minimalistic-assert": "^1.0.0",
		"minimalistic-crypto-utils": "^1.0.0"
	};
	var _package = {
		name: name,
		version: version$1,
		description: description,
		main: main,
		files: files,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		dependencies: dependencies
	};

	var _package$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name,
		version: version$1,
		description: description,
		main: main,
		files: files,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		dependencies: dependencies,
		'default': _package
	});

	var minimalisticAssert = assert;

	function assert(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils_1 = createCommonjsModule(function (module, exports) {

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};
	});

	var utils_1$1 = createCommonjsModule(function (module, exports) {

	var utils = exports;




	utils.assert = minimalisticAssert;
	utils.toArray = utils_1.toArray;
	utils.zero2 = utils_1.zero2;
	utils.toHex = utils_1.toHex;
	utils.encode = utils_1.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  naf.fill(0);

	  var ws = 1 << (w + 1);
	  var k = num.clone();

	  for (var i = 0; i < naf.length; i++) {
	    var z;
	    var mod = k.andln(ws - 1);
	    if (k.isOdd()) {
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }

	    naf[i] = z;
	    k.iushrn(1);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    []
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      var m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      var m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	           this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	                                     bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new bn(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;
	});

	var r;

	var brorand = function rand(len) {
	  if (!r)
	    r = new Rand(null);

	  return r.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	var Rand_1 = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto$1 = require$$0$1;
	    if (typeof crypto$1.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto$1.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}
	brorand.Rand = Rand_1;

	var getNAF = utils_1$1.getNAF;
	var getJSF = utils_1$1.getJSF;
	var assert$1 = utils_1$1.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new bn(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

	  // Useful for many curves
	  this.zero = new bn(0).toRed(this.red);
	  this.one = new bn(1).toRed(this.red);
	  this.two = new bn(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new bn(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$1(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  for (var j = 0; j < naf.length; j += doubles.step) {
	    var nafW = 0;
	    for (var k = j + doubles.step - 1; k >= j; k--)
	      nafW = (nafW << 1) + naf[k];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (var j = 0; j < repr.length; j++) {
	      var nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var k = 0; i >= 0 && naf[i] === 0; i--)
	      k++;
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$1(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	                                                       points,
	                                                       coeffs,
	                                                       len,
	                                                       jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  for (var i = 0; i < len; i++) {
	    var p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (var i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b] /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (var j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (var i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (var j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (var j = 0; j < len; j++) {
	      var z = tmp[j];
	      var p;
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (var i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils_1$1.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$1(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$1(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	                          bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils_1$1.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits_browser = createCommonjsModule(function (module) {
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	});

	var inherits$2 = createCommonjsModule(function (module) {
	try {
	  var util = require$$0;
	  /* istanbul ignore next */
	  if (typeof util.inherits !== 'function') throw '';
	  module.exports = util.inherits;
	} catch (e) {
	  /* istanbul ignore next */
	  module.exports = inherits_browser;
	}
	});

	var assert$2 = utils_1$1.assert;

	function ShortCurve(conf) {
	  base.call(this, 'short', conf);

	  this.a = new bn(conf.a, 16).toRed(this.red);
	  this.b = new bn(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits$2(ShortCurve, base);
	var short_1 = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new bn(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new bn(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new bn(vec.a, 16),
	        b: new bn(vec.b, 16)
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : bn.mont(num);
	  var tinv = new bn(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new bn(1);
	  var y1 = new bn(0);
	  var x2 = new bn(0);
	  var y2 = new bn(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 }
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	  var npoints = this._endoWnafT1;
	  var ncoeffs = this._endoWnafT2;
	  for (var i = 0; i < points.length; i++) {
	    var split = this._endoSplit(coeffs[i]);
	    var p = points[i];
	    var beta = p._getBeta();

	    if (split.k1.negative) {
	      split.k1.ineg();
	      p = p.neg(true);
	    }
	    if (split.k2.negative) {
	      split.k2.ineg();
	      beta = beta.neg(true);
	    }

	    npoints[i * 2] = p;
	    npoints[i * 2 + 1] = beta;
	    ncoeffs[i * 2] = split.k1;
	    ncoeffs[i * 2 + 1] = split.k2;
	  }
	  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	  // Clean-up references to points and coefficients
	  for (var j = 0; j < i * 2; j++) {
	    npoints[j] = null;
	    ncoeffs[j] = null;
	  }
	  return res;
	};

	function Point(curve, x, y, isRed) {
	  base.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits$2(Point, base.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};

	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul)
	      }
	    };
	  }
	  return beta;
	};

	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1)
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1)
	    }
	  } ];
	};

	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point))
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point))
	    }
	  };
	  return res;
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point.prototype.mul = function mul(k) {
	  k = new bn(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate)
	      }
	    };
	  }
	  return res;
	};

	Point.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  base.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new bn(0);
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    this.z = new bn(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits$2(JPoint, base.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (var i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (var i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new bn(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	function MontCurve(conf) {
	  base.call(this, 'mont', conf);

	  this.a = new bn(conf.a, 16).toRed(this.red);
	  this.b = new bn(conf.b, 16).toRed(this.red);
	  this.i4 = new bn(4).toRed(this.red).redInvm();
	  this.two = new bn(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits$2(MontCurve, base);
	var mont = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point$1(curve, x, z) {
	  base.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new bn(x, 16);
	    this.z = new bn(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits$2(Point$1, base.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils_1$1.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point$1(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$1.fromJSON(this, obj);
	};

	Point$1.prototype.precompute = function precompute() {
	  // No-op
	};

	Point$1.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point$1.fromJSON = function fromJSON(curve, obj) {
	  return new Point$1(curve, obj[0], obj[1] || curve.one);
	};

	Point$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point$1.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point$1.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point$1.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point$1.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};

	var assert$3 = utils_1$1.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  base.call(this, 'edwards', conf);

	  this.a = new bn(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new bn(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new bn(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert$3(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits$2(EdwardsCurve, base);
	var edwards = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new bn(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point$2(curve, x, y, z, t) {
	  base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    this.z = z ? new bn(z, 16) : this.curve.one;
	    this.t = t && new bn(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits$2(Point$2, base.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$2.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point$2(this, x, y, z, t);
	};

	Point$2.fromJSON = function fromJSON(curve, obj) {
	  return new Point$2(curve, obj[0], obj[1], obj[2]);
	};

	Point$2.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$2.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point$2.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point$2.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // E = a * C
	    var e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      var h = this.z.redSqr();
	      // J = F - 2 * H
	      var j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    var e = c.redAdd(d);
	    // H = (c * Z1)^2
	    var h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    var j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point$2.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point$2.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point$2.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point$2.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point$2.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$2.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point$2.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point$2.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point$2.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	                          this.y,
	                          this.z,
	                          this.t && this.t.redNeg());
	};

	Point$2.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point$2.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point$2.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point$2.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point$2.prototype.toP = Point$2.prototype.normalize;
	Point$2.prototype.mixedAdd = Point$2.prototype.add;

	var curve_1 = createCommonjsModule(function (module, exports) {

	var curve = exports;

	curve.base = base;
	curve.short = short_1;
	curve.mont = mont;
	curve.edwards = edwards;
	});

	var inherits_1 = inherits$2;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	var toArray_1 = toArray;

	function toHex$1(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	var toHex_1 = toHex$1;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	var htonl_1 = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	var toHex32_1 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	var zero2_1 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	var zero8_1 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  minimalisticAssert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	var join32_1 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	var split32_1 = split32;

	function rotr32(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	var rotr32_1 = rotr32;

	function rotl32(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	var rotl32_1 = rotl32;

	function sum32(a, b) {
	  return (a + b) >>> 0;
	}
	var sum32_1 = sum32;

	function sum32_3(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	var sum32_3_1 = sum32_3;

	function sum32_4(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	var sum32_4_1 = sum32_4;

	function sum32_5(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	var sum32_5_1 = sum32_5;

	function sum64(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	var sum64_1 = sum64;

	function sum64_hi(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	var sum64_hi_1 = sum64_hi;

	function sum64_lo(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	var sum64_lo_1 = sum64_lo;

	function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	var sum64_4_hi_1 = sum64_4_hi;

	function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	var sum64_4_lo_1 = sum64_4_lo;

	function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	var sum64_5_hi_1 = sum64_5_hi;

	function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	var sum64_5_lo_1 = sum64_5_lo;

	function rotr64_hi(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	var rotr64_hi_1 = rotr64_hi;

	function rotr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var rotr64_lo_1 = rotr64_lo;

	function shr64_hi(ah, al, num) {
	  return ah >>> num;
	}
	var shr64_hi_1 = shr64_hi;

	function shr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var shr64_lo_1 = shr64_lo;

	var utils = {
		inherits: inherits_1,
		toArray: toArray_1,
		toHex: toHex_1,
		htonl: htonl_1,
		toHex32: toHex32_1,
		zero2: zero2_1,
		zero8: zero8_1,
		join32: join32_1,
		split32: split32_1,
		rotr32: rotr32_1,
		rotl32: rotl32_1,
		sum32: sum32_1,
		sum32_3: sum32_3_1,
		sum32_4: sum32_4_1,
		sum32_5: sum32_5_1,
		sum64: sum64_1,
		sum64_hi: sum64_hi_1,
		sum64_lo: sum64_lo_1,
		sum64_4_hi: sum64_4_hi_1,
		sum64_4_lo: sum64_4_lo_1,
		sum64_5_hi: sum64_5_hi_1,
		sum64_5_lo: sum64_5_lo_1,
		rotr64_hi: rotr64_hi_1,
		rotr64_lo: rotr64_lo_1,
		shr64_hi: shr64_hi_1,
		shr64_lo: shr64_lo_1
	};

	function BlockHash() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	var BlockHash_1 = BlockHash;

	BlockHash.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  minimalisticAssert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var common = {
		BlockHash: BlockHash_1
	};

	var rotr32$1 = utils.rotr32;

	function ft_1(s, x, y, z) {
	  if (s === 0)
	    return ch32(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32(x, y, z);
	}
	var ft_1_1 = ft_1;

	function ch32(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	var ch32_1 = ch32;

	function maj32(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	var maj32_1 = maj32;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	var p32_1 = p32;

	function s0_256(x) {
	  return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
	}
	var s0_256_1 = s0_256;

	function s1_256(x) {
	  return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
	}
	var s1_256_1 = s1_256;

	function g0_256(x) {
	  return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ (x >>> 3);
	}
	var g0_256_1 = g0_256;

	function g1_256(x) {
	  return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ (x >>> 10);
	}
	var g1_256_1 = g1_256;

	var common$1 = {
		ft_1: ft_1_1,
		ch32: ch32_1,
		maj32: maj32_1,
		p32: p32_1,
		s0_256: s0_256_1,
		s1_256: s1_256_1,
		g0_256: g0_256_1,
		g1_256: g1_256_1
	};

	var rotl32$1 = utils.rotl32;
	var sum32$1 = utils.sum32;
	var sum32_5$1 = utils.sum32_5;
	var ft_1$1 = common$1.ft_1;
	var BlockHash$1 = common.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$1.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils.inherits(SHA1, BlockHash$1);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	var sum32$2 = utils.sum32;
	var sum32_4$1 = utils.sum32_4;
	var sum32_5$2 = utils.sum32_5;
	var ch32$1 = common$1.ch32;
	var maj32$1 = common$1.maj32;
	var s0_256$1 = common$1.s0_256;
	var s1_256$1 = common$1.s1_256;
	var g0_256$1 = common$1.g0_256;
	var g1_256$1 = common$1.g1_256;

	var BlockHash$2 = common.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256() {
	  if (!(this instanceof SHA256))
	    return new SHA256();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils.inherits(SHA256, BlockHash$2);
	var _256 = SHA256;

	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;
	SHA256.padLength = 64;

	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  minimalisticAssert(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$2(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$2(T1, T2);
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	  this.h[5] = sum32$2(this.h[5], f);
	  this.h[6] = sum32$2(this.h[6], g);
	  this.h[7] = sum32$2(this.h[7], h);
	};

	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  _256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils.inherits(SHA224, _256);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils.split32(this.h.slice(0, 7), 'big');
	};

	var rotr64_hi$1 = utils.rotr64_hi;
	var rotr64_lo$1 = utils.rotr64_lo;
	var shr64_hi$1 = utils.shr64_hi;
	var shr64_lo$1 = utils.shr64_lo;
	var sum64$1 = utils.sum64;
	var sum64_hi$1 = utils.sum64_hi;
	var sum64_lo$1 = utils.sum64_lo;
	var sum64_4_hi$1 = utils.sum64_4_hi;
	var sum64_4_lo$1 = utils.sum64_4_lo;
	var sum64_5_hi$1 = utils.sum64_5_hi;
	var sum64_5_lo$1 = utils.sum64_5_lo;

	var BlockHash$3 = common.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512() {
	  if (!(this instanceof SHA512))
	    return new SHA512();

	  BlockHash$3.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils.inherits(SHA512, BlockHash$3);
	var _512 = SHA512;

	SHA512.blockSize = 1024;
	SHA512.outSize = 512;
	SHA512.hmacStrength = 192;
	SHA512.padLength = 128;

	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  minimalisticAssert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo$1(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64$1(this.h, 0, ah, al);
	  sum64$1(this.h, 2, bh, bl);
	  sum64$1(this.h, 4, ch, cl);
	  sum64$1(this.h, 6, dh, dl);
	  sum64$1(this.h, 8, eh, el);
	  sum64$1(this.h, 10, fh, fl);
	  sum64$1(this.h, 12, gh, gl);
	  sum64$1(this.h, 14, hh, hl);
	};

	SHA512.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 28);
	  var c1_hi = rotr64_hi$1(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi$1(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 28);
	  var c1_lo = rotr64_lo$1(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo$1(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 14);
	  var c1_hi = rotr64_hi$1(xh, xl, 18);
	  var c2_hi = rotr64_hi$1(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 14);
	  var c1_lo = rotr64_lo$1(xh, xl, 18);
	  var c2_lo = rotr64_lo$1(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 1);
	  var c1_hi = rotr64_hi$1(xh, xl, 8);
	  var c2_hi = shr64_hi$1(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 1);
	  var c1_lo = rotr64_lo$1(xh, xl, 8);
	  var c2_lo = shr64_lo$1(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 19);
	  var c1_hi = rotr64_hi$1(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi$1(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 19);
	  var c1_lo = rotr64_lo$1(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo$1(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  _512.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils.inherits(SHA384, _512);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils.split32(this.h.slice(0, 12), 'big');
	};

	var sha1 = _1;
	var sha224 = _224;
	var sha256 = _256;
	var sha384 = _384;
	var sha512 = _512;

	var sha = {
		sha1: sha1,
		sha224: sha224,
		sha256: sha256,
		sha384: sha384,
		sha512: sha512
	};

	var rotl32$2 = utils.rotl32;
	var sum32$3 = utils.sum32;
	var sum32_3$1 = utils.sum32_3;
	var sum32_4$2 = utils.sum32_4;
	var BlockHash$4 = common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash$4.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils.inherits(RIPEMD160, BlockHash$4);
	var ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32$3(
	      rotl32$2(
	        sum32_4$2(A, f(j, B, C, D), msg[r$1[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32$2(C, 10);
	    C = B;
	    B = T;
	    T = sum32$3(
	      rotl32$2(
	        sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32$2(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3$1(this.h[1], C, Dh);
	  this.h[1] = sum32_3$1(this.h[2], D, Eh);
	  this.h[2] = sum32_3$1(this.h[3], E, Ah);
	  this.h[3] = sum32_3$1(this.h[4], A, Bh);
	  this.h[4] = sum32_3$1(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'little');
	  else
	    return utils.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r$1 = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var ripemd = {
		ripemd160: ripemd160
	};

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils.toArray(key, enc));
	}
	var hmac$1 = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  minimalisticAssert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	var hash_1 = createCommonjsModule(function (module, exports) {
	var hash = exports;

	hash.utils = utils;
	hash.common = common;
	hash.sha = sha;
	hash.ripemd = ripemd;
	hash.hmac = hmac$1;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	});

	var secp256k1 = {
	  doubles: {
	    step: 4,
	    points: [
	      [
	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
	      ],
	      [
	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
	      ],
	      [
	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
	      ],
	      [
	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
	      ],
	      [
	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
	      ],
	      [
	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
	      ],
	      [
	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
	      ],
	      [
	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
	      ],
	      [
	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
	      ],
	      [
	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
	      ],
	      [
	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
	      ],
	      [
	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
	      ],
	      [
	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
	      ],
	      [
	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
	      ],
	      [
	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
	      ],
	      [
	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
	      ],
	      [
	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
	      ],
	      [
	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
	      ],
	      [
	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
	      ],
	      [
	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
	      ],
	      [
	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
	      ],
	      [
	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
	      ],
	      [
	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
	      ],
	      [
	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
	      ],
	      [
	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
	      ],
	      [
	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
	      ],
	      [
	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
	      ],
	      [
	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
	      ],
	      [
	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
	      ],
	      [
	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
	      ],
	      [
	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
	      ],
	      [
	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
	      ],
	      [
	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
	      ],
	      [
	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
	      ],
	      [
	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
	      ],
	      [
	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
	      ],
	      [
	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
	      ],
	      [
	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
	      ],
	      [
	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
	      ],
	      [
	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
	      ],
	      [
	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
	      ],
	      [
	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
	      ],
	      [
	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
	      ],
	      [
	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
	      ],
	      [
	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
	      ],
	      [
	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
	      ],
	      [
	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
	      ],
	      [
	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
	      ],
	      [
	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
	      ],
	      [
	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
	      ],
	      [
	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
	      ],
	      [
	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
	      ],
	      [
	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
	      ],
	      [
	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
	      ],
	      [
	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
	      ],
	      [
	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
	      ],
	      [
	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
	      ],
	      [
	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
	      ],
	      [
	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
	      ],
	      [
	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
	      ],
	      [
	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
	      ],
	      [
	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
	      ],
	      [
	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
	      ],
	      [
	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
	      ],
	      [
	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
	      ]
	    ]
	  },
	  naf: {
	    wnd: 7,
	    points: [
	      [
	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
	      ],
	      [
	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
	      ],
	      [
	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
	      ],
	      [
	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
	      ],
	      [
	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
	      ],
	      [
	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
	      ],
	      [
	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
	      ],
	      [
	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
	      ],
	      [
	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
	      ],
	      [
	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
	      ],
	      [
	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
	      ],
	      [
	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
	      ],
	      [
	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
	      ],
	      [
	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
	      ],
	      [
	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
	      ],
	      [
	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
	      ],
	      [
	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
	      ],
	      [
	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
	      ],
	      [
	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
	      ],
	      [
	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
	      ],
	      [
	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
	      ],
	      [
	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
	      ],
	      [
	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
	      ],
	      [
	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
	      ],
	      [
	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
	      ],
	      [
	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
	      ],
	      [
	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
	      ],
	      [
	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
	      ],
	      [
	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
	      ],
	      [
	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
	      ],
	      [
	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
	      ],
	      [
	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
	      ],
	      [
	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
	      ],
	      [
	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
	      ],
	      [
	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
	      ],
	      [
	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
	      ],
	      [
	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
	      ],
	      [
	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
	      ],
	      [
	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
	      ],
	      [
	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
	      ],
	      [
	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
	      ],
	      [
	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
	      ],
	      [
	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
	      ],
	      [
	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
	      ],
	      [
	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
	      ],
	      [
	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
	      ],
	      [
	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
	      ],
	      [
	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
	      ],
	      [
	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
	      ],
	      [
	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
	      ],
	      [
	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
	      ],
	      [
	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
	      ],
	      [
	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
	      ],
	      [
	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
	      ],
	      [
	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
	      ],
	      [
	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
	      ],
	      [
	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
	      ],
	      [
	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
	      ],
	      [
	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
	      ],
	      [
	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
	      ],
	      [
	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
	      ],
	      [
	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
	      ],
	      [
	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
	      ],
	      [
	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
	      ],
	      [
	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
	      ],
	      [
	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
	      ],
	      [
	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
	      ],
	      [
	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
	      ],
	      [
	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
	      ],
	      [
	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
	      ],
	      [
	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
	      ],
	      [
	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
	      ],
	      [
	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
	      ],
	      [
	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
	      ],
	      [
	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
	      ],
	      [
	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
	      ],
	      [
	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
	      ],
	      [
	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
	      ],
	      [
	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
	      ],
	      [
	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
	      ],
	      [
	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
	      ],
	      [
	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
	      ],
	      [
	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
	      ],
	      [
	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
	      ],
	      [
	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
	      ],
	      [
	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
	      ],
	      [
	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
	      ],
	      [
	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
	      ],
	      [
	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
	      ],
	      [
	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
	      ],
	      [
	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
	      ],
	      [
	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
	      ],
	      [
	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
	      ],
	      [
	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
	      ],
	      [
	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
	      ],
	      [
	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
	      ],
	      [
	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
	      ],
	      [
	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
	      ],
	      [
	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
	      ],
	      [
	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
	      ],
	      [
	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
	      ],
	      [
	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
	      ],
	      [
	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
	      ],
	      [
	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
	      ],
	      [
	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
	      ],
	      [
	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
	      ],
	      [
	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
	      ],
	      [
	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
	      ],
	      [
	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
	      ],
	      [
	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
	      ],
	      [
	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
	      ],
	      [
	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
	      ],
	      [
	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
	      ],
	      [
	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
	      ],
	      [
	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
	      ],
	      [
	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
	      ],
	      [
	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
	      ],
	      [
	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
	      ],
	      [
	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
	      ],
	      [
	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
	      ],
	      [
	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
	      ],
	      [
	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
	      ],
	      [
	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
	      ],
	      [
	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
	      ],
	      [
	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
	      ],
	      [
	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
	      ],
	      [
	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
	      ]
	    ]
	  }
	};

	var curves_1 = createCommonjsModule(function (module, exports) {

	var curves = exports;





	var assert = utils_1$1.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve_1.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve_1.edwards(options);
	  else
	    this.curve = new curve_1.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve
	      });
	      return curve;
	    }
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
	  ]
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
	  ]
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
	  ]
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash_1.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
	  ]
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash_1.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
	  ]
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '9'
	  ]
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658'
	  ]
	});

	var pre;
	try {
	  pre = secp256k1;
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash_1.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3'
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15'
	    }
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre
	  ]
	});
	});

	var inherits_1$1 = inherits$2;

	function isSurrogatePair$1(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray$1(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair$1(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	var toArray_1$1 = toArray$1;

	function toHex$2(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2$1(msg[i].toString(16));
	  return res;
	}
	var toHex_1$1 = toHex$2;

	function htonl$1(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	var htonl_1$1 = htonl$1;

	function toHex32$1(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl$1(w);
	    res += zero8$1(w.toString(16));
	  }
	  return res;
	}
	var toHex32_1$1 = toHex32$1;

	function zero2$1(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	var zero2_1$1 = zero2$1;

	function zero8$1(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	var zero8_1$1 = zero8$1;

	function join32$1(msg, start, end, endian) {
	  var len = end - start;
	  minimalisticAssert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	var join32_1$1 = join32$1;

	function split32$1(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	var split32_1$1 = split32$1;

	function rotr32$2(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	var rotr32_1$1 = rotr32$2;

	function rotl32$3(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	var rotl32_1$1 = rotl32$3;

	function sum32$4(a, b) {
	  return (a + b) >>> 0;
	}
	var sum32_1$1 = sum32$4;

	function sum32_3$2(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	var sum32_3_1$1 = sum32_3$2;

	function sum32_4$3(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	var sum32_4_1$1 = sum32_4$3;

	function sum32_5$3(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	var sum32_5_1$1 = sum32_5$3;

	function sum64$2(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	var sum64_1$1 = sum64$2;

	function sum64_hi$2(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	var sum64_hi_1$1 = sum64_hi$2;

	function sum64_lo$2(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	var sum64_lo_1$1 = sum64_lo$2;

	function sum64_4_hi$2(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	var sum64_4_hi_1$1 = sum64_4_hi$2;

	function sum64_4_lo$2(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	var sum64_4_lo_1$1 = sum64_4_lo$2;

	function sum64_5_hi$2(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	var sum64_5_hi_1$1 = sum64_5_hi$2;

	function sum64_5_lo$2(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	var sum64_5_lo_1$1 = sum64_5_lo$2;

	function rotr64_hi$2(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	var rotr64_hi_1$1 = rotr64_hi$2;

	function rotr64_lo$2(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var rotr64_lo_1$1 = rotr64_lo$2;

	function shr64_hi$2(ah, al, num) {
	  return ah >>> num;
	}
	var shr64_hi_1$1 = shr64_hi$2;

	function shr64_lo$2(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var shr64_lo_1$1 = shr64_lo$2;

	var utils$1 = {
		inherits: inherits_1$1,
		toArray: toArray_1$1,
		toHex: toHex_1$1,
		htonl: htonl_1$1,
		toHex32: toHex32_1$1,
		zero2: zero2_1$1,
		zero8: zero8_1$1,
		join32: join32_1$1,
		split32: split32_1$1,
		rotr32: rotr32_1$1,
		rotl32: rotl32_1$1,
		sum32: sum32_1$1,
		sum32_3: sum32_3_1$1,
		sum32_4: sum32_4_1$1,
		sum32_5: sum32_5_1$1,
		sum64: sum64_1$1,
		sum64_hi: sum64_hi_1$1,
		sum64_lo: sum64_lo_1$1,
		sum64_4_hi: sum64_4_hi_1$1,
		sum64_4_lo: sum64_4_lo_1$1,
		sum64_5_hi: sum64_5_hi_1$1,
		sum64_5_lo: sum64_5_lo_1$1,
		rotr64_hi: rotr64_hi_1$1,
		rotr64_lo: rotr64_lo_1$1,
		shr64_hi: shr64_hi_1$1,
		shr64_lo: shr64_lo_1$1
	};

	function BlockHash$5() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	var BlockHash_1$1 = BlockHash$5;

	BlockHash$5.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils$1.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils$1.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash$5.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  minimalisticAssert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash$5.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var common$2 = {
		BlockHash: BlockHash_1$1
	};

	var rotr32$3 = utils$1.rotr32;

	function ft_1$2(s, x, y, z) {
	  if (s === 0)
	    return ch32$2(x, y, z);
	  if (s === 1 || s === 3)
	    return p32$1(x, y, z);
	  if (s === 2)
	    return maj32$2(x, y, z);
	}
	var ft_1_1$1 = ft_1$2;

	function ch32$2(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	var ch32_1$1 = ch32$2;

	function maj32$2(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	var maj32_1$1 = maj32$2;

	function p32$1(x, y, z) {
	  return x ^ y ^ z;
	}
	var p32_1$1 = p32$1;

	function s0_256$2(x) {
	  return rotr32$3(x, 2) ^ rotr32$3(x, 13) ^ rotr32$3(x, 22);
	}
	var s0_256_1$1 = s0_256$2;

	function s1_256$2(x) {
	  return rotr32$3(x, 6) ^ rotr32$3(x, 11) ^ rotr32$3(x, 25);
	}
	var s1_256_1$1 = s1_256$2;

	function g0_256$2(x) {
	  return rotr32$3(x, 7) ^ rotr32$3(x, 18) ^ (x >>> 3);
	}
	var g0_256_1$1 = g0_256$2;

	function g1_256$2(x) {
	  return rotr32$3(x, 17) ^ rotr32$3(x, 19) ^ (x >>> 10);
	}
	var g1_256_1$1 = g1_256$2;

	var common$3 = {
		ft_1: ft_1_1$1,
		ch32: ch32_1$1,
		maj32: maj32_1$1,
		p32: p32_1$1,
		s0_256: s0_256_1$1,
		s1_256: s1_256_1$1,
		g0_256: g0_256_1$1,
		g1_256: g1_256_1$1
	};

	var rotl32$4 = utils$1.rotl32;
	var sum32$5 = utils$1.sum32;
	var sum32_5$4 = utils$1.sum32_5;
	var ft_1$3 = common$3.ft_1;
	var BlockHash$6 = common$2.BlockHash;

	var sha1_K$1 = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1$1() {
	  if (!(this instanceof SHA1$1))
	    return new SHA1$1();

	  BlockHash$6.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils$1.inherits(SHA1$1, BlockHash$6);
	var _1$1 = SHA1$1;

	SHA1$1.blockSize = 512;
	SHA1$1.outSize = 160;
	SHA1$1.hmacStrength = 80;
	SHA1$1.padLength = 64;

	SHA1$1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$4(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$4(rotl32$4(a, 5), ft_1$3(s, b, c, d), e, W[i], sha1_K$1[s]);
	    e = d;
	    d = c;
	    c = rotl32$4(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$5(this.h[0], a);
	  this.h[1] = sum32$5(this.h[1], b);
	  this.h[2] = sum32$5(this.h[2], c);
	  this.h[3] = sum32$5(this.h[3], d);
	  this.h[4] = sum32$5(this.h[4], e);
	};

	SHA1$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$1.toHex32(this.h, 'big');
	  else
	    return utils$1.split32(this.h, 'big');
	};

	var sum32$6 = utils$1.sum32;
	var sum32_4$4 = utils$1.sum32_4;
	var sum32_5$5 = utils$1.sum32_5;
	var ch32$3 = common$3.ch32;
	var maj32$3 = common$3.maj32;
	var s0_256$3 = common$3.s0_256;
	var s1_256$3 = common$3.s1_256;
	var g0_256$3 = common$3.g0_256;
	var g1_256$3 = common$3.g1_256;

	var BlockHash$7 = common$2.BlockHash;

	var sha256_K$1 = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256$1() {
	  if (!(this instanceof SHA256$1))
	    return new SHA256$1();

	  BlockHash$7.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K$1;
	  this.W = new Array(64);
	}
	utils$1.inherits(SHA256$1, BlockHash$7);
	var _256$1 = SHA256$1;

	SHA256$1.blockSize = 512;
	SHA256$1.outSize = 256;
	SHA256$1.hmacStrength = 192;
	SHA256$1.padLength = 64;

	SHA256$1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$4(g1_256$3(W[i - 2]), W[i - 7], g0_256$3(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  minimalisticAssert(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5$5(h, s1_256$3(e), ch32$3(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$6(s0_256$3(a), maj32$3(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$6(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$6(T1, T2);
	  }

	  this.h[0] = sum32$6(this.h[0], a);
	  this.h[1] = sum32$6(this.h[1], b);
	  this.h[2] = sum32$6(this.h[2], c);
	  this.h[3] = sum32$6(this.h[3], d);
	  this.h[4] = sum32$6(this.h[4], e);
	  this.h[5] = sum32$6(this.h[5], f);
	  this.h[6] = sum32$6(this.h[6], g);
	  this.h[7] = sum32$6(this.h[7], h);
	};

	SHA256$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$1.toHex32(this.h, 'big');
	  else
	    return utils$1.split32(this.h, 'big');
	};

	function SHA224$1() {
	  if (!(this instanceof SHA224$1))
	    return new SHA224$1();

	  _256$1.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils$1.inherits(SHA224$1, _256$1);
	var _224$1 = SHA224$1;

	SHA224$1.blockSize = 512;
	SHA224$1.outSize = 224;
	SHA224$1.hmacStrength = 192;
	SHA224$1.padLength = 64;

	SHA224$1.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils$1.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils$1.split32(this.h.slice(0, 7), 'big');
	};

	var rotr64_hi$3 = utils$1.rotr64_hi;
	var rotr64_lo$3 = utils$1.rotr64_lo;
	var shr64_hi$3 = utils$1.shr64_hi;
	var shr64_lo$3 = utils$1.shr64_lo;
	var sum64$3 = utils$1.sum64;
	var sum64_hi$3 = utils$1.sum64_hi;
	var sum64_lo$3 = utils$1.sum64_lo;
	var sum64_4_hi$3 = utils$1.sum64_4_hi;
	var sum64_4_lo$3 = utils$1.sum64_4_lo;
	var sum64_5_hi$3 = utils$1.sum64_5_hi;
	var sum64_5_lo$3 = utils$1.sum64_5_lo;

	var BlockHash$8 = common$2.BlockHash;

	var sha512_K$1 = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512$1() {
	  if (!(this instanceof SHA512$1))
	    return new SHA512$1();

	  BlockHash$8.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K$1;
	  this.W = new Array(160);
	}
	utils$1.inherits(SHA512$1, BlockHash$8);
	var _512$1 = SHA512$1;

	SHA512$1.blockSize = 1024;
	SHA512$1.outSize = 512;
	SHA512$1.hmacStrength = 192;
	SHA512$1.padLength = 128;

	SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi$1(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo$1(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi$1(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo$1(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi$3(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo$3(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512$1.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  minimalisticAssert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi$1(eh, el);
	    var c1_lo = s1_512_lo$1(eh, el);
	    var c2_hi = ch64_hi$1(eh, el, fh, fl, gh);
	    var c2_lo = ch64_lo$1(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi$3(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo$3(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi$1(ah, al);
	    c0_lo = s0_512_lo$1(ah, al);
	    c1_hi = maj64_hi$1(ah, al, bh, bl, ch);
	    c1_lo = maj64_lo$1(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi$3(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo$3(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi$3(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo$3(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi$3(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo$3(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64$3(this.h, 0, ah, al);
	  sum64$3(this.h, 2, bh, bl);
	  sum64$3(this.h, 4, ch, cl);
	  sum64$3(this.h, 6, dh, dl);
	  sum64$3(this.h, 8, eh, el);
	  sum64$3(this.h, 10, fh, fl);
	  sum64$3(this.h, 12, gh, gl);
	  sum64$3(this.h, 14, hh, hl);
	};

	SHA512$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$1.toHex32(this.h, 'big');
	  else
	    return utils$1.split32(this.h, 'big');
	};

	function ch64_hi$1(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo$1(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi$1(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo$1(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi$1(xh, xl) {
	  var c0_hi = rotr64_hi$3(xh, xl, 28);
	  var c1_hi = rotr64_hi$3(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi$3(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo$1(xh, xl) {
	  var c0_lo = rotr64_lo$3(xh, xl, 28);
	  var c1_lo = rotr64_lo$3(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo$3(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi$1(xh, xl) {
	  var c0_hi = rotr64_hi$3(xh, xl, 14);
	  var c1_hi = rotr64_hi$3(xh, xl, 18);
	  var c2_hi = rotr64_hi$3(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo$1(xh, xl) {
	  var c0_lo = rotr64_lo$3(xh, xl, 14);
	  var c1_lo = rotr64_lo$3(xh, xl, 18);
	  var c2_lo = rotr64_lo$3(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi$1(xh, xl) {
	  var c0_hi = rotr64_hi$3(xh, xl, 1);
	  var c1_hi = rotr64_hi$3(xh, xl, 8);
	  var c2_hi = shr64_hi$3(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo$1(xh, xl) {
	  var c0_lo = rotr64_lo$3(xh, xl, 1);
	  var c1_lo = rotr64_lo$3(xh, xl, 8);
	  var c2_lo = shr64_lo$3(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi$1(xh, xl) {
	  var c0_hi = rotr64_hi$3(xh, xl, 19);
	  var c1_hi = rotr64_hi$3(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi$3(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo$1(xh, xl) {
	  var c0_lo = rotr64_lo$3(xh, xl, 19);
	  var c1_lo = rotr64_lo$3(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo$3(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function SHA384$1() {
	  if (!(this instanceof SHA384$1))
	    return new SHA384$1();

	  _512$1.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils$1.inherits(SHA384$1, _512$1);
	var _384$1 = SHA384$1;

	SHA384$1.blockSize = 1024;
	SHA384$1.outSize = 384;
	SHA384$1.hmacStrength = 192;
	SHA384$1.padLength = 128;

	SHA384$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$1.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils$1.split32(this.h.slice(0, 12), 'big');
	};

	var sha1$1 = _1$1;
	var sha224$1 = _224$1;
	var sha256$1 = _256$1;
	var sha384$1 = _384$1;
	var sha512$1 = _512$1;

	var sha$1 = {
		sha1: sha1$1,
		sha224: sha224$1,
		sha256: sha256$1,
		sha384: sha384$1,
		sha512: sha512$1
	};

	var rotl32$5 = utils$1.rotl32;
	var sum32$7 = utils$1.sum32;
	var sum32_3$3 = utils$1.sum32_3;
	var sum32_4$5 = utils$1.sum32_4;
	var BlockHash$9 = common$2.BlockHash;

	function RIPEMD160$1() {
	  if (!(this instanceof RIPEMD160$1))
	    return new RIPEMD160$1();

	  BlockHash$9.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils$1.inherits(RIPEMD160$1, BlockHash$9);
	var ripemd160$1 = RIPEMD160$1;

	RIPEMD160$1.blockSize = 512;
	RIPEMD160$1.outSize = 160;
	RIPEMD160$1.hmacStrength = 192;
	RIPEMD160$1.padLength = 64;

	RIPEMD160$1.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32$7(
	      rotl32$5(
	        sum32_4$5(A, f$1(j, B, C, D), msg[r$2[j] + start], K$1(j)),
	        s$1[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32$5(C, 10);
	    C = B;
	    B = T;
	    T = sum32$7(
	      rotl32$5(
	        sum32_4$5(Ah, f$1(79 - j, Bh, Ch, Dh), msg[rh$1[j] + start], Kh$1(j)),
	        sh$1[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32$5(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3$3(this.h[1], C, Dh);
	  this.h[1] = sum32_3$3(this.h[2], D, Eh);
	  this.h[2] = sum32_3$3(this.h[3], E, Ah);
	  this.h[3] = sum32_3$3(this.h[4], A, Bh);
	  this.h[4] = sum32_3$3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$1.toHex32(this.h, 'little');
	  else
	    return utils$1.split32(this.h, 'little');
	};

	function f$1(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K$1(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh$1(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r$2 = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh$1 = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s$1 = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh$1 = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var ripemd$1 = {
		ripemd160: ripemd160$1
	};

	function Hmac$1(hash, key, enc) {
	  if (!(this instanceof Hmac$1))
	    return new Hmac$1(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils$1.toArray(key, enc));
	}
	var hmac$2 = Hmac$1;

	Hmac$1.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  minimalisticAssert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac$1.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac$1.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	var hash_1$1 = createCommonjsModule(function (module, exports) {
	var hash = exports;

	hash.utils = utils$1;
	hash.common = common$2;
	hash.sha = sha$1;
	hash.ripemd = ripemd$1;
	hash.hmac = hmac$2;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	});

	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
	    return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG;

	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash_1$1.hmac(this.hash, this.K);
	};

	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils_1.toArray(entropy, entropyEnc);
	  add = utils_1.toArray(add, addEnc);

	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils_1.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils_1.encode(res, enc);
	};

	var assert$4 = utils_1$1.assert;

	function KeyPair(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key = KeyPair;

	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair)
	    return pub;

	  return new KeyPair(ec, {
	    pub: pub,
	    pubEnc: enc
	  });
	};

	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair)
	    return priv;

	  return new KeyPair(ec, {
	    priv: priv,
	    privEnc: enc
	  });
	};

	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new bn(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$4(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$4(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	var assert$5 = utils_1$1.assert;

	function Signature(options, enc) {
	  if (options instanceof Signature)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$5(options.r && options.s, 'Signature without r or s');
	  this.r = new bn(options.r, 16);
	  this.s = new bn(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature = Signature;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils_1$1.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new bn(r);
	  this.s = new bn(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils_1$1.encode(res, enc);
	};

	var assert$6 = utils_1$1.assert;




	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$6(curves_1.hasOwnProperty(options), 'Unknown curve ' + options);

	    options = curves_1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves_1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec = EC;

	EC.prototype.keyPair = function keyPair(options) {
	  return new key(this, options);
	};

	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return key.fromPrivate(this, priv, enc);
	};

	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return key.fromPublic(this, pub, enc);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || brorand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray()
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new bn(2));
	  do {
	    var priv = new bn(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  } while (true);
	};

	EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new bn(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8'
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new bn(1));

	  for (var iter = 0; true; iter++) {
	    var k = options.k ?
	        options.k(iter) :
	        new bn(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new signature({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC.prototype.verify = function verify(msg, signature$1, key, enc) {
	  msg = this._truncateToN(new bn(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature$1 = new signature(signature$1, 'hex');

	  // Perform primitive values validation
	  var r = signature$1.r;
	  var s = signature$1.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);

	  if (!this.curve._maxwellTrick) {
	    var p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
	  assert$6((3 & j) === j, 'The recovery param is more than two bits');
	  signature$1 = new signature(signature$1, enc);

	  var n = this.n;
	  var e = new bn(msg);
	  var r = signature$1.r;
	  var s = signature$1.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature$1.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
	  signature$1 = new signature(signature$1, enc);
	  if (signature$1.recoveryParam !== null)
	    return signature$1.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature$1, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var assert$7 = utils_1$1.assert;
	var parseBytes = utils_1$1.parseBytes;
	var cachedProperty = utils_1$1.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair$1(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes(params.pub);
	}

	KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair$1)
	    return pub;
	  return new KeyPair$1(eddsa, { pub: pub });
	};

	KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair$1)
	    return secret;
	  return new KeyPair$1(eddsa, { secret: secret });
	};

	KeyPair$1.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty(KeyPair$1, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty(KeyPair$1, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty(KeyPair$1, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty(KeyPair$1, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty(KeyPair$1, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty(KeyPair$1, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair$1.prototype.sign = function sign(message) {
	  assert$7(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair$1.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair$1.prototype.getSecret = function getSecret(enc) {
	  assert$7(this._secret, 'KeyPair is public only');
	  return utils_1$1.encode(this.secret(), enc);
	};

	KeyPair$1.prototype.getPublic = function getPublic(enc) {
	  return utils_1$1.encode(this.pubBytes(), enc);
	};

	var key$1 = KeyPair$1;

	var assert$8 = utils_1$1.assert;
	var cachedProperty$1 = utils_1$1.cachedProperty;
	var parseBytes$1 = utils_1$1.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature$1(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes$1(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength)
	    };
	  }

	  assert$8(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof bn)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty$1(Signature$1, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty$1(Signature$1, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty$1(Signature$1, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty$1(Signature$1, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature$1.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature$1.prototype.toHex = function toHex() {
	  return utils_1$1.encode(this.toBytes(), 'hex').toUpperCase();
	};

	var signature$1 = Signature$1;

	var assert$9 = utils_1$1.assert;
	var parseBytes$2 = utils_1$1.parseBytes;



	function EDDSA(curve) {
	  assert$9(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  var curve = curves_1[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash_1.sha512;
	}

	var eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes$2(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	               .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes$2(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils_1$1.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return key$1.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return key$1.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof signature$1)
	    return sig;
	  return new signature$1(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils_1$1.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils_1$1.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils_1$1.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};

	var require$$0$2 = getCjsExportFromNamespace(_package$1);

	var elliptic_1 = createCommonjsModule(function (module, exports) {

	var elliptic = exports;

	elliptic.version = require$$0$2.version;
	elliptic.utils = utils_1$1;
	elliptic.rand = brorand;
	elliptic.curve = curve_1;
	elliptic.curves = curves_1;

	// Protocols
	elliptic.ec = ec;
	elliptic.eddsa = eddsa;
	});

	var secp256k1$1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });






	var errors$1 = __importStar(errors);
	///////////////////////////////
	var _curve = null;
	function getCurve() {
	    if (!_curve) {
	        _curve = new elliptic_1.ec('secp256k1');
	    }
	    return _curve;
	}
	var KeyPair = /** @class */ (function () {
	    function KeyPair(privateKey) {
	        var keyPair = getCurve().keyFromPrivate(bytes.arrayify(privateKey));
	        properties.defineReadOnly(this, 'privateKey', bytes.hexlify(keyPair.priv.toArray('be', 32)));
	        properties.defineReadOnly(this, 'publicKey', '0x' + keyPair.getPublic(false, 'hex'));
	        properties.defineReadOnly(this, 'compressedPublicKey', '0x' + keyPair.getPublic(true, 'hex'));
	        properties.defineReadOnly(this, 'publicKeyBytes', keyPair.getPublic().encode(null, true));
	    }
	    KeyPair.prototype.sign = function (digest) {
	        var keyPair = getCurve().keyFromPrivate(bytes.arrayify(this.privateKey));
	        var signature = keyPair.sign(bytes.arrayify(digest), { canonical: true });
	        return {
	            recoveryParam: signature.recoveryParam,
	            r: bytes.hexZeroPad('0x' + signature.r.toString(16), 32),
	            s: bytes.hexZeroPad('0x' + signature.s.toString(16), 32),
	            v: 27 + signature.recoveryParam
	        };
	    };
	    KeyPair.prototype.computeSharedSecret = function (otherKey) {
	        var keyPair = getCurve().keyFromPrivate(bytes.arrayify(this.privateKey));
	        var otherKeyPair = getCurve().keyFromPublic(bytes.arrayify(computePublicKey(otherKey)));
	        return bytes.hexZeroPad('0x' + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
	    };
	    KeyPair.prototype._addPoint = function (other) {
	        var p0 = getCurve().keyFromPublic(bytes.arrayify(this.publicKey));
	        var p1 = getCurve().keyFromPublic(bytes.arrayify(other));
	        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
	    };
	    return KeyPair;
	}());
	exports.KeyPair = KeyPair;
	function computePublicKey(key, compressed) {
	    var bytes$1 = bytes.arrayify(key);
	    if (bytes$1.length === 32) {
	        var keyPair = new KeyPair(bytes$1);
	        if (compressed) {
	            return keyPair.compressedPublicKey;
	        }
	        return keyPair.publicKey;
	    }
	    else if (bytes$1.length === 33) {
	        if (compressed) {
	            return bytes.hexlify(bytes$1);
	        }
	        return '0x' + getCurve().keyFromPublic(bytes$1).getPublic(false, 'hex');
	    }
	    else if (bytes$1.length === 65) {
	        if (!compressed) {
	            return bytes.hexlify(bytes$1);
	        }
	        return '0x' + getCurve().keyFromPublic(bytes$1).getPublic(true, 'hex');
	    }
	    errors$1.throwError('invalid public or private key', errors$1.INVALID_ARGUMENT, { arg: 'key', value: '[REDACTED]' });
	    return null;
	}
	exports.computePublicKey = computePublicKey;
	function computeAddress(key) {
	    // Strip off the leading "0x04"
	    var publicKey = '0x' + computePublicKey(key).slice(4);
	    return address.getAddress('0x' + keccak256_1.keccak256(publicKey).substring(26));
	}
	exports.computeAddress = computeAddress;
	function recoverPublicKey(digest, signature) {
	    var sig = bytes.splitSignature(signature);
	    var rs = { r: bytes.arrayify(sig.r), s: bytes.arrayify(sig.s) };
	    return '0x' + getCurve().recoverPubKey(bytes.arrayify(digest), rs, sig.recoveryParam).encode('hex', false);
	}
	exports.recoverPublicKey = recoverPublicKey;
	function recoverAddress(digest, signature) {
	    return computeAddress(recoverPublicKey(bytes.arrayify(digest), signature));
	}
	exports.recoverAddress = recoverAddress;
	function verifyMessage(message, signature) {
	    return recoverAddress(hash.hashMessage(message), signature);
	}
	exports.verifyMessage = verifyMessage;
	});

	var inherits_1$2 = inherits$2;

	function toArray$2(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        var hi = c >> 8;
	        var lo = c & 0xff;
	        if (hi)
	          res.push(hi, lo);
	        else
	          res.push(lo);
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	var toArray_1$2 = toArray$2;

	function toHex$3(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2$2(msg[i].toString(16));
	  return res;
	}
	var toHex_1$2 = toHex$3;

	function htonl$2(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	var htonl_1$2 = htonl$2;

	function toHex32$2(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl$2(w);
	    res += zero8$2(w.toString(16));
	  }
	  return res;
	}
	var toHex32_1$2 = toHex32$2;

	function zero2$2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	var zero2_1$2 = zero2$2;

	function zero8$2(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	var zero8_1$2 = zero8$2;

	function join32$2(msg, start, end, endian) {
	  var len = end - start;
	  minimalisticAssert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	var join32_1$2 = join32$2;

	function split32$2(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	var split32_1$2 = split32$2;

	function rotr32$4(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	var rotr32_1$2 = rotr32$4;

	function rotl32$6(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	var rotl32_1$2 = rotl32$6;

	function sum32$8(a, b) {
	  return (a + b) >>> 0;
	}
	var sum32_1$2 = sum32$8;

	function sum32_3$4(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	var sum32_3_1$2 = sum32_3$4;

	function sum32_4$6(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	var sum32_4_1$2 = sum32_4$6;

	function sum32_5$6(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	var sum32_5_1$2 = sum32_5$6;

	function sum64$4(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	var sum64_1$2 = sum64$4;

	function sum64_hi$4(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	var sum64_hi_1$2 = sum64_hi$4;

	function sum64_lo$4(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	var sum64_lo_1$2 = sum64_lo$4;

	function sum64_4_hi$4(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	var sum64_4_hi_1$2 = sum64_4_hi$4;

	function sum64_4_lo$4(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	var sum64_4_lo_1$2 = sum64_4_lo$4;

	function sum64_5_hi$4(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	var sum64_5_hi_1$2 = sum64_5_hi$4;

	function sum64_5_lo$4(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	var sum64_5_lo_1$2 = sum64_5_lo$4;

	function rotr64_hi$4(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	var rotr64_hi_1$2 = rotr64_hi$4;

	function rotr64_lo$4(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var rotr64_lo_1$2 = rotr64_lo$4;

	function shr64_hi$4(ah, al, num) {
	  return ah >>> num;
	}
	var shr64_hi_1$2 = shr64_hi$4;

	function shr64_lo$4(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var shr64_lo_1$2 = shr64_lo$4;

	var utils$2 = {
		inherits: inherits_1$2,
		toArray: toArray_1$2,
		toHex: toHex_1$2,
		htonl: htonl_1$2,
		toHex32: toHex32_1$2,
		zero2: zero2_1$2,
		zero8: zero8_1$2,
		join32: join32_1$2,
		split32: split32_1$2,
		rotr32: rotr32_1$2,
		rotl32: rotl32_1$2,
		sum32: sum32_1$2,
		sum32_3: sum32_3_1$2,
		sum32_4: sum32_4_1$2,
		sum32_5: sum32_5_1$2,
		sum64: sum64_1$2,
		sum64_hi: sum64_hi_1$2,
		sum64_lo: sum64_lo_1$2,
		sum64_4_hi: sum64_4_hi_1$2,
		sum64_4_lo: sum64_4_lo_1$2,
		sum64_5_hi: sum64_5_hi_1$2,
		sum64_5_lo: sum64_5_lo_1$2,
		rotr64_hi: rotr64_hi_1$2,
		rotr64_lo: rotr64_lo_1$2,
		shr64_hi: shr64_hi_1$2,
		shr64_lo: shr64_lo_1$2
	};

	function BlockHash$a() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	var BlockHash_1$2 = BlockHash$a;

	BlockHash$a.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils$2.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils$2.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash$a.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  minimalisticAssert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash$a.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var common$4 = {
		BlockHash: BlockHash_1$2
	};

	var rotr32$5 = utils$2.rotr32;

	function ft_1$4(s, x, y, z) {
	  if (s === 0)
	    return ch32$4(x, y, z);
	  if (s === 1 || s === 3)
	    return p32$2(x, y, z);
	  if (s === 2)
	    return maj32$4(x, y, z);
	}
	var ft_1_1$2 = ft_1$4;

	function ch32$4(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	var ch32_1$2 = ch32$4;

	function maj32$4(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	var maj32_1$2 = maj32$4;

	function p32$2(x, y, z) {
	  return x ^ y ^ z;
	}
	var p32_1$2 = p32$2;

	function s0_256$4(x) {
	  return rotr32$5(x, 2) ^ rotr32$5(x, 13) ^ rotr32$5(x, 22);
	}
	var s0_256_1$2 = s0_256$4;

	function s1_256$4(x) {
	  return rotr32$5(x, 6) ^ rotr32$5(x, 11) ^ rotr32$5(x, 25);
	}
	var s1_256_1$2 = s1_256$4;

	function g0_256$4(x) {
	  return rotr32$5(x, 7) ^ rotr32$5(x, 18) ^ (x >>> 3);
	}
	var g0_256_1$2 = g0_256$4;

	function g1_256$4(x) {
	  return rotr32$5(x, 17) ^ rotr32$5(x, 19) ^ (x >>> 10);
	}
	var g1_256_1$2 = g1_256$4;

	var common$5 = {
		ft_1: ft_1_1$2,
		ch32: ch32_1$2,
		maj32: maj32_1$2,
		p32: p32_1$2,
		s0_256: s0_256_1$2,
		s1_256: s1_256_1$2,
		g0_256: g0_256_1$2,
		g1_256: g1_256_1$2
	};

	var rotl32$7 = utils$2.rotl32;
	var sum32$9 = utils$2.sum32;
	var sum32_5$7 = utils$2.sum32_5;
	var ft_1$5 = common$5.ft_1;
	var BlockHash$b = common$4.BlockHash;

	var sha1_K$2 = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1$2() {
	  if (!(this instanceof SHA1$2))
	    return new SHA1$2();

	  BlockHash$b.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils$2.inherits(SHA1$2, BlockHash$b);
	var _1$2 = SHA1$2;

	SHA1$2.blockSize = 512;
	SHA1$2.outSize = 160;
	SHA1$2.hmacStrength = 80;
	SHA1$2.padLength = 64;

	SHA1$2.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$7(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$7(rotl32$7(a, 5), ft_1$5(s, b, c, d), e, W[i], sha1_K$2[s]);
	    e = d;
	    d = c;
	    c = rotl32$7(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$9(this.h[0], a);
	  this.h[1] = sum32$9(this.h[1], b);
	  this.h[2] = sum32$9(this.h[2], c);
	  this.h[3] = sum32$9(this.h[3], d);
	  this.h[4] = sum32$9(this.h[4], e);
	};

	SHA1$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h, 'big');
	  else
	    return utils$2.split32(this.h, 'big');
	};

	var sum32$a = utils$2.sum32;
	var sum32_4$7 = utils$2.sum32_4;
	var sum32_5$8 = utils$2.sum32_5;
	var ch32$5 = common$5.ch32;
	var maj32$5 = common$5.maj32;
	var s0_256$5 = common$5.s0_256;
	var s1_256$5 = common$5.s1_256;
	var g0_256$5 = common$5.g0_256;
	var g1_256$5 = common$5.g1_256;

	var BlockHash$c = common$4.BlockHash;

	var sha256_K$2 = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256$2() {
	  if (!(this instanceof SHA256$2))
	    return new SHA256$2();

	  BlockHash$c.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K$2;
	  this.W = new Array(64);
	}
	utils$2.inherits(SHA256$2, BlockHash$c);
	var _256$2 = SHA256$2;

	SHA256$2.blockSize = 512;
	SHA256$2.outSize = 256;
	SHA256$2.hmacStrength = 192;
	SHA256$2.padLength = 64;

	SHA256$2.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$7(g1_256$5(W[i - 2]), W[i - 7], g0_256$5(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  minimalisticAssert(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5$8(h, s1_256$5(e), ch32$5(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$a(s0_256$5(a), maj32$5(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$a(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$a(T1, T2);
	  }

	  this.h[0] = sum32$a(this.h[0], a);
	  this.h[1] = sum32$a(this.h[1], b);
	  this.h[2] = sum32$a(this.h[2], c);
	  this.h[3] = sum32$a(this.h[3], d);
	  this.h[4] = sum32$a(this.h[4], e);
	  this.h[5] = sum32$a(this.h[5], f);
	  this.h[6] = sum32$a(this.h[6], g);
	  this.h[7] = sum32$a(this.h[7], h);
	};

	SHA256$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h, 'big');
	  else
	    return utils$2.split32(this.h, 'big');
	};

	function SHA224$2() {
	  if (!(this instanceof SHA224$2))
	    return new SHA224$2();

	  _256$2.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils$2.inherits(SHA224$2, _256$2);
	var _224$2 = SHA224$2;

	SHA224$2.blockSize = 512;
	SHA224$2.outSize = 224;
	SHA224$2.hmacStrength = 192;
	SHA224$2.padLength = 64;

	SHA224$2.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils$2.split32(this.h.slice(0, 7), 'big');
	};

	var rotr64_hi$5 = utils$2.rotr64_hi;
	var rotr64_lo$5 = utils$2.rotr64_lo;
	var shr64_hi$5 = utils$2.shr64_hi;
	var shr64_lo$5 = utils$2.shr64_lo;
	var sum64$5 = utils$2.sum64;
	var sum64_hi$5 = utils$2.sum64_hi;
	var sum64_lo$5 = utils$2.sum64_lo;
	var sum64_4_hi$5 = utils$2.sum64_4_hi;
	var sum64_4_lo$5 = utils$2.sum64_4_lo;
	var sum64_5_hi$5 = utils$2.sum64_5_hi;
	var sum64_5_lo$5 = utils$2.sum64_5_lo;

	var BlockHash$d = common$4.BlockHash;

	var sha512_K$2 = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512$2() {
	  if (!(this instanceof SHA512$2))
	    return new SHA512$2();

	  BlockHash$d.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K$2;
	  this.W = new Array(160);
	}
	utils$2.inherits(SHA512$2, BlockHash$d);
	var _512$2 = SHA512$2;

	SHA512$2.blockSize = 1024;
	SHA512$2.outSize = 512;
	SHA512$2.hmacStrength = 192;
	SHA512$2.padLength = 128;

	SHA512$2.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi$2(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo$2(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi$2(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo$2(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi$5(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo$5(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512$2.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  minimalisticAssert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi$2(eh, el);
	    var c1_lo = s1_512_lo$2(eh, el);
	    var c2_hi = ch64_hi$2(eh, el, fh, fl, gh);
	    var c2_lo = ch64_lo$2(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi$5(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo$5(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi$2(ah, al);
	    c0_lo = s0_512_lo$2(ah, al);
	    c1_hi = maj64_hi$2(ah, al, bh, bl, ch);
	    c1_lo = maj64_lo$2(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi$5(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo$5(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi$5(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo$5(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi$5(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo$5(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64$5(this.h, 0, ah, al);
	  sum64$5(this.h, 2, bh, bl);
	  sum64$5(this.h, 4, ch, cl);
	  sum64$5(this.h, 6, dh, dl);
	  sum64$5(this.h, 8, eh, el);
	  sum64$5(this.h, 10, fh, fl);
	  sum64$5(this.h, 12, gh, gl);
	  sum64$5(this.h, 14, hh, hl);
	};

	SHA512$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h, 'big');
	  else
	    return utils$2.split32(this.h, 'big');
	};

	function ch64_hi$2(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo$2(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi$2(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo$2(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi$2(xh, xl) {
	  var c0_hi = rotr64_hi$5(xh, xl, 28);
	  var c1_hi = rotr64_hi$5(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi$5(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo$2(xh, xl) {
	  var c0_lo = rotr64_lo$5(xh, xl, 28);
	  var c1_lo = rotr64_lo$5(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo$5(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi$2(xh, xl) {
	  var c0_hi = rotr64_hi$5(xh, xl, 14);
	  var c1_hi = rotr64_hi$5(xh, xl, 18);
	  var c2_hi = rotr64_hi$5(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo$2(xh, xl) {
	  var c0_lo = rotr64_lo$5(xh, xl, 14);
	  var c1_lo = rotr64_lo$5(xh, xl, 18);
	  var c2_lo = rotr64_lo$5(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi$2(xh, xl) {
	  var c0_hi = rotr64_hi$5(xh, xl, 1);
	  var c1_hi = rotr64_hi$5(xh, xl, 8);
	  var c2_hi = shr64_hi$5(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo$2(xh, xl) {
	  var c0_lo = rotr64_lo$5(xh, xl, 1);
	  var c1_lo = rotr64_lo$5(xh, xl, 8);
	  var c2_lo = shr64_lo$5(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi$2(xh, xl) {
	  var c0_hi = rotr64_hi$5(xh, xl, 19);
	  var c1_hi = rotr64_hi$5(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi$5(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo$2(xh, xl) {
	  var c0_lo = rotr64_lo$5(xh, xl, 19);
	  var c1_lo = rotr64_lo$5(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo$5(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function SHA384$2() {
	  if (!(this instanceof SHA384$2))
	    return new SHA384$2();

	  _512$2.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils$2.inherits(SHA384$2, _512$2);
	var _384$2 = SHA384$2;

	SHA384$2.blockSize = 1024;
	SHA384$2.outSize = 384;
	SHA384$2.hmacStrength = 192;
	SHA384$2.padLength = 128;

	SHA384$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils$2.split32(this.h.slice(0, 12), 'big');
	};

	var sha1$2 = _1$2;
	var sha224$2 = _224$2;
	var sha256$2 = _256$2;
	var sha384$2 = _384$2;
	var sha512$2 = _512$2;

	var sha$2 = {
		sha1: sha1$2,
		sha224: sha224$2,
		sha256: sha256$2,
		sha384: sha384$2,
		sha512: sha512$2
	};

	var rotl32$8 = utils$2.rotl32;
	var sum32$b = utils$2.sum32;
	var sum32_3$5 = utils$2.sum32_3;
	var sum32_4$8 = utils$2.sum32_4;
	var BlockHash$e = common$4.BlockHash;

	function RIPEMD160$2() {
	  if (!(this instanceof RIPEMD160$2))
	    return new RIPEMD160$2();

	  BlockHash$e.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils$2.inherits(RIPEMD160$2, BlockHash$e);
	var ripemd160$2 = RIPEMD160$2;

	RIPEMD160$2.blockSize = 512;
	RIPEMD160$2.outSize = 160;
	RIPEMD160$2.hmacStrength = 192;
	RIPEMD160$2.padLength = 64;

	RIPEMD160$2.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32$b(
	      rotl32$8(
	        sum32_4$8(A, f$2(j, B, C, D), msg[r$3[j] + start], K$2(j)),
	        s$2[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32$8(C, 10);
	    C = B;
	    B = T;
	    T = sum32$b(
	      rotl32$8(
	        sum32_4$8(Ah, f$2(79 - j, Bh, Ch, Dh), msg[rh$2[j] + start], Kh$2(j)),
	        sh$2[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32$8(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3$5(this.h[1], C, Dh);
	  this.h[1] = sum32_3$5(this.h[2], D, Eh);
	  this.h[2] = sum32_3$5(this.h[3], E, Ah);
	  this.h[3] = sum32_3$5(this.h[4], A, Bh);
	  this.h[4] = sum32_3$5(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$2.toHex32(this.h, 'little');
	  else
	    return utils$2.split32(this.h, 'little');
	};

	function f$2(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K$2(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh$2(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r$3 = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh$2 = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s$2 = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh$2 = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var ripemd$2 = {
		ripemd160: ripemd160$2
	};

	function Hmac$2(hash, key, enc) {
	  if (!(this instanceof Hmac$2))
	    return new Hmac$2(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils$2.toArray(key, enc));
	}
	var hmac$3 = Hmac$2;

	Hmac$2.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  minimalisticAssert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac$2.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac$2.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	var hash_1$2 = createCommonjsModule(function (module, exports) {
	var hash = exports;

	hash.utils = utils$2;
	hash.common = common$4;
	hash.sha = sha$2;
	hash.ripemd = ripemd$2;
	hash.hmac = hmac$3;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	});

	var sha2 = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var hash_js_1 = __importDefault(hash_1$2);

	function ripemd160(data) {
	    return '0x' + (hash_js_1.default.ripemd160().update(bytes.arrayify(data)).digest('hex'));
	}
	exports.ripemd160 = ripemd160;
	function sha256(data) {
	    return '0x' + (hash_js_1.default.sha256().update(bytes.arrayify(data)).digest('hex'));
	}
	exports.sha256 = sha256;
	function sha512(data) {
	    return '0x' + (hash_js_1.default.sha512().update(bytes.arrayify(data)).digest('hex'));
	}
	exports.sha512 = sha512;
	});

	var hdnode = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	// See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
	// See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
	var errors$1 = __importStar(errors);
	// The English language word list.
	// For additional word lists, please see /src.tc/wordlists/

	// Automatically register English?
	//import { register } from '../wordlists/wordlist';
	//register(langEn);









	var N = bignumber.bigNumberify("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
	// "Bitcoin seed"
	var MasterSecret = utf8.toUtf8Bytes('Bitcoin seed');
	var HardenedBit = 0x80000000;
	// Returns a byte with the MSB bits set
	function getUpperMask(bits) {
	    return ((1 << bits) - 1) << (8 - bits);
	}
	// Returns a byte with the LSB bits set
	function getLowerMask(bits) {
	    return (1 << bits) - 1;
	}
	function bytes32(value) {
	    return bytes.hexZeroPad(bytes.hexlify(value), 32);
	}
	function base58check(data) {
	    var checksum = bytes.hexDataSlice(sha2.sha256(sha2.sha256(data)), 0, 4);
	    return basex.Base58.encode(bytes.concat([data, checksum]));
	}
	var _constructorGuard = {};
	exports.defaultPath = "m/44'/60'/0'/0/0";
	var HDNode = /** @class */ (function () {
	    /**
	     *  This constructor should not be called directly.
	     *
	     *  Please use:
	     *   - fromMnemonic
	     *   - fromSeed
	     */
	    function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonic, path) {
	        errors$1.checkNew(this, HDNode);
	        if (constructorGuard !== _constructorGuard) {
	            throw new Error('HDNode constructor cannot be called directly');
	        }
	        if (privateKey) {
	            var keyPair = new secp256k1$1.KeyPair(privateKey);
	            properties.defineReadOnly(this, 'privateKey', keyPair.privateKey);
	            properties.defineReadOnly(this, 'publicKey', keyPair.compressedPublicKey);
	        }
	        else {
	            properties.defineReadOnly(this, 'privateKey', null);
	            properties.defineReadOnly(this, 'publicKey', bytes.hexlify(publicKey));
	        }
	        properties.defineReadOnly(this, 'parentFingerprint', parentFingerprint);
	        properties.defineReadOnly(this, 'fingerprint', bytes.hexDataSlice(sha2.ripemd160(sha2.sha256(this.publicKey)), 0, 4));
	        properties.defineReadOnly(this, 'address', secp256k1$1.computeAddress(this.publicKey));
	        properties.defineReadOnly(this, 'chainCode', chainCode);
	        properties.defineReadOnly(this, 'index', index);
	        properties.defineReadOnly(this, 'depth', depth);
	        properties.defineReadOnly(this, 'mnemonic', mnemonic);
	        properties.defineReadOnly(this, 'path', path);
	        properties.setType(this, 'HDNode');
	    }
	    Object.defineProperty(HDNode.prototype, "extendedKey", {
	        get: function () {
	            // We only support the mainnet values for now, but if anyone needs
	            // testnet values, let me know. I believe current senitment is that
	            // we should always use mainnet, and use BIP-44 to derive the network
	            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
	            //   - Testnet: public=0x043587CF, private=0x04358394
	            if (this.depth >= 256) {
	                throw new Error("Depth too large!");
	            }
	            return base58check(bytes.concat([
	                ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
	                bytes.hexlify(this.depth),
	                this.parentFingerprint,
	                bytes.hexZeroPad(bytes.hexlify(this.index), 4),
	                this.chainCode,
	                ((this.privateKey != null) ? bytes.concat(["0x00", this.privateKey]) : this.publicKey),
	            ]));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HDNode.prototype.neuter = function () {
	        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, null, this.path);
	    };
	    HDNode.prototype._derive = function (index) {
	        if (index > 0xffffffff) {
	            throw new Error("invalid index - " + String(index));
	        }
	        // Base path
	        var path = this.path;
	        if (path) {
	            path += '/' + (index & ~HardenedBit);
	        }
	        var data = new Uint8Array(37);
	        if (index & HardenedBit) {
	            if (!this.privateKey) {
	                throw new Error('cannot derive child of neutered node');
	            }
	            // Data = 0x00 || ser_256(k_par)
	            data.set(bytes.arrayify(this.privateKey), 1);
	            // Hardened path
	            if (path) {
	                path += "'";
	            }
	        }
	        else {
	            // Data = ser_p(point(k_par))
	            data.set(bytes.arrayify(this.publicKey));
	        }
	        // Data += ser_32(i)
	        for (var i = 24; i >= 0; i -= 8) {
	            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
	        }
	        var I = hmac.computeHmac(hmac.SupportedAlgorithms.sha512, this.chainCode, data);
	        var IL = I.slice(0, 32);
	        var IR = I.slice(32);
	        // The private key
	        var ki = null;
	        // The public key
	        var Ki = null;
	        if (this.privateKey) {
	            ki = bytes32(bignumber.bigNumberify(IL).add(this.privateKey).mod(N));
	        }
	        else {
	            var ek = new secp256k1$1.KeyPair(bytes.hexlify(IL));
	            Ki = ek._addPoint(this.publicKey);
	        }
	        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, this.mnemonic, path);
	    };
	    HDNode.prototype.derivePath = function (path) {
	        var components = path.split('/');
	        if (components.length === 0 || (components[0] === 'm' && this.depth !== 0)) {
	            throw new Error('invalid path - ' + path);
	        }
	        if (components[0] === 'm') {
	            components.shift();
	        }
	        var result = this;
	        for (var i = 0; i < components.length; i++) {
	            var component = components[i];
	            if (component.match(/^[0-9]+'$/)) {
	                var index = parseInt(component.substring(0, component.length - 1));
	                if (index >= HardenedBit) {
	                    throw new Error('invalid path index - ' + component);
	                }
	                result = result._derive(HardenedBit + index);
	            }
	            else if (component.match(/^[0-9]+$/)) {
	                var index = parseInt(component);
	                if (index >= HardenedBit) {
	                    throw new Error('invalid path index - ' + component);
	                }
	                result = result._derive(index);
	            }
	            else {
	                throw new Error('invalid path component - ' + component);
	            }
	        }
	        return result;
	    };
	    HDNode.isHDNode = function (value) {
	        return properties.isType(value, 'HDNode');
	    };
	    return HDNode;
	}());
	exports.HDNode = HDNode;
	function fromExtendedKey(extendedKey) {
	    var bytes$1 = basex.Base58.decode(extendedKey);
	    if (bytes$1.length !== 82 || base58check(bytes$1.slice(0, 78)) !== extendedKey) {
	        errors$1.throwError("invalid extended key", errors$1.INVALID_ARGUMENT, {
	            argument: "extendedKey",
	            value: "[REDACTED]"
	        });
	    }
	    var depth = bytes$1[4];
	    var parentFingerprint = bytes.hexlify(bytes$1.slice(5, 9));
	    var index = parseInt(bytes.hexlify(bytes$1.slice(9, 13)).substring(2), 16);
	    var chainCode = bytes.hexlify(bytes$1.slice(13, 45));
	    var key = bytes$1.slice(45, 78);
	    switch (bytes.hexlify(bytes$1.slice(0, 4))) {
	        // Public Key
	        case "0x0488b21e":
	        case "0x043587cf":
	            return new HDNode(_constructorGuard, null, bytes.hexlify(key), parentFingerprint, chainCode, index, depth, null, null);
	        // Private Key
	        case "0x0488ade4":
	        case "0x04358394":
	            if (key[0] !== 0) {
	                break;
	            }
	            return new HDNode(_constructorGuard, bytes.hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null, null);
	    }
	    return errors$1.throwError("invalid extended key", errors$1.INVALID_ARGUMENT, {
	        argument: "extendedKey",
	        value: "[REDACTED]"
	    });
	}
	exports.fromExtendedKey = fromExtendedKey;
	function _fromSeed(seed, mnemonic) {
	    var seedArray = bytes.arrayify(seed);
	    if (seedArray.length < 16 || seedArray.length > 64) {
	        throw new Error('invalid seed');
	    }
	    var I = bytes.arrayify(hmac.computeHmac(hmac.SupportedAlgorithms.sha512, MasterSecret, seedArray));
	    return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic, 'm');
	}
	function fromMnemonic(mnemonic, wordlist, password) {
	    // Normalize the mnemonic (also throws if the checksum is invalid)
	    mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
	    return _fromSeed(mnemonicToSeed(mnemonic, password), mnemonic);
	}
	exports.fromMnemonic = fromMnemonic;
	function fromSeed(seed) {
	    return _fromSeed(seed, null);
	}
	exports.fromSeed = fromSeed;
	function mnemonicToSeed(mnemonic, password) {
	    if (!password) {
	        password = '';
	    }
	    var salt = utf8.toUtf8Bytes('mnemonic' + password, utf8.UnicodeNormalizationForm.NFKD);
	    return bytes.hexlify(pbkdf2_1.pbkdf2(utf8.toUtf8Bytes(mnemonic, utf8.UnicodeNormalizationForm.NFKD), salt, 2048, 64, 'sha512'));
	}
	exports.mnemonicToSeed = mnemonicToSeed;
	function mnemonicToEntropy(mnemonic, wordlist) {
	    if (!wordlist) {
	        wordlist = langEn_1.langEn;
	    }
	    errors$1.checkNormalize();
	    var words = wordlist.split(mnemonic);
	    if ((words.length % 3) !== 0) {
	        throw new Error('invalid mnemonic');
	    }
	    var entropy = bytes.arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
	    var offset = 0;
	    for (var i = 0; i < words.length; i++) {
	        var index = wordlist.getWordIndex(words[i].normalize('NFKD'));
	        if (index === -1) {
	            throw new Error('invalid mnemonic');
	        }
	        for (var bit = 0; bit < 11; bit++) {
	            if (index & (1 << (10 - bit))) {
	                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
	            }
	            offset++;
	        }
	    }
	    var entropyBits = 32 * words.length / 3;
	    var checksumBits = words.length / 3;
	    var checksumMask = getUpperMask(checksumBits);
	    var checksum = bytes.arrayify(sha2.sha256(entropy.slice(0, entropyBits / 8)))[0];
	    checksum &= checksumMask;
	    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
	        throw new Error('invalid checksum');
	    }
	    return bytes.hexlify(entropy.slice(0, entropyBits / 8));
	}
	exports.mnemonicToEntropy = mnemonicToEntropy;
	function entropyToMnemonic(entropy, wordlist) {
	    entropy = bytes.arrayify(entropy);
	    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
	        throw new Error('invalid entropy');
	    }
	    var indices = [0];
	    var remainingBits = 11;
	    for (var i = 0; i < entropy.length; i++) {
	        // Consume the whole byte (with still more to go)
	        if (remainingBits > 8) {
	            indices[indices.length - 1] <<= 8;
	            indices[indices.length - 1] |= entropy[i];
	            remainingBits -= 8;
	            // This byte will complete an 11-bit index
	        }
	        else {
	            indices[indices.length - 1] <<= remainingBits;
	            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
	            // Start the next word
	            indices.push(entropy[i] & getLowerMask(8 - remainingBits));
	            remainingBits += 3;
	        }
	    }
	    // Compute the checksum bits
	    var checksum = bytes.arrayify(sha2.sha256(entropy))[0];
	    var checksumBits = entropy.length / 4;
	    checksum &= getUpperMask(checksumBits);
	    // Shift the checksum into the word indices
	    indices[indices.length - 1] <<= checksumBits;
	    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
	    if (!wordlist) {
	        wordlist = langEn_1.langEn;
	    }
	    return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));
	}
	exports.entropyToMnemonic = entropyToMnemonic;
	function isValidMnemonic(mnemonic, wordlist) {
	    try {
	        mnemonicToEntropy(mnemonic, wordlist);
	        return true;
	    }
	    catch (error) { }
	    return false;
	}
	exports.isValidMnemonic = isValidMnemonic;
	});

	var jsonWallet = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	function isCrowdsaleWallet(json) {
	    try {
	        var data = JSON.parse(json);
	    }
	    catch (error) {
	        return false;
	    }
	    return (data.encseed && data.ethaddr);
	}
	exports.isCrowdsaleWallet = isCrowdsaleWallet;
	function isSecretStorageWallet(json) {
	    try {
	        var data = JSON.parse(json);
	    }
	    catch (error) {
	        return false;
	    }
	    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
	        return false;
	    }
	    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
	    return true;
	}
	exports.isSecretStorageWallet = isSecretStorageWallet;
	//export function isJsonWallet(json: string): boolean {
	//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
	//}
	function getJsonWalletAddress(json) {
	    if (isCrowdsaleWallet(json)) {
	        try {
	            return address.getAddress(JSON.parse(json).ethaddr);
	        }
	        catch (error) {
	            return null;
	        }
	    }
	    if (isSecretStorageWallet(json)) {
	        try {
	            return address.getAddress(JSON.parse(json).address);
	        }
	        catch (error) {
	            return null;
	        }
	    }
	    return null;
	}
	exports.getJsonWalletAddress = getJsonWalletAddress;
	});

	var randomBytes_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	function randomBytes(length) {
	    return bytes.arrayify(require$$0$1.randomBytes(length));
	}
	exports.randomBytes = randomBytes;
	});

	var aesJs = createCommonjsModule(function (module, exports) {

	(function(root) {

	    function checkInt(value) {
	        return (parseInt(value) === value);
	    }

	    function checkInts(arrayish) {
	        if (!checkInt(arrayish.length)) { return false; }

	        for (var i = 0; i < arrayish.length; i++) {
	            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
	                return false;
	            }
	        }

	        return true;
	    }

	    function coerceArray(arg, copy) {

	        // ArrayBuffer view
	        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

	            if (copy) {
	                if (arg.slice) {
	                    arg = arg.slice();
	                } else {
	                    arg = Array.prototype.slice.call(arg);
	                }
	            }

	            return arg;
	        }

	        // It's an array; check it is a valid representation of a byte
	        if (Array.isArray(arg)) {
	            if (!checkInts(arg)) {
	                throw new Error('Array contains invalid value: ' + arg);
	            }

	            return new Uint8Array(arg);
	        }

	        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
	        if (checkInt(arg.length) && checkInts(arg)) {
	            return new Uint8Array(arg);
	        }

	        throw new Error('unsupported array-like object');
	    }

	    function createArray(length) {
	        return new Uint8Array(length);
	    }

	    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
	        if (sourceStart != null || sourceEnd != null) {
	            if (sourceArray.slice) {
	                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
	            } else {
	                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
	            }
	        }
	        targetArray.set(sourceArray, targetStart);
	    }



	    var convertUtf8 = (function() {
	        function toBytes(text) {
	            var result = [], i = 0;
	            text = encodeURI(text);
	            while (i < text.length) {
	                var c = text.charCodeAt(i++);

	                // if it is a % sign, encode the following 2 bytes as a hex value
	                if (c === 37) {
	                    result.push(parseInt(text.substr(i, 2), 16));
	                    i += 2;

	                // otherwise, just the actual byte
	                } else {
	                    result.push(c);
	                }
	            }

	            return coerceArray(result);
	        }

	        function fromBytes(bytes) {
	            var result = [], i = 0;

	            while (i < bytes.length) {
	                var c = bytes[i];

	                if (c < 128) {
	                    result.push(String.fromCharCode(c));
	                    i++;
	                } else if (c > 191 && c < 224) {
	                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
	                    i += 2;
	                } else {
	                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
	                    i += 3;
	                }
	            }

	            return result.join('');
	        }

	        return {
	            toBytes: toBytes,
	            fromBytes: fromBytes,
	        }
	    })();

	    var convertHex = (function() {
	        function toBytes(text) {
	            var result = [];
	            for (var i = 0; i < text.length; i += 2) {
	                result.push(parseInt(text.substr(i, 2), 16));
	            }

	            return result;
	        }

	        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
	        var Hex = '0123456789abcdef';

	        function fromBytes(bytes) {
	                var result = [];
	                for (var i = 0; i < bytes.length; i++) {
	                    var v = bytes[i];
	                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
	                }
	                return result.join('');
	        }

	        return {
	            toBytes: toBytes,
	            fromBytes: fromBytes,
	        }
	    })();


	    // Number of rounds by keysize
	    var numberOfRounds = {16: 10, 24: 12, 32: 14};

	    // Round constant words
	    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

	    // S-box and Inverse S-box (S is for Substitution)
	    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
	    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

	    // Transformations for encryption
	    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
	    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
	    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
	    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

	    // Transformations for decryption
	    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
	    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
	    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
	    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

	    // Transformations for decryption key expansion
	    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
	    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
	    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
	    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

	    function convertToInt32(bytes) {
	        var result = [];
	        for (var i = 0; i < bytes.length; i += 4) {
	            result.push(
	                (bytes[i    ] << 24) |
	                (bytes[i + 1] << 16) |
	                (bytes[i + 2] <<  8) |
	                 bytes[i + 3]
	            );
	        }
	        return result;
	    }

	    var AES = function(key) {
	        if (!(this instanceof AES)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        Object.defineProperty(this, 'key', {
	            value: coerceArray(key, true)
	        });

	        this._prepare();
	    };


	    AES.prototype._prepare = function() {

	        var rounds = numberOfRounds[this.key.length];
	        if (rounds == null) {
	            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
	        }

	        // encryption round keys
	        this._Ke = [];

	        // decryption round keys
	        this._Kd = [];

	        for (var i = 0; i <= rounds; i++) {
	            this._Ke.push([0, 0, 0, 0]);
	            this._Kd.push([0, 0, 0, 0]);
	        }

	        var roundKeyCount = (rounds + 1) * 4;
	        var KC = this.key.length / 4;

	        // convert the key into ints
	        var tk = convertToInt32(this.key);

	        // copy values into round key arrays
	        var index;
	        for (var i = 0; i < KC; i++) {
	            index = i >> 2;
	            this._Ke[index][i % 4] = tk[i];
	            this._Kd[rounds - index][i % 4] = tk[i];
	        }

	        // key expansion (fips-197 section 5.2)
	        var rconpointer = 0;
	        var t = KC, tt;
	        while (t < roundKeyCount) {
	            tt = tk[KC - 1];
	            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
	                      (S[(tt >>  8) & 0xFF] << 16) ^
	                      (S[ tt        & 0xFF] <<  8) ^
	                       S[(tt >> 24) & 0xFF]        ^
	                      (rcon[rconpointer] << 24));
	            rconpointer += 1;

	            // key expansion (for non-256 bit)
	            if (KC != 8) {
	                for (var i = 1; i < KC; i++) {
	                    tk[i] ^= tk[i - 1];
	                }

	            // key expansion for 256-bit keys is "slightly different" (fips-197)
	            } else {
	                for (var i = 1; i < (KC / 2); i++) {
	                    tk[i] ^= tk[i - 1];
	                }
	                tt = tk[(KC / 2) - 1];

	                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
	                              (S[(tt >>  8) & 0xFF] <<  8) ^
	                              (S[(tt >> 16) & 0xFF] << 16) ^
	                              (S[(tt >> 24) & 0xFF] << 24));

	                for (var i = (KC / 2) + 1; i < KC; i++) {
	                    tk[i] ^= tk[i - 1];
	                }
	            }

	            // copy values into round key arrays
	            var i = 0, r, c;
	            while (i < KC && t < roundKeyCount) {
	                r = t >> 2;
	                c = t % 4;
	                this._Ke[r][c] = tk[i];
	                this._Kd[rounds - r][c] = tk[i++];
	                t++;
	            }
	        }

	        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
	        for (var r = 1; r < rounds; r++) {
	            for (var c = 0; c < 4; c++) {
	                tt = this._Kd[r][c];
	                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
	                                  U2[(tt >> 16) & 0xFF] ^
	                                  U3[(tt >>  8) & 0xFF] ^
	                                  U4[ tt        & 0xFF]);
	            }
	        }
	    };

	    AES.prototype.encrypt = function(plaintext) {
	        if (plaintext.length != 16) {
	            throw new Error('invalid plaintext size (must be 16 bytes)');
	        }

	        var rounds = this._Ke.length - 1;
	        var a = [0, 0, 0, 0];

	        // convert plaintext to (ints ^ key)
	        var t = convertToInt32(plaintext);
	        for (var i = 0; i < 4; i++) {
	            t[i] ^= this._Ke[0][i];
	        }

	        // apply round transforms
	        for (var r = 1; r < rounds; r++) {
	            for (var i = 0; i < 4; i++) {
	                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
	                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
	                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
	                        T4[ t[(i + 3) % 4]        & 0xff] ^
	                        this._Ke[r][i]);
	            }
	            t = a.slice();
	        }

	        // the last round is special
	        var result = createArray(16), tt;
	        for (var i = 0; i < 4; i++) {
	            tt = this._Ke[rounds][i];
	            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
	            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
	            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
	            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
	        }

	        return result;
	    };

	    AES.prototype.decrypt = function(ciphertext) {
	        if (ciphertext.length != 16) {
	            throw new Error('invalid ciphertext size (must be 16 bytes)');
	        }

	        var rounds = this._Kd.length - 1;
	        var a = [0, 0, 0, 0];

	        // convert plaintext to (ints ^ key)
	        var t = convertToInt32(ciphertext);
	        for (var i = 0; i < 4; i++) {
	            t[i] ^= this._Kd[0][i];
	        }

	        // apply round transforms
	        for (var r = 1; r < rounds; r++) {
	            for (var i = 0; i < 4; i++) {
	                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
	                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
	                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
	                        T8[ t[(i + 1) % 4]        & 0xff] ^
	                        this._Kd[r][i]);
	            }
	            t = a.slice();
	        }

	        // the last round is special
	        var result = createArray(16), tt;
	        for (var i = 0; i < 4; i++) {
	            tt = this._Kd[rounds][i];
	            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
	            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
	            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
	            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
	        }

	        return result;
	    };


	    /**
	     *  Mode Of Operation - Electonic Codebook (ECB)
	     */
	    var ModeOfOperationECB = function(key) {
	        if (!(this instanceof ModeOfOperationECB)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Electronic Code Block";
	        this.name = "ecb";

	        this._aes = new AES(key);
	    };

	    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
	        plaintext = coerceArray(plaintext);

	        if ((plaintext.length % 16) !== 0) {
	            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
	        }

	        var ciphertext = createArray(plaintext.length);
	        var block = createArray(16);

	        for (var i = 0; i < plaintext.length; i += 16) {
	            copyArray(plaintext, block, 0, i, i + 16);
	            block = this._aes.encrypt(block);
	            copyArray(block, ciphertext, i);
	        }

	        return ciphertext;
	    };

	    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
	        ciphertext = coerceArray(ciphertext);

	        if ((ciphertext.length % 16) !== 0) {
	            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
	        }

	        var plaintext = createArray(ciphertext.length);
	        var block = createArray(16);

	        for (var i = 0; i < ciphertext.length; i += 16) {
	            copyArray(ciphertext, block, 0, i, i + 16);
	            block = this._aes.decrypt(block);
	            copyArray(block, plaintext, i);
	        }

	        return plaintext;
	    };


	    /**
	     *  Mode Of Operation - Cipher Block Chaining (CBC)
	     */
	    var ModeOfOperationCBC = function(key, iv) {
	        if (!(this instanceof ModeOfOperationCBC)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Cipher Block Chaining";
	        this.name = "cbc";

	        if (!iv) {
	            iv = createArray(16);

	        } else if (iv.length != 16) {
	            throw new Error('invalid initialation vector size (must be 16 bytes)');
	        }

	        this._lastCipherblock = coerceArray(iv, true);

	        this._aes = new AES(key);
	    };

	    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
	        plaintext = coerceArray(plaintext);

	        if ((plaintext.length % 16) !== 0) {
	            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
	        }

	        var ciphertext = createArray(plaintext.length);
	        var block = createArray(16);

	        for (var i = 0; i < plaintext.length; i += 16) {
	            copyArray(plaintext, block, 0, i, i + 16);

	            for (var j = 0; j < 16; j++) {
	                block[j] ^= this._lastCipherblock[j];
	            }

	            this._lastCipherblock = this._aes.encrypt(block);
	            copyArray(this._lastCipherblock, ciphertext, i);
	        }

	        return ciphertext;
	    };

	    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
	        ciphertext = coerceArray(ciphertext);

	        if ((ciphertext.length % 16) !== 0) {
	            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
	        }

	        var plaintext = createArray(ciphertext.length);
	        var block = createArray(16);

	        for (var i = 0; i < ciphertext.length; i += 16) {
	            copyArray(ciphertext, block, 0, i, i + 16);
	            block = this._aes.decrypt(block);

	            for (var j = 0; j < 16; j++) {
	                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
	            }

	            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
	        }

	        return plaintext;
	    };


	    /**
	     *  Mode Of Operation - Cipher Feedback (CFB)
	     */
	    var ModeOfOperationCFB = function(key, iv, segmentSize) {
	        if (!(this instanceof ModeOfOperationCFB)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Cipher Feedback";
	        this.name = "cfb";

	        if (!iv) {
	            iv = createArray(16);

	        } else if (iv.length != 16) {
	            throw new Error('invalid initialation vector size (must be 16 size)');
	        }

	        if (!segmentSize) { segmentSize = 1; }

	        this.segmentSize = segmentSize;

	        this._shiftRegister = coerceArray(iv, true);

	        this._aes = new AES(key);
	    };

	    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
	        if ((plaintext.length % this.segmentSize) != 0) {
	            throw new Error('invalid plaintext size (must be segmentSize bytes)');
	        }

	        var encrypted = coerceArray(plaintext, true);

	        var xorSegment;
	        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
	            xorSegment = this._aes.encrypt(this._shiftRegister);
	            for (var j = 0; j < this.segmentSize; j++) {
	                encrypted[i + j] ^= xorSegment[j];
	            }

	            // Shift the register
	            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
	            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
	        }

	        return encrypted;
	    };

	    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
	        if ((ciphertext.length % this.segmentSize) != 0) {
	            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
	        }

	        var plaintext = coerceArray(ciphertext, true);

	        var xorSegment;
	        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
	            xorSegment = this._aes.encrypt(this._shiftRegister);

	            for (var j = 0; j < this.segmentSize; j++) {
	                plaintext[i + j] ^= xorSegment[j];
	            }

	            // Shift the register
	            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
	            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
	        }

	        return plaintext;
	    };

	    /**
	     *  Mode Of Operation - Output Feedback (OFB)
	     */
	    var ModeOfOperationOFB = function(key, iv) {
	        if (!(this instanceof ModeOfOperationOFB)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Output Feedback";
	        this.name = "ofb";

	        if (!iv) {
	            iv = createArray(16);

	        } else if (iv.length != 16) {
	            throw new Error('invalid initialation vector size (must be 16 bytes)');
	        }

	        this._lastPrecipher = coerceArray(iv, true);
	        this._lastPrecipherIndex = 16;

	        this._aes = new AES(key);
	    };

	    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
	        var encrypted = coerceArray(plaintext, true);

	        for (var i = 0; i < encrypted.length; i++) {
	            if (this._lastPrecipherIndex === 16) {
	                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
	                this._lastPrecipherIndex = 0;
	            }
	            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
	        }

	        return encrypted;
	    };

	    // Decryption is symetric
	    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


	    /**
	     *  Counter object for CTR common mode of operation
	     */
	    var Counter = function(initialValue) {
	        if (!(this instanceof Counter)) {
	            throw Error('Counter must be instanitated with `new`');
	        }

	        // We allow 0, but anything false-ish uses the default 1
	        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

	        if (typeof(initialValue) === 'number') {
	            this._counter = createArray(16);
	            this.setValue(initialValue);

	        } else {
	            this.setBytes(initialValue);
	        }
	    };

	    Counter.prototype.setValue = function(value) {
	        if (typeof(value) !== 'number' || parseInt(value) != value) {
	            throw new Error('invalid counter value (must be an integer)');
	        }

	        for (var index = 15; index >= 0; --index) {
	            this._counter[index] = value % 256;
	            value = value >> 8;
	        }
	    };

	    Counter.prototype.setBytes = function(bytes) {
	        bytes = coerceArray(bytes, true);

	        if (bytes.length != 16) {
	            throw new Error('invalid counter bytes size (must be 16 bytes)');
	        }

	        this._counter = bytes;
	    };

	    Counter.prototype.increment = function() {
	        for (var i = 15; i >= 0; i--) {
	            if (this._counter[i] === 255) {
	                this._counter[i] = 0;
	            } else {
	                this._counter[i]++;
	                break;
	            }
	        }
	    };


	    /**
	     *  Mode Of Operation - Counter (CTR)
	     */
	    var ModeOfOperationCTR = function(key, counter) {
	        if (!(this instanceof ModeOfOperationCTR)) {
	            throw Error('AES must be instanitated with `new`');
	        }

	        this.description = "Counter";
	        this.name = "ctr";

	        if (!(counter instanceof Counter)) {
	            counter = new Counter(counter);
	        }

	        this._counter = counter;

	        this._remainingCounter = null;
	        this._remainingCounterIndex = 16;

	        this._aes = new AES(key);
	    };

	    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
	        var encrypted = coerceArray(plaintext, true);

	        for (var i = 0; i < encrypted.length; i++) {
	            if (this._remainingCounterIndex === 16) {
	                this._remainingCounter = this._aes.encrypt(this._counter._counter);
	                this._remainingCounterIndex = 0;
	                this._counter.increment();
	            }
	            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
	        }

	        return encrypted;
	    };

	    // Decryption is symetric
	    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


	    ///////////////////////
	    // Padding

	    // See:https://tools.ietf.org/html/rfc2315
	    function pkcs7pad(data) {
	        data = coerceArray(data, true);
	        var padder = 16 - (data.length % 16);
	        var result = createArray(data.length + padder);
	        copyArray(data, result);
	        for (var i = data.length; i < result.length; i++) {
	            result[i] = padder;
	        }
	        return result;
	    }

	    function pkcs7strip(data) {
	        data = coerceArray(data, true);
	        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

	        var padder = data[data.length - 1];
	        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

	        var length = data.length - padder;
	        for (var i = 0; i < padder; i++) {
	            if (data[length + i] !== padder) {
	                throw new Error('PKCS#7 invalid padding byte');
	            }
	        }

	        var result = createArray(length);
	        copyArray(data, result, 0, 0, length);
	        return result;
	    }

	    ///////////////////////
	    // Exporting


	    // The block cipher
	    var aesjs = {
	        AES: AES,
	        Counter: Counter,

	        ModeOfOperation: {
	            ecb: ModeOfOperationECB,
	            cbc: ModeOfOperationCBC,
	            cfb: ModeOfOperationCFB,
	            ofb: ModeOfOperationOFB,
	            ctr: ModeOfOperationCTR
	        },

	        utils: {
	            hex: convertHex,
	            utf8: convertUtf8
	        },

	        padding: {
	            pkcs7: {
	                pad: pkcs7pad,
	                strip: pkcs7strip
	            }
	        },

	        _arrayTest: {
	            coerceArray: coerceArray,
	            createArray: createArray,
	            copyArray: copyArray,
	        }
	    };


	    // node.js
	    {
	        module.exports = aesjs;

	    // RequireJS/AMD
	    // http://www.requirejs.org/docs/api.html
	    // https://github.com/amdjs/amdjs-api/wiki/AMD
	    }


	})();
	});

	var scrypt = createCommonjsModule(function (module, exports) {

	(function(root) {
	    var MAX_VALUE = 0x7fffffff;

	    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
	    // See: https://github.com/dchest/scrypt-async-js
	    function SHA256(m) {
	        var K = [
	           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
	           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
	           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
	           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
	           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
	           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
	           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
	           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
	           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
	           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	       ];

	        var h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
	        var h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
	        var w = new Array(64);

	        function blocks(p) {
	            var off = 0, len = p.length;
	            while (len >= 64) {
	                var a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

	                for (i = 0; i < 16; i++) {
	                    j = off + i*4;
	                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
	                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
	                }

	                for (i = 16; i < 64; i++) {
	                    u = w[i-2];
	                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

	                    u = w[i-15];
	                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

	                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
	                }

	                for (i = 0; i < 64; i++) {
	                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
	                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
	                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

	                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
	                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

	                    h = g;
	                    g = f;
	                    f = e;
	                    e = (d + t1) | 0;
	                    d = c;
	                    c = b;
	                    b = a;
	                    a = (t1 + t2) | 0;
	                }

	                h0 = (h0 + a) | 0;
	                h1 = (h1 + b) | 0;
	                h2 = (h2 + c) | 0;
	                h3 = (h3 + d) | 0;
	                h4 = (h4 + e) | 0;
	                h5 = (h5 + f) | 0;
	                h6 = (h6 + g) | 0;
	                h7 = (h7 + h) | 0;

	                off += 64;
	                len -= 64;
	            }
	        }

	        blocks(m);

	        var i, bytesLeft = m.length % 64,
	        bitLenHi = (m.length / 0x20000000) | 0,
	        bitLenLo = m.length << 3,
	        numZeros = (bytesLeft < 56) ? 56 : 120,
	        p = m.slice(m.length - bytesLeft, m.length);

	        p.push(0x80);
	        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
	        p.push((bitLenHi>>>24) & 0xff);
	        p.push((bitLenHi>>>16) & 0xff);
	        p.push((bitLenHi>>>8)  & 0xff);
	        p.push((bitLenHi>>>0)  & 0xff);
	        p.push((bitLenLo>>>24) & 0xff);
	        p.push((bitLenLo>>>16) & 0xff);
	        p.push((bitLenLo>>>8)  & 0xff);
	        p.push((bitLenLo>>>0)  & 0xff);

	        blocks(p);

	        return [
	            (h0>>>24) & 0xff, (h0>>>16) & 0xff, (h0>>>8) & 0xff, (h0>>>0) & 0xff,
	            (h1>>>24) & 0xff, (h1>>>16) & 0xff, (h1>>>8) & 0xff, (h1>>>0) & 0xff,
	            (h2>>>24) & 0xff, (h2>>>16) & 0xff, (h2>>>8) & 0xff, (h2>>>0) & 0xff,
	            (h3>>>24) & 0xff, (h3>>>16) & 0xff, (h3>>>8) & 0xff, (h3>>>0) & 0xff,
	            (h4>>>24) & 0xff, (h4>>>16) & 0xff, (h4>>>8) & 0xff, (h4>>>0) & 0xff,
	            (h5>>>24) & 0xff, (h5>>>16) & 0xff, (h5>>>8) & 0xff, (h5>>>0) & 0xff,
	            (h6>>>24) & 0xff, (h6>>>16) & 0xff, (h6>>>8) & 0xff, (h6>>>0) & 0xff,
	            (h7>>>24) & 0xff, (h7>>>16) & 0xff, (h7>>>8) & 0xff, (h7>>>0) & 0xff
	        ];
	    }

	    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
	        // compress password if it's longer than hash block length
	        password = password.length <= 64 ? password : SHA256(password);

	        var i;
	        var innerLen = 64 + salt.length + 4;
	        var inner = new Array(innerLen);
	        var outerKey = new Array(64);
	        var dk = [];

	        // inner = (password ^ ipad) || salt || counter
	        for (i = 0; i < 64; i++) inner[i] = 0x36;
	        for (i = 0; i < password.length; i++) inner[i] ^= password[i];
	        for (i = 0; i < salt.length; i++) inner[64+i] = salt[i];
	        for (i = innerLen - 4; i < innerLen; i++) inner[i] = 0;

	        // outerKey = password ^ opad
	        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
	        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

	        // increments counter inside inner
	        function incrementCounter() {
	            for (var i = innerLen-1; i >= innerLen-4; i--) {
	                inner[i]++;
	                if (inner[i] <= 0xff) return;
	                inner[i] = 0;
	            }
	        }

	        // output blocks = SHA256(outerKey || SHA256(inner)) ...
	        while (dkLen >= 32) {
	            incrementCounter();
	            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
	            dkLen -= 32;
	        }
	        if (dkLen > 0) {
	            incrementCounter();
	            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
	        }

	        return dk;
	    }

	    // The following is an adaptation of scryptsy
	    // See: https://www.npmjs.com/package/scryptsy
	    function blockmix_salsa8(BY, Yi, r, x, _X) {
	        var i;

	        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
	        for (i = 0; i < 2 * r; i++) {
	            blockxor(BY, i * 16, _X, 16);
	            salsa20_8(_X, x);
	            arraycopy(_X, 0, BY, Yi + (i * 16), 16);
	        }

	        for (i = 0; i < r; i++) {
	            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
	        }

	        for (i = 0; i < r; i++) {
	            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
	        }
	    }

	    function R(a, b) {
	        return (a << b) | (a >>> (32 - b));
	    }

	    function salsa20_8(B, x) {
	        arraycopy(B, 0, x, 0, 16);

	        for (var i = 8; i > 0; i -= 2) {
	            x[ 4] ^= R(x[ 0] + x[12], 7);
	            x[ 8] ^= R(x[ 4] + x[ 0], 9);
	            x[12] ^= R(x[ 8] + x[ 4], 13);
	            x[ 0] ^= R(x[12] + x[ 8], 18);
	            x[ 9] ^= R(x[ 5] + x[ 1], 7);
	            x[13] ^= R(x[ 9] + x[ 5], 9);
	            x[ 1] ^= R(x[13] + x[ 9], 13);
	            x[ 5] ^= R(x[ 1] + x[13], 18);
	            x[14] ^= R(x[10] + x[ 6], 7);
	            x[ 2] ^= R(x[14] + x[10], 9);
	            x[ 6] ^= R(x[ 2] + x[14], 13);
	            x[10] ^= R(x[ 6] + x[ 2], 18);
	            x[ 3] ^= R(x[15] + x[11], 7);
	            x[ 7] ^= R(x[ 3] + x[15], 9);
	            x[11] ^= R(x[ 7] + x[ 3], 13);
	            x[15] ^= R(x[11] + x[ 7], 18);
	            x[ 1] ^= R(x[ 0] + x[ 3], 7);
	            x[ 2] ^= R(x[ 1] + x[ 0], 9);
	            x[ 3] ^= R(x[ 2] + x[ 1], 13);
	            x[ 0] ^= R(x[ 3] + x[ 2], 18);
	            x[ 6] ^= R(x[ 5] + x[ 4], 7);
	            x[ 7] ^= R(x[ 6] + x[ 5], 9);
	            x[ 4] ^= R(x[ 7] + x[ 6], 13);
	            x[ 5] ^= R(x[ 4] + x[ 7], 18);
	            x[11] ^= R(x[10] + x[ 9], 7);
	            x[ 8] ^= R(x[11] + x[10], 9);
	            x[ 9] ^= R(x[ 8] + x[11], 13);
	            x[10] ^= R(x[ 9] + x[ 8], 18);
	            x[12] ^= R(x[15] + x[14], 7);
	            x[13] ^= R(x[12] + x[15], 9);
	            x[14] ^= R(x[13] + x[12], 13);
	            x[15] ^= R(x[14] + x[13], 18);
	        }

	        for (i = 0; i < 16; ++i) {
	            B[i] += x[i];
	        }
	    }

	    // naive approach... going back to loop unrolling may yield additional performance
	    function blockxor(S, Si, D, len) {
	        for (var i = 0; i < len; i++) {
	            D[i] ^= S[Si + i];
	        }
	    }

	    function arraycopy(src, srcPos, dest, destPos, length) {
	        while (length--) {
	            dest[destPos++] = src[srcPos++];
	        }
	    }

	    function checkBufferish(o) {
	        if (!o || typeof(o.length) !== 'number') {
	            return false;
	        }
	        for (var i = 0; i < o.length; i++) {
	            if (typeof(o[i]) !== 'number') { return false; }

	            var v = parseInt(o[i]);
	            if (v != o[i] || v < 0 || v >= 256) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function ensureInteger(value, name) {
	        var intValue = parseInt(value);
	        if (value != intValue) { throw new Error('invalid ' + name); }
	        return intValue;
	    }

	    // N = Cpu cost, r = Memory cost, p = parallelization cost
	    // callback(error, progress, key)
	    function scrypt(password, salt, N, r, p, dkLen, callback) {

	        if (!callback) { throw new Error('missing callback'); }

	        N = ensureInteger(N, 'N');
	        r = ensureInteger(r, 'r');
	        p = ensureInteger(p, 'p');

	        dkLen = ensureInteger(dkLen, 'dkLen');

	        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

	        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
	        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

	        if (!checkBufferish(password)) {
	            throw new Error('password must be an array or buffer');
	        }
	        password = Array.prototype.slice.call(password);

	        if (!checkBufferish(salt)) {
	            throw new Error('salt must be an array or buffer');
	        }
	        salt = Array.prototype.slice.call(salt);

	        var b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
	        var B = new Uint32Array(p * 32 * r);
	        for (var i = 0; i < B.length; i++) {
	            var j = i * 4;
	            B[i] = ((b[j + 3] & 0xff) << 24) |
	                   ((b[j + 2] & 0xff) << 16) |
	                   ((b[j + 1] & 0xff) << 8) |
	                   ((b[j + 0] & 0xff) << 0);
	        }

	        var XY = new Uint32Array(64 * r);
	        var V = new Uint32Array(32 * r * N);

	        var Yi = 32 * r;

	        // scratch space
	        var x = new Uint32Array(16);       // salsa20_8
	        var _X = new Uint32Array(16);      // blockmix_salsa8

	        var totalOps = p * N * 2;
	        var currentOp = 0;
	        var lastPercent10 = null;

	        // Set this to true to abandon the scrypt on the next step
	        var stop = false;

	        // State information
	        var state = 0;
	        var i0 = 0, i1;
	        var Bi;

	        // How many blockmix_salsa8 can we do per step?
	        var limit = parseInt(1000 / r);

	        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
	        var nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

	        // This is really all I changed; making scryptsy a state machine so we occasionally
	        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
	        var incrementalSMix = function() {
	            if (stop) {
	                return callback(new Error('cancelled'), currentOp / totalOps);
	            }

	            switch (state) {
	                case 0:
	                    // for (var i = 0; i < p; i++)...
	                    Bi = i0 * 32 * r;

	                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

	                    state = 1;                                         // Move to ROMix 2
	                    i1 = 0;

	                    // Fall through

	                case 1:

	                    // Run up to 1000 steps of the first inner smix loop
	                    var steps = N - i1;
	                    if (steps > limit) { steps = limit; }
	                    for (var i = 0; i < steps; i++) {                  // ROMix - 2
	                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
	                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
	                    }

	                    // for (var i = 0; i < N; i++)
	                    i1 += steps;
	                    currentOp += steps;

	                    // Call the callback with the progress (optionally stopping us)
	                    var percent10 = parseInt(1000 * currentOp / totalOps);
	                    if (percent10 !== lastPercent10) {
	                        stop = callback(null, currentOp / totalOps);
	                        if (stop) { break; }
	                        lastPercent10 = percent10;
	                    }

	                    if (i1 < N) {
	                        break;
	                    }

	                    i1 = 0;                                          // Move to ROMix 6
	                    state = 2;

	                    // Fall through

	                case 2:

	                    // Run up to 1000 steps of the second inner smix loop
	                    var steps = N - i1;
	                    if (steps > limit) { steps = limit; }
	                    for (var i = 0; i < steps; i++) {                // ROMix - 6
	                        var offset = (2 * r - 1) * 16;               // ROMix - 7
	                        var j = XY[offset] & (N - 1);
	                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
	                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
	                    }

	                    // for (var i = 0; i < N; i++)...
	                    i1 += steps;
	                    currentOp += steps;

	                    // Call the callback with the progress (optionally stopping us)
	                    var percent10 = parseInt(1000 * currentOp / totalOps);
	                    if (percent10 !== lastPercent10) {
	                        stop = callback(null, currentOp / totalOps);
	                        if (stop) { break; }
	                        lastPercent10 = percent10;
	                    }

	                    if (i1 < N) {
	                        break;
	                    }

	                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

	                    // for (var i = 0; i < p; i++)...
	                    i0++;
	                    if (i0 < p) {
	                        state = 0;
	                        break;
	                    }

	                    b = [];
	                    for (var i = 0; i < B.length; i++) {
	                        b.push((B[i] >>  0) & 0xff);
	                        b.push((B[i] >>  8) & 0xff);
	                        b.push((B[i] >> 16) & 0xff);
	                        b.push((B[i] >> 24) & 0xff);
	                    }

	                    var derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

	                    // Done; don't break (which would reschedule)
	                    return callback(null, 1.0, derivedKey);
	                }

	                // Schedule the next steps
	                nextTick(incrementalSMix);
	            };

	            // Bootstrap the incremental smix
	            incrementalSMix();
	    }

	    // node.js
	    {
	       module.exports = scrypt;

	    // RequireJS/AMD
	    // http://www.requirejs.org/docs/api.html
	    // https://github.com/amdjs/amdjs-api/wiki/AMD
	    }

	})();
	});

	var rb = require$$0$1.randomBytes;
	var rng = function() {
	  return rb(16);
	};

	//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	// Unique ID creation requires a high quality random # generator.  We feature
	// detect to determine the best RNG source, normalizing to a function that
	// returns 128-bits of randomness, since that's what's usually required


	// Maps for number <-> hex string conversion
	var _byteToHex = [];
	var _hexToByte = {};
	for (var i = 0; i < 256; i++) {
	  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	  _hexToByte[_byteToHex[i]] = i;
	}

	// **`parse()` - Parse a UUID into it's component bytes**
	function parse(s, buf, offset) {
	  var i = (buf && offset) || 0, ii = 0;

	  buf = buf || [];
	  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	    if (ii < 16) { // Don't overflow!
	      buf[i + ii++] = _hexToByte[oct];
	    }
	  });

	  // Zero out remaining bytes if string was short
	  while (ii < 16) {
	    buf[i + ii++] = 0;
	  }

	  return buf;
	}

	// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	function unparse(buf, offset) {
	  var i = offset || 0, bth = _byteToHex;
	  return  bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]];
	}

	// **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html

	// random #'s we need to init node and clockseq
	var _seedBytes = rng();

	// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	var _nodeId = [
	  _seedBytes[0] | 0x01,
	  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	];

	// Per 4.2.2, randomize (14 bit) clockseq
	var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	// Previous uuid creation time
	var _lastMSecs = 0, _lastNSecs = 0;

	// See https://github.com/broofa/node-uuid for API details
	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];

	  options = options || {};

	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

	  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

	  // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock
	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

	  // Time since last uuid creation (in msecs)
	  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

	  // Per 4.2.1.2, Bump clockseq on clock regression
	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  }

	  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval
	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  }

	  // Per 4.2.1.2 Throw error if too many uuids are requested
	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }

	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq;

	  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	  msecs += 12219292800000;

	  // `time_low`
	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff;

	  // `time_mid`
	  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff;

	  // `time_high_and_version`
	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	  b[i++] = tmh >>> 16 & 0xff;

	  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	  b[i++] = clockseq >>> 8 | 0x80;

	  // `clock_seq_low`
	  b[i++] = clockseq & 0xff;

	  // `node`
	  var node = options.node || _nodeId;
	  for (var n = 0; n < 6; n++) {
	    b[i + n] = node[n];
	  }

	  return buf ? buf : unparse(b);
	}

	// **`v4()` - Generate random UUID**

	// See https://github.com/broofa/node-uuid for API details
	function v4(options, buf, offset) {
	  // Deprecated - 'format' argument, as supported in v1.2
	  var i = buf && offset || 0;

	  if (typeof(options) == 'string') {
	    buf = options == 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};

	  var rnds = options.random || (options.rng || rng)();

	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = (rnds[6] & 0x0f) | 0x40;
	  rnds[8] = (rnds[8] & 0x3f) | 0x80;

	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ii++) {
	      buf[i + ii] = rnds[ii];
	    }
	  }

	  return buf || unparse(rnds);
	}

	// Export public API
	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;
	uuid.parse = parse;
	uuid.unparse = unparse;

	var uuid_1 = uuid;

	var signingKey = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 *  SigningKey
	 *
	 *
	 */




	var errors$1 = __importStar(errors);
	///////////////////////////////
	var SigningKey = /** @class */ (function () {
	    function SigningKey(privateKey) {
	        errors$1.checkNew(this, SigningKey);
	        var privateKeyBytes = null;
	        if (hdnode.HDNode.isHDNode(privateKey)) {
	            properties.defineReadOnly(this, 'mnemonic', privateKey.mnemonic);
	            properties.defineReadOnly(this, 'path', privateKey.path);
	            privateKeyBytes = bytes.arrayify(privateKey.privateKey);
	        }
	        else {
	            // A lot of common tools do not prefix private keys with a 0x
	            if (typeof (privateKey) === 'string' && privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
	                privateKey = '0x' + privateKey;
	            }
	            privateKeyBytes = bytes.arrayify(privateKey);
	        }
	        try {
	            if (privateKeyBytes.length !== 32) {
	                errors$1.throwError('exactly 32 bytes required', errors$1.INVALID_ARGUMENT, { arg: 'privateKey', value: '[REDACTED]' });
	            }
	        }
	        catch (error) {
	            var params = { arg: 'privateKey', reason: error.reason, value: '[REDACTED]' };
	            if (error.value) {
	                if (typeof (error.value.length) === 'number') {
	                    params.length = error.value.length;
	                }
	                params.type = typeof (error.value);
	            }
	            errors$1.throwError('invalid private key', error.code, params);
	        }
	        properties.defineReadOnly(this, 'privateKey', bytes.hexlify(privateKeyBytes));
	        properties.defineReadOnly(this, 'keyPair', new secp256k1$1.KeyPair(privateKeyBytes));
	        properties.defineReadOnly(this, 'publicKey', this.keyPair.publicKey);
	        properties.defineReadOnly(this, 'address', secp256k1$1.computeAddress(this.keyPair.publicKey));
	        properties.setType(this, 'SigningKey');
	    }
	    SigningKey.prototype.signDigest = function (digest) {
	        return this.keyPair.sign(digest);
	    };
	    SigningKey.prototype.computeSharedSecret = function (key) {
	        return this.keyPair.computeSharedSecret(bytes.arrayify(key));
	    };
	    SigningKey.isSigningKey = function (value) {
	        return properties.isType(value, 'SigningKey');
	    };
	    return SigningKey;
	}());
	exports.SigningKey = SigningKey;
	});

	var secretStorage = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var aes_js_1 = __importDefault(aesJs);
	var scrypt_js_1 = __importDefault(scrypt);
	var uuid_1$1 = __importDefault(uuid_1);

	var HDNode = __importStar(hdnode);






	function looseArrayify(hexString) {
	    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
	        hexString = '0x' + hexString;
	    }
	    return bytes.arrayify(hexString);
	}
	function zpad(value, length) {
	    value = String(value);
	    while (value.length < length) {
	        value = '0' + value;
	    }
	    return value;
	}
	function getPassword(password) {
	    if (typeof (password) === 'string') {
	        return utf8.toUtf8Bytes(password, utf8.UnicodeNormalizationForm.NFKC);
	    }
	    return bytes.arrayify(password);
	}
	// Search an Object and its children recursively, caselessly.
	function searchPath(object, path) {
	    var currentChild = object;
	    var comps = path.toLowerCase().split('/');
	    for (var i = 0; i < comps.length; i++) {
	        // Search for a child object with a case-insensitive matching key
	        var matchingChild = null;
	        for (var key in currentChild) {
	            if (key.toLowerCase() === comps[i]) {
	                matchingChild = currentChild[key];
	                break;
	            }
	        }
	        // Didn't find one. :'(
	        if (matchingChild === null) {
	            return null;
	        }
	        // Now check this child...
	        currentChild = matchingChild;
	    }
	    return currentChild;
	}
	// @TODO: Make a type for string or arrayish
	// See: https://github.com/ethereum/pyethsaletool
	function decryptCrowdsale(json, password) {
	    var data = JSON.parse(json);
	    password = getPassword(password);
	    // Ethereum Address
	    var ethaddr = address.getAddress(searchPath(data, 'ethaddr'));
	    // Encrypted Seed
	    var encseed = looseArrayify(searchPath(data, 'encseed'));
	    if (!encseed || (encseed.length % 16) !== 0) {
	        throw new Error('invalid encseed');
	    }
	    var key = pbkdf2_1.pbkdf2(password, password, 2000, 32, 'sha256').slice(0, 16);
	    var iv = encseed.slice(0, 16);
	    var encryptedSeed = encseed.slice(16);
	    // Decrypt the seed
	    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
	    var seed = bytes.arrayify(aesCbc.decrypt(encryptedSeed));
	    seed = aes_js_1.default.padding.pkcs7.strip(seed);
	    // This wallet format is weird... Convert the binary encoded hex to a string.
	    var seedHex = '';
	    for (var i = 0; i < seed.length; i++) {
	        seedHex += String.fromCharCode(seed[i]);
	    }
	    var seedHexBytes = utf8.toUtf8Bytes(seedHex);
	    var signingKey$1 = new signingKey.SigningKey(keccak256_1.keccak256(seedHexBytes));
	    if (signingKey$1.address !== ethaddr) {
	        throw new Error('corrupt crowdsale wallet');
	    }
	    return signingKey$1;
	}
	exports.decryptCrowdsale = decryptCrowdsale;
	//@TODO: string or arrayish
	function decrypt(json, password, progressCallback) {
	    var data = JSON.parse(json);
	    var passwordBytes = getPassword(password);
	    var decrypt = function (key, ciphertext) {
	        var cipher = searchPath(data, 'crypto/cipher');
	        if (cipher === 'aes-128-ctr') {
	            var iv = looseArrayify(searchPath(data, 'crypto/cipherparams/iv'));
	            var counter = new aes_js_1.default.Counter(iv);
	            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);
	            return bytes.arrayify(aesCtr.decrypt(ciphertext));
	        }
	        return null;
	    };
	    var computeMAC = function (derivedHalf, ciphertext) {
	        return keccak256_1.keccak256(bytes.concat([derivedHalf, ciphertext]));
	    };
	    var getSigningKey = function (key, reject) {
	        var ciphertext = looseArrayify(searchPath(data, 'crypto/ciphertext'));
	        var computedMAC = bytes.hexlify(computeMAC(key.slice(16, 32), ciphertext)).substring(2);
	        if (computedMAC !== searchPath(data, 'crypto/mac').toLowerCase()) {
	            reject(new Error('invalid password'));
	            return null;
	        }
	        var privateKey = decrypt(key.slice(0, 16), ciphertext);
	        var mnemonicKey = key.slice(32, 64);
	        if (!privateKey) {
	            reject(new Error('unsupported cipher'));
	            return null;
	        }
	        var signingKey$1 = new signingKey.SigningKey(privateKey);
	        if (data.address && signingKey$1.address !== address.getAddress(data.address)) {
	            reject(new Error('address mismatch'));
	            return null;
	        }
	        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
	        var locale = searchPath(data, 'x-ethers/locale');
	        if (searchPath(data, 'x-ethers/version') === '0.1' && (locale == null || locale === "en")) {
	            var mnemonicCiphertext = looseArrayify(searchPath(data, 'x-ethers/mnemonicCiphertext'));
	            var mnemonicIv = looseArrayify(searchPath(data, 'x-ethers/mnemonicCounter'));
	            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
	            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
	            var path = searchPath(data, 'x-ethers/path') || HDNode.defaultPath;
	            var entropy = bytes.arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
	            var mnemonic = HDNode.entropyToMnemonic(entropy);
	            var node = HDNode.fromMnemonic(mnemonic).derivePath(path);
	            if (node.privateKey != bytes.hexlify(privateKey)) {
	                reject(new Error('mnemonic mismatch'));
	                return null;
	            }
	            signingKey$1 = new signingKey.SigningKey(node);
	        }
	        return signingKey$1;
	    };
	    return new Promise(function (resolve, reject) {
	        var kdf = searchPath(data, 'crypto/kdf');
	        if (kdf && typeof (kdf) === 'string') {
	            if (kdf.toLowerCase() === 'scrypt') {
	                var salt = looseArrayify(searchPath(data, 'crypto/kdfparams/salt'));
	                var N = parseInt(searchPath(data, 'crypto/kdfparams/n'));
	                var r = parseInt(searchPath(data, 'crypto/kdfparams/r'));
	                var p = parseInt(searchPath(data, 'crypto/kdfparams/p'));
	                if (!N || !r || !p) {
	                    reject(new Error('unsupported key-derivation function parameters'));
	                    return;
	                }
	                // Make sure N is a power of 2
	                if ((N & (N - 1)) !== 0) {
	                    reject(new Error('unsupported key-derivation function parameter value for N'));
	                    return;
	                }
	                var dkLen = parseInt(searchPath(data, 'crypto/kdfparams/dklen'));
	                if (dkLen !== 32) {
	                    reject(new Error('unsupported key-derivation derived-key length'));
	                    return;
	                }
	                if (progressCallback) {
	                    progressCallback(0);
	                }
	                scrypt_js_1.default(passwordBytes, salt, N, r, p, 64, function (error, progress, key) {
	                    if (error) {
	                        error.progress = progress;
	                        reject(error);
	                    }
	                    else if (key) {
	                        key = bytes.arrayify(key);
	                        var signingKey = getSigningKey(key, reject);
	                        if (!signingKey) {
	                            return;
	                        }
	                        if (progressCallback) {
	                            progressCallback(1);
	                        }
	                        resolve(signingKey);
	                    }
	                    else if (progressCallback) {
	                        return progressCallback(progress);
	                    }
	                });
	            }
	            else if (kdf.toLowerCase() === 'pbkdf2') {
	                var salt = looseArrayify(searchPath(data, 'crypto/kdfparams/salt'));
	                var prfFunc = null;
	                var prf = searchPath(data, 'crypto/kdfparams/prf');
	                if (prf === 'hmac-sha256') {
	                    prfFunc = 'sha256';
	                }
	                else if (prf === 'hmac-sha512') {
	                    prfFunc = 'sha512';
	                }
	                else {
	                    reject(new Error('unsupported prf'));
	                    return;
	                }
	                var c = parseInt(searchPath(data, 'crypto/kdfparams/c'));
	                var dkLen = parseInt(searchPath(data, 'crypto/kdfparams/dklen'));
	                if (dkLen !== 32) {
	                    reject(new Error('unsupported key-derivation derived-key length'));
	                    return;
	                }
	                var key = pbkdf2_1.pbkdf2(passwordBytes, salt, c, dkLen, prfFunc);
	                var signingKey = getSigningKey(key, reject);
	                if (!signingKey) {
	                    return;
	                }
	                resolve(signingKey);
	            }
	            else {
	                reject(new Error('unsupported key-derivation function'));
	            }
	        }
	        else {
	            reject(new Error('unsupported key-derivation function'));
	        }
	    });
	}
	exports.decrypt = decrypt;
	function encrypt(privateKey, password, options, progressCallback) {
	    // the options are optional, so adjust the call as needed
	    if (typeof (options) === 'function' && !progressCallback) {
	        progressCallback = options;
	        options = {};
	    }
	    if (!options) {
	        options = {};
	    }
	    // Check the private key
	    var privateKeyBytes = null;
	    if (signingKey.SigningKey.isSigningKey(privateKey)) {
	        privateKeyBytes = bytes.arrayify(privateKey.privateKey);
	    }
	    else {
	        privateKeyBytes = bytes.arrayify(privateKey);
	    }
	    if (privateKeyBytes.length !== 32) {
	        throw new Error('invalid private key');
	    }
	    var passwordBytes = getPassword(password);
	    var entropy = null;
	    if (options.entropy) {
	        entropy = bytes.arrayify(options.entropy);
	    }
	    if (options.mnemonic) {
	        if (entropy) {
	            if (HDNode.entropyToMnemonic(entropy) !== options.mnemonic) {
	                throw new Error('entropy and mnemonic mismatch');
	            }
	        }
	        else {
	            entropy = bytes.arrayify(HDNode.mnemonicToEntropy(options.mnemonic, options.wordlist));
	        }
	    }
	    var path = options.path;
	    if (entropy && !path) {
	        path = HDNode.defaultPath;
	    }
	    var client = options.client;
	    if (!client) {
	        client = "ethers.js";
	    }
	    // Check/generate the salt
	    var salt = null;
	    if (options.salt) {
	        salt = bytes.arrayify(options.salt);
	    }
	    else {
	        salt = randomBytes_1.randomBytes(32);
	    }
	    // Override initialization vector
	    var iv = null;
	    if (options.iv) {
	        iv = bytes.arrayify(options.iv);
	        if (iv.length !== 16) {
	            throw new Error('invalid iv');
	        }
	    }
	    else {
	        iv = randomBytes_1.randomBytes(16);
	    }
	    // Override the uuid
	    var uuidRandom = null;
	    if (options.uuid) {
	        uuidRandom = bytes.arrayify(options.uuid);
	        if (uuidRandom.length !== 16) {
	            throw new Error('invalid uuid');
	        }
	    }
	    else {
	        uuidRandom = randomBytes_1.randomBytes(16);
	    }
	    // Override the scrypt password-based key derivation function parameters
	    var N = (1 << 17), r = 8, p = 1;
	    if (options.scrypt) {
	        if (options.scrypt.N) {
	            N = options.scrypt.N;
	        }
	        if (options.scrypt.r) {
	            r = options.scrypt.r;
	        }
	        if (options.scrypt.p) {
	            p = options.scrypt.p;
	        }
	    }
	    return new Promise(function (resolve, reject) {
	        if (progressCallback) {
	            progressCallback(0);
	        }
	        // We take 64 bytes:
	        //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
	        //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
	        scrypt_js_1.default(passwordBytes, salt, N, r, p, 64, function (error, progress, key) {
	            if (error) {
	                error.progress = progress;
	                reject(error);
	            }
	            else if (key) {
	                key = bytes.arrayify(key);
	                // This will be used to encrypt the wallet (as per Web3 secret storage)
	                var derivedKey = key.slice(0, 16);
	                var macPrefix = key.slice(16, 32);
	                // This will be used to encrypt the mnemonic phrase (if any)
	                var mnemonicKey = key.slice(32, 64);
	                // Get the address for this private key
	                var address = (new signingKey.SigningKey(privateKeyBytes)).address;
	                // Encrypt the private key
	                var counter = new aes_js_1.default.Counter(iv);
	                var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
	                var ciphertext = bytes.arrayify(aesCtr.encrypt(privateKeyBytes));
	                // Compute the message authentication code, used to check the password
	                var mac = keccak256_1.keccak256(bytes.concat([macPrefix, ciphertext]));
	                // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
	                var data = {
	                    address: address.substring(2).toLowerCase(),
	                    id: uuid_1$1.default.v4({ random: uuidRandom }),
	                    version: 3,
	                    Crypto: {
	                        cipher: 'aes-128-ctr',
	                        cipherparams: {
	                            iv: bytes.hexlify(iv).substring(2),
	                        },
	                        ciphertext: bytes.hexlify(ciphertext).substring(2),
	                        kdf: 'scrypt',
	                        kdfparams: {
	                            salt: bytes.hexlify(salt).substring(2),
	                            n: N,
	                            dklen: 32,
	                            p: p,
	                            r: r
	                        },
	                        mac: mac.substring(2)
	                    }
	                };
	                // If we have a mnemonic, encrypt it into the JSON wallet
	                if (entropy) {
	                    var mnemonicIv = randomBytes_1.randomBytes(16);
	                    var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
	                    var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
	                    var mnemonicCiphertext = bytes.arrayify(mnemonicAesCtr.encrypt(entropy));
	                    var now = new Date();
	                    var timestamp = (now.getUTCFullYear() + '-' +
	                        zpad(now.getUTCMonth() + 1, 2) + '-' +
	                        zpad(now.getUTCDate(), 2) + 'T' +
	                        zpad(now.getUTCHours(), 2) + '-' +
	                        zpad(now.getUTCMinutes(), 2) + '-' +
	                        zpad(now.getUTCSeconds(), 2) + '.0Z');
	                    data['x-ethers'] = {
	                        client: client,
	                        gethFilename: ('UTC--' + timestamp + '--' + data.address),
	                        mnemonicCounter: bytes.hexlify(mnemonicIv).substring(2),
	                        mnemonicCiphertext: bytes.hexlify(mnemonicCiphertext).substring(2),
	                        path: path,
	                        version: "0.1"
	                    };
	                    if (options.wordlist && typeof (options.wordlist.locale) === "string") {
	                        data['x-ethers'].locale = options.wordlist.locale;
	                    }
	                }
	                if (progressCallback) {
	                    progressCallback(1);
	                }
	                resolve(JSON.stringify(data));
	            }
	            else if (progressCallback) {
	                return progressCallback(progress);
	            }
	        });
	    });
	}
	exports.encrypt = encrypt;
	});

	var transaction = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var errors$1 = __importStar(errors);






	var RLP = __importStar(rlp);

	///////////////////////////////
	function handleAddress(value) {
	    if (value === '0x') {
	        return null;
	    }
	    return address.getAddress(value);
	}
	function handleNumber(value) {
	    if (value === '0x') {
	        return constants.Zero;
	    }
	    return bignumber.bigNumberify(value);
	}
	var transactionFields = [
	    { name: 'nonce', maxLength: 32 },
	    { name: 'gasPrice', maxLength: 32 },
	    { name: 'gasLimit', maxLength: 32 },
	    { name: 'to', length: 20 },
	    { name: 'value', maxLength: 32 },
	    { name: 'data' },
	];
	var allowedTransactionKeys = {
	    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true
	};
	function serialize(transaction, signature) {
	    properties.checkProperties(transaction, allowedTransactionKeys);
	    var raw = [];
	    transactionFields.forEach(function (fieldInfo) {
	        var value = transaction[fieldInfo.name] || ([]);
	        value = bytes.arrayify(bytes.hexlify(value));
	        // Fixed-width field
	        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
	            errors$1.throwError('invalid length for ' + fieldInfo.name, errors$1.INVALID_ARGUMENT, { arg: ('transaction' + fieldInfo.name), value: value });
	        }
	        // Variable-width (with a maximum)
	        if (fieldInfo.maxLength) {
	            value = bytes.stripZeros(value);
	            if (value.length > fieldInfo.maxLength) {
	                errors$1.throwError('invalid length for ' + fieldInfo.name, errors$1.INVALID_ARGUMENT, { arg: ('transaction' + fieldInfo.name), value: value });
	            }
	        }
	        raw.push(bytes.hexlify(value));
	    });
	    if (transaction.chainId != null && transaction.chainId !== 0) {
	        raw.push(bytes.hexlify(transaction.chainId));
	        raw.push('0x');
	        raw.push('0x');
	    }
	    var unsignedTransaction = RLP.encode(raw);
	    // Requesting an unsigned transation
	    if (!signature) {
	        return unsignedTransaction;
	    }
	    // The splitSignature will ensure the transaction has a recoveryParam in the
	    // case that the signTransaction function only adds a v.
	    var sig = bytes.splitSignature(signature);
	    // We pushed a chainId and null r, s on for hashing only; remove those
	    var v = 27 + sig.recoveryParam;
	    if (raw.length === 9) {
	        raw.pop();
	        raw.pop();
	        raw.pop();
	        v += transaction.chainId * 2 + 8;
	    }
	    raw.push(bytes.hexlify(v));
	    raw.push(bytes.stripZeros(bytes.arrayify(sig.r)));
	    raw.push(bytes.stripZeros(bytes.arrayify(sig.s)));
	    return RLP.encode(raw);
	}
	exports.serialize = serialize;
	function parse(rawTransaction) {
	    var transaction = RLP.decode(rawTransaction);
	    if (transaction.length !== 9 && transaction.length !== 6) {
	        errors$1.throwError('invalid raw transaction', errors$1.INVALID_ARGUMENT, { arg: 'rawTransactin', value: rawTransaction });
	    }
	    var tx = {
	        nonce: handleNumber(transaction[0]).toNumber(),
	        gasPrice: handleNumber(transaction[1]),
	        gasLimit: handleNumber(transaction[2]),
	        to: handleAddress(transaction[3]),
	        value: handleNumber(transaction[4]),
	        data: transaction[5],
	        chainId: 0
	    };
	    // Legacy unsigned transaction
	    if (transaction.length === 6) {
	        return tx;
	    }
	    try {
	        tx.v = bignumber.bigNumberify(transaction[6]).toNumber();
	    }
	    catch (error) {
	        errors$1.info(error);
	        return tx;
	    }
	    tx.r = bytes.hexZeroPad(transaction[7], 32);
	    tx.s = bytes.hexZeroPad(transaction[8], 32);
	    if (bignumber.bigNumberify(tx.r).isZero() && bignumber.bigNumberify(tx.s).isZero()) {
	        // EIP-155 unsigned transaction
	        tx.chainId = tx.v;
	        tx.v = 0;
	    }
	    else {
	        // Signed Tranasaction
	        tx.chainId = Math.floor((tx.v - 35) / 2);
	        if (tx.chainId < 0) {
	            tx.chainId = 0;
	        }
	        var recoveryParam = tx.v - 27;
	        var raw = transaction.slice(0, 6);
	        if (tx.chainId !== 0) {
	            raw.push(bytes.hexlify(tx.chainId));
	            raw.push('0x');
	            raw.push('0x');
	            recoveryParam -= tx.chainId * 2 + 8;
	        }
	        var digest = keccak256_1.keccak256(RLP.encode(raw));
	        try {
	            tx.from = secp256k1$1.recoverAddress(digest, { r: bytes.hexlify(tx.r), s: bytes.hexlify(tx.s), recoveryParam: recoveryParam });
	        }
	        catch (error) {
	            errors$1.info(error);
	        }
	        tx.hash = keccak256_1.keccak256(rawTransaction);
	    }
	    return tx;
	}
	exports.parse = parse;
	function populateTransaction(transaction, provider, from) {
	    if (!abstractProvider.Provider.isProvider(provider)) {
	        errors$1.throwError('missing provider', errors$1.INVALID_ARGUMENT, {
	            argument: 'provider',
	            value: provider
	        });
	    }
	    properties.checkProperties(transaction, allowedTransactionKeys);
	    var tx = properties.shallowCopy(transaction);
	    if (tx.to != null) {
	        tx.to = provider.resolveName(tx.to);
	    }
	    if (tx.gasPrice == null) {
	        tx.gasPrice = provider.getGasPrice();
	    }
	    if (tx.nonce == null) {
	        tx.nonce = provider.getTransactionCount(from);
	    }
	    if (tx.gasLimit == null) {
	        var estimate = properties.shallowCopy(tx);
	        estimate.from = from;
	        tx.gasLimit = provider.estimateGas(estimate);
	    }
	    if (tx.chainId == null) {
	        tx.chainId = provider.getNetwork().then(function (network) { return network.chainId; });
	    }
	    return properties.resolveProperties(tx);
	}
	exports.populateTransaction = populateTransaction;
	});

	var wallet = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });







	var secretStorage$1 = __importStar(secretStorage);


	// Imported Abstracts


	var errors$1 = __importStar(errors);
	var Wallet = /** @class */ (function (_super) {
	    __extends(Wallet, _super);
	    function Wallet(privateKey, provider) {
	        var _this = _super.call(this) || this;
	        errors$1.checkNew(_this, Wallet);
	        // Make sure we have a valid signing key
	        if (signingKey.SigningKey.isSigningKey(privateKey)) {
	            properties.defineReadOnly(_this, 'signingKey', privateKey);
	        }
	        else {
	            properties.defineReadOnly(_this, 'signingKey', new signingKey.SigningKey(privateKey));
	        }
	        properties.defineReadOnly(_this, 'provider', provider);
	        return _this;
	    }
	    Object.defineProperty(Wallet.prototype, "address", {
	        get: function () { return this.signingKey.address; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Wallet.prototype, "mnemonic", {
	        get: function () { return this.signingKey.mnemonic; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Wallet.prototype, "path", {
	        get: function () { return this.signingKey.path; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Wallet.prototype, "privateKey", {
	        get: function () { return this.signingKey.privateKey; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     *  Create a new instance of this Wallet connected to provider.
	     */
	    Wallet.prototype.connect = function (provider) {
	        if (!(abstractProvider.Provider.isProvider(provider))) {
	            errors$1.throwError('invalid provider', errors$1.INVALID_ARGUMENT, { argument: 'provider', value: provider });
	        }
	        return new Wallet(this.signingKey, provider);
	    };
	    Wallet.prototype.getAddress = function () {
	        return Promise.resolve(this.address);
	    };
	    Wallet.prototype.sign = function (transaction$1) {
	        var _this = this;
	        return properties.resolveProperties(transaction$1).then(function (tx) {
	            var rawTx = transaction.serialize(tx);
	            var signature = _this.signingKey.signDigest(keccak256_1.keccak256(rawTx));
	            return transaction.serialize(tx, signature);
	        });
	    };
	    Wallet.prototype.signMessage = function (message) {
	        return Promise.resolve(bytes.joinSignature(this.signingKey.signDigest(hash.hashMessage(message))));
	    };
	    Wallet.prototype.getBalance = function (blockTag) {
	        if (!this.provider) {
	            throw new Error('missing provider');
	        }
	        return this.provider.getBalance(this.address, blockTag);
	    };
	    Wallet.prototype.getTransactionCount = function (blockTag) {
	        if (!this.provider) {
	            throw new Error('missing provider');
	        }
	        return this.provider.getTransactionCount(this.address, blockTag);
	    };
	    Wallet.prototype.sendTransaction = function (transaction$1) {
	        var _this = this;
	        if (!this.provider) {
	            throw new Error('missing provider');
	        }
	        if (transaction$1.nonce == null) {
	            transaction$1 = properties.shallowCopy(transaction$1);
	            transaction$1.nonce = this.getTransactionCount("pending");
	        }
	        return transaction.populateTransaction(transaction$1, this.provider, this.address).then(function (tx) {
	            return _this.sign(tx).then(function (signedTransaction) {
	                return _this.provider.sendTransaction(signedTransaction);
	            });
	        });
	    };
	    Wallet.prototype.encrypt = function (password, options, progressCallback) {
	        if (typeof (options) === 'function' && !progressCallback) {
	            progressCallback = options;
	            options = {};
	        }
	        if (progressCallback && typeof (progressCallback) !== 'function') {
	            throw new Error('invalid callback');
	        }
	        if (!options) {
	            options = {};
	        }
	        if (this.mnemonic) {
	            // Make sure we don't accidentally bubble the mnemonic up the call-stack
	            options = properties.shallowCopy(options);
	            // Set the mnemonic and path
	            options.mnemonic = this.mnemonic;
	            options.path = this.path;
	        }
	        return secretStorage$1.encrypt(this.privateKey, password, options, progressCallback);
	    };
	    /**
	     *  Static methods to create Wallet instances.
	     */
	    Wallet.createRandom = function (options) {
	        var entropy = randomBytes_1.randomBytes(16);
	        if (!options) {
	            options = {};
	        }
	        if (options.extraEntropy) {
	            entropy = bytes.arrayify(keccak256_1.keccak256(bytes.concat([entropy, options.extraEntropy])).substring(0, 34));
	        }
	        var mnemonic = hdnode.entropyToMnemonic(entropy, options.locale);
	        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
	    };
	    Wallet.fromEncryptedJson = function (json, password, progressCallback) {
	        if (jsonWallet.isCrowdsaleWallet(json)) {
	            try {
	                if (progressCallback) {
	                    progressCallback(0);
	                }
	                var privateKey = secretStorage$1.decryptCrowdsale(json, password);
	                if (progressCallback) {
	                    progressCallback(1);
	                }
	                return Promise.resolve(new Wallet(privateKey));
	            }
	            catch (error) {
	                return Promise.reject(error);
	            }
	        }
	        else if (jsonWallet.isSecretStorageWallet(json)) {
	            return secretStorage$1.decrypt(json, password, progressCallback).then(function (signingKey) {
	                return new Wallet(signingKey);
	            });
	        }
	        return Promise.reject('invalid wallet JSON');
	    };
	    Wallet.fromMnemonic = function (mnemonic, path, wordlist) {
	        if (!path) {
	            path = hdnode.defaultPath;
	        }
	        return new Wallet(hdnode.fromMnemonic(mnemonic, wordlist).derivePath(path));
	    };
	    return Wallet;
	}(abstractSigner.Signer));
	exports.Wallet = Wallet;
	});

	var networks_1 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var errors$1 = __importStar(errors);
	function ethDefaultProvider(network) {
	    return function (providers) {
	        var providerList = [];
	        if (providers.InfuraProvider) {
	            providerList.push(new providers.InfuraProvider(network));
	        }
	        if (providers.EtherscanProvider) {
	            providerList.push(new providers.EtherscanProvider(network));
	        }
	        if (providerList.length === 0) {
	            return null;
	        }
	        if (providers.FallbackProvider) {
	            return new providers.FallbackProvider(providerList);
	        }
	        return providerList[0];
	    };
	}
	function etcDefaultProvider(url, network) {
	    return function (providers) {
	        if (providers.JsonRpcProvider) {
	            return new providers.JsonRpcProvider(url, network);
	        }
	        return null;
	    };
	}
	var homestead = {
	    chainId: 1,
	    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	    name: "homestead",
	    _defaultProvider: ethDefaultProvider('homestead')
	};
	var ropsten = {
	    chainId: 3,
	    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	    name: "ropsten",
	    _defaultProvider: ethDefaultProvider('ropsten')
	};
	var networks = {
	    unspecified: {
	        chainId: 0,
	        name: 'unspecified'
	    },
	    homestead: homestead,
	    mainnet: homestead,
	    morden: {
	        chainId: 2,
	        name: 'morden'
	    },
	    ropsten: ropsten,
	    testnet: ropsten,
	    rinkeby: {
	        chainId: 4,
	        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	        name: 'rinkeby',
	        _defaultProvider: ethDefaultProvider('rinkeby')
	    },
	    goerli: {
	        chainId: 5,
	        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	        name: "goerli",
	        _defaultProvider: ethDefaultProvider('goerli')
	    },
	    kovan: {
	        chainId: 42,
	        name: 'kovan',
	        _defaultProvider: ethDefaultProvider('kovan')
	    },
	    classic: {
	        chainId: 61,
	        name: 'classic',
	        _defaultProvider: etcDefaultProvider('https://web3.gastracker.io', 'classic')
	    },
	    classicTestnet: {
	        chainId: 62,
	        name: 'classicTestnet',
	        _defaultProvider: etcDefaultProvider('https://web3.gastracker.io/morden', 'classicTestnet')
	    }
	};
	/**
	 *  getNetwork
	 *
	 *  Converts a named common networks or chain ID (network ID) to a Network
	 *  and verifies a network is a valid Network..
	 */
	function getNetwork(network) {
	    // No network (null)
	    if (network == null) {
	        return null;
	    }
	    if (typeof (network) === 'number') {
	        for (var name_1 in networks) {
	            var n_1 = networks[name_1];
	            if (n_1.chainId === network) {
	                return {
	                    name: n_1.name,
	                    chainId: n_1.chainId,
	                    ensAddress: (n_1.ensAddress || null),
	                    _defaultProvider: (n_1._defaultProvider || null)
	                };
	            }
	        }
	        return {
	            chainId: network,
	            name: 'unknown'
	        };
	    }
	    if (typeof (network) === 'string') {
	        var n_2 = networks[network];
	        if (n_2 == null) {
	            return null;
	        }
	        return {
	            name: n_2.name,
	            chainId: n_2.chainId,
	            ensAddress: n_2.ensAddress,
	            _defaultProvider: (n_2._defaultProvider || null)
	        };
	    }
	    var n = networks[network.name];
	    // Not a standard network; check that it is a valid network in general
	    if (!n) {
	        if (typeof (network.chainId) !== 'number') {
	            errors$1.throwError('invalid network chainId', errors$1.INVALID_ARGUMENT, { arg: 'network', value: network });
	        }
	        return network;
	    }
	    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
	    if (network.chainId !== 0 && network.chainId !== n.chainId) {
	        errors$1.throwError('network chainId mismatch', errors$1.INVALID_ARGUMENT, { arg: 'network', value: network });
	    }
	    // Standard Network (allow overriding the ENS address)
	    return {
	        name: network.name,
	        chainId: n.chainId,
	        ensAddress: (network.ensAddress || n.ensAddress || null),
	        _defaultProvider: (network._defaultProvider || n._defaultProvider || null)
	    };
	}
	exports.getNetwork = getNetwork;
	});

	/*! https://mths.be/punycode v1.4.1 by @mathias */


	/** Highest positive signed 32-bit float value */
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	var base$1 = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
	var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

	/** Error messages */
	var errors$1 = {
	  'overflow': 'Overflow: input needs wider integers to process',
	  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	  'invalid-input': 'Invalid input'
	};

	/** Convenience shortcuts */
	var baseMinusTMin = base$1 - tMin;
	var floor$1 = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
	  throw new RangeError(errors$1[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
	  var length = array.length;
	  var result = [];
	  while (length--) {
	    result[length] = fn(array[length]);
	  }
	  return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
	  var parts = string.split('@');
	  var result = '';
	  if (parts.length > 1) {
	    // In email addresses, only the domain name should be punycoded. Leave
	    // the local part (i.e. everything up to `@`) intact.
	    result = parts[0] + '@';
	    string = parts[1];
	  }
	  // Avoid `split(regex)` for IE8 compatibility. See #17.
	  string = string.replace(regexSeparators, '\x2E');
	  var labels = string.split('.');
	  var encoded = map(labels, fn).join('.');
	  return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
	  var output = [],
	    counter = 0,
	    length = string.length,
	    value,
	    extra;
	  while (counter < length) {
	    value = string.charCodeAt(counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // high surrogate, and there is a next character
	      extra = string.charCodeAt(counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // low surrogate
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // unmatched surrogate; only append this code unit, in case the next
	        // code unit is the high surrogate of a surrogate pair
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }
	  return output;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$1(delta / damp) : delta >> 1;
	  delta += floor$1(delta / numPoints);
	  for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base$1) {
	    delta = floor$1(delta / baseMinusTMin);
	  }
	  return floor$1(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
	  var n,
	    delta,
	    handledCPCount,
	    basicLength,
	    bias,
	    j,
	    m,
	    q,
	    k,
	    t,
	    currentValue,
	    output = [],
	    /** `inputLength` will hold the number of code points in `input`. */
	    inputLength,
	    /** Cached calculation results */
	    handledCPCountPlusOne,
	    baseMinusT,
	    qMinusT;

	  // Convert the input in UCS-2 to Unicode
	  input = ucs2decode(input);

	  // Cache the length
	  inputLength = input.length;

	  // Initialize the state
	  n = initialN;
	  delta = 0;
	  bias = initialBias;

	  // Handle the basic code points
	  for (j = 0; j < inputLength; ++j) {
	    currentValue = input[j];
	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  handledCPCount = basicLength = output.length;

	  // `handledCPCount` is the number of code points that have been handled;
	  // `basicLength` is the number of basic code points.

	  // Finish the basic string - if it is not empty - with a delimiter
	  if (basicLength) {
	    output.push(delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {

	    // All non-basic code points < n have been handled already. Find the next
	    // larger one:
	    for (m = maxInt, j = 0; j < inputLength; ++j) {
	      currentValue = input[j];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
	    // but guard against overflow
	    handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor$1((maxInt - delta) / handledCPCountPlusOne)) {
	      error('overflow');
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (j = 0; j < inputLength; ++j) {
	      currentValue = input[j];

	      if (currentValue < n && ++delta > maxInt) {
	        error('overflow');
	      }

	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer
	        for (q = delta, k = base$1; /* no condition */ ; k += base$1) {
	          t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) {
	            break;
	          }
	          qMinusT = q - t;
	          baseMinusT = base$1 - t;
	          output.push(
	            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
	          );
	          q = floor$1(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q, 0)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;

	  }
	  return output.join('');
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
	  return mapDomain(input, function(string) {
	    return regexNonASCII.test(string) ?
	      'xn--' + encode(string) :
	      string;
	  });
	}

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty$2(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	var isArray$3 = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	function stringifyPrimitive(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	}

	function stringify (obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return map$1(objectKeys$1(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray$3(obj[k])) {
	        return map$1(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	}
	function map$1 (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}

	var objectKeys$1 = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};

	function parse$1(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty$2(obj, k)) {
	      obj[k] = v;
	    } else if (isArray$3(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	}

	// Copyright Joyent, Inc. and other Node contributors.
	var Url = {
	  parse: urlParse,
	  resolve: urlResolve,
	  resolveObject: urlResolveObject,
	  format: urlFormat,
	  Url: Url$1
	};
	function Url$1() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	  portPattern = /:[0-9]*$/,

	  // Special case for a simple path URL
	  simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

	  // RFC 2396: characters reserved for delimiting URLs.
	  // We actually just auto-escape these.
	  delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	  // RFC 2396: characters not allowed for various reasons.
	  unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	  autoEscape = ['\''].concat(unwise),
	  // Characters that are never ever allowed in a hostname.
	  // Note that any invalid chars are also handled, but these
	  // are the ones that are *expected* to be seen, so we fast-path
	  // them.
	  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	  hostEndingChars = ['/', '?', '#'],
	  hostnameMaxLen = 255,
	  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	  // protocols that can allow "unsafe" and "unwise" chars.
	  unsafeProtocol = {
	    'javascript': true,
	    'javascript:': true
	  },
	  // protocols that never have a hostname.
	  hostlessProtocol = {
	    'javascript': true,
	    'javascript:': true
	  },
	  // protocols that always contain a // bit.
	  slashedProtocol = {
	    'http': true,
	    'https': true,
	    'ftp': true,
	    'gopher': true,
	    'file': true,
	    'http:': true,
	    'https:': true,
	    'ftp:': true,
	    'gopher:': true,
	    'file:': true
	  };

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url$1) return url;

	  var u = new Url$1;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	Url$1.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  return parse$2(this, url, parseQueryString, slashesDenoteHost);
	};

	function parse$2(self, url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	    splitter =
	    (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	    uSplit = url.split(splitter),
	    slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      self.path = rest;
	      self.href = rest;
	      self.pathname = simplePath[1];
	      if (simplePath[2]) {
	        self.search = simplePath[2];
	        if (parseQueryString) {
	          self.query = parse$1(self.search.substr(1));
	        } else {
	          self.query = self.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        self.search = '';
	        self.query = {};
	      }
	      return self;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    self.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      self.slashes = true;
	    }
	  }
	  var i, hec, l, p;
	  if (!hostlessProtocol[proto] &&
	    (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (i = 0; i < hostEndingChars.length; i++) {
	      hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      self.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (i = 0; i < nonHostChars.length; i++) {
	      hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    self.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    parseHost(self);

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    self.hostname = self.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = self.hostname[0] === '[' &&
	      self.hostname[self.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = self.hostname.split(/\./);
	      for (i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            self.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (self.hostname.length > hostnameMaxLen) {
	      self.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      self.hostname = self.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      self.hostname = toASCII(self.hostname);
	    }

	    p = self.port ? ':' + self.port : '';
	    var h = self.hostname || '';
	    self.host = h + p;
	    self.href += self.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      self.hostname = self.hostname.substr(1, self.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    self.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    self.search = rest.substr(qm);
	    self.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      self.query = parse$1(self.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    self.search = '';
	    self.query = {};
	  }
	  if (rest) self.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	    self.hostname && !self.pathname) {
	    self.pathname = '/';
	  }

	  //to support http.request
	  if (self.pathname || self.search) {
	    p = self.pathname || '';
	    var s = self.search || '';
	    self.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  self.href = format$1(self);
	  return self;
	}

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = parse$2({}, obj);
	  return format$1(obj);
	}

	function format$1(self) {
	  var auth = self.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = self.protocol || '',
	    pathname = self.pathname || '',
	    hash = self.hash || '',
	    host = false,
	    query = '';

	  if (self.host) {
	    host = auth + self.host;
	  } else if (self.hostname) {
	    host = auth + (self.hostname.indexOf(':') === -1 ?
	      self.hostname :
	      '[' + this.hostname + ']');
	    if (self.port) {
	      host += ':' + self.port;
	    }
	  }

	  if (self.query &&
	    isObject(self.query) &&
	    Object.keys(self.query).length) {
	    query = stringify(self.query);
	  }

	  var search = self.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (self.slashes ||
	    (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	}

	Url$1.prototype.format = function() {
	  return format$1(this);
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url$1.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url$1.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url$1();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url$1();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	      result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }
	  var relPath;
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	    isRelAbs = (
	      relative.host ||
	      relative.pathname && relative.pathname.charAt(0) === '/'
	    ),
	    mustEndAbs = (isRelAbs || isSourceAbs ||
	      (result.host && relative.pathname)),
	    removeAllDots = mustEndAbs,
	    srcPath = result.pathname && result.pathname.split('/') || [],
	    psychotic = result.protocol && !slashedProtocol[result.protocol];
	  relPath = relative.pathname && relative.pathname.split('/') || [];
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	  var authInHost;
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	      relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      authInHost = result.host && result.host.indexOf('@') > 0 ?
	        result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	        (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	    (result.host || relative.host || srcPath.length > 1) &&
	    (last === '.' || last === '..') || last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	    (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	    (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	      srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    authInHost = result.host && result.host.indexOf('@') > 0 ?
	      result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	      (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url$1.prototype.parseHost = function() {
	  return parseHost(this);
	};

	function parseHost(self) {
	  var host = self.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      self.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) self.hostname = host;
	}

	var hasFetch = isFunction$2(global$1.fetch) && isFunction$2(global$1.ReadableStream);

	var _blobConstructor;
	function blobConstructor() {
	  if (typeof _blobConstructor !== 'undefined') {
	    return _blobConstructor;
	  }
	  try {
	    new global$1.Blob([new ArrayBuffer(1)]);
	    _blobConstructor = true;
	  } catch (e) {
	    _blobConstructor = false;
	  }
	  return _blobConstructor
	}
	var xhr;

	function checkTypeSupport(type) {
	  if (!xhr) {
	    xhr = new global$1.XMLHttpRequest();
	    // If location.host is empty, e.g. if this page/worker was loaded
	    // from a Blob, then use example.com to avoid an error
	    xhr.open('GET', global$1.location.host ? '/' : 'https://example.com');
	  }
	  try {
	    xhr.responseType = type;
	    return xhr.responseType === type
	  } catch (e) {
	    return false
	  }

	}

	// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
	// Safari 7.1 appears to have fixed this bug.
	var haveArrayBuffer = typeof global$1.ArrayBuffer !== 'undefined';
	var haveSlice = haveArrayBuffer && isFunction$2(global$1.ArrayBuffer.prototype.slice);

	var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');
	  // These next two tests unavoidably show warnings in Chrome. Since fetch will always
	  // be used if it's available, just return false for these to avoid the warnings.
	var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
	var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&
	  checkTypeSupport('moz-chunked-arraybuffer');
	var overrideMimeType = isFunction$2(xhr.overrideMimeType);
	var vbArray = isFunction$2(global$1.VBArray);

	function isFunction$2(value) {
	  return typeof value === 'function'
	}

	xhr = null; // Help gc

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active ) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return Buffer.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = Buffer.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

	// Copyright Joyent, Inc. and other Node contributors.
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     };


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	function StringDecoder(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	}

	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

	Readable.ReadableState = ReadableState;

	var debug = debuglog('stream');
	inherits$1(Readable, EventEmitter);

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event])
	      emitter.on(event, fn);
	    else if (Array.isArray(emitter._events[event]))
	      emitter._events[event].unshift(fn);
	    else
	      emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	function listenerCount$1 (emitter, type) {
	  return emitter.listeners(type).length;
	}
	function ReadableState(options, stream) {

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  EventEmitter.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = Buffer.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false);

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf$1(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && src.listeners('data').length) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var i = indexOf$1(state.pipes, dest);
	  if (i === -1) return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = EventEmitter.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        nextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf$1(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	// A bit simpler than readable streams.
	Writable.WritableState = WritableState;
	inherits$1(Writable, EventEmitter);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  Object.defineProperty(this, 'buffer', {
	    get: deprecate(function () {
	      return this.getBuffer();
	    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	  });
	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	function Writable(options) {

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  EventEmitter.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  nextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) nextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	        nextTick(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}

	inherits$1(Duplex, Readable);

	var keys = Object.keys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	var rStates = {
	  UNSENT: 0,
	  OPENED: 1,
	  HEADERS_RECEIVED: 2,
	  LOADING: 3,
	  DONE: 4
	};
	function IncomingMessage(xhr, response, mode) {
	  var self = this;
	  Readable.call(self);

	  self._mode = mode;
	  self.headers = {};
	  self.rawHeaders = [];
	  self.trailers = {};
	  self.rawTrailers = [];

	  // Fake the 'close' event, but only once 'end' fires
	  self.on('end', function() {
	    // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
	    browser$1.nextTick(function() {
	      self.emit('close');
	    });
	  });
	  var read;
	  if (mode === 'fetch') {
	    self._fetchResponse = response;

	    self.url = response.url;
	    self.statusCode = response.status;
	    self.statusMessage = response.statusText;
	      // backwards compatible version of for (<item> of <iterable>):
	      // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
	    for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
	      self.headers[header[0].toLowerCase()] = header[1];
	      self.rawHeaders.push(header[0], header[1]);
	    }

	    // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
	    var reader = response.body.getReader();

	    read = function () {
	      reader.read().then(function(result) {
	        if (self._destroyed)
	          return
	        if (result.done) {
	          self.push(null);
	          return
	        }
	        self.push(new Buffer(result.value));
	        read();
	      });
	    };
	    read();

	  } else {
	    self._xhr = xhr;
	    self._pos = 0;

	    self.url = xhr.responseURL;
	    self.statusCode = xhr.status;
	    self.statusMessage = xhr.statusText;
	    var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
	    headers.forEach(function(header) {
	      var matches = header.match(/^([^:]+):\s*(.*)/);
	      if (matches) {
	        var key = matches[1].toLowerCase();
	        if (key === 'set-cookie') {
	          if (self.headers[key] === undefined) {
	            self.headers[key] = [];
	          }
	          self.headers[key].push(matches[2]);
	        } else if (self.headers[key] !== undefined) {
	          self.headers[key] += ', ' + matches[2];
	        } else {
	          self.headers[key] = matches[2];
	        }
	        self.rawHeaders.push(matches[1], matches[2]);
	      }
	    });

	    self._charset = 'x-user-defined';
	    if (!overrideMimeType) {
	      var mimeType = self.rawHeaders['mime-type'];
	      if (mimeType) {
	        var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
	        if (charsetMatch) {
	          self._charset = charsetMatch[1].toLowerCase();
	        }
	      }
	      if (!self._charset)
	        self._charset = 'utf-8'; // best guess
	    }
	  }
	}

	inherits$1(IncomingMessage, Readable);

	IncomingMessage.prototype._read = function() {};

	IncomingMessage.prototype._onXHRProgress = function() {
	  var self = this;

	  var xhr = self._xhr;

	  var response = null;
	  switch (self._mode) {
	  case 'text:vbarray': // For IE9
	    if (xhr.readyState !== rStates.DONE)
	      break
	    try {
	      // This fails in IE8
	      response = new global$1.VBArray(xhr.responseBody).toArray();
	    } catch (e) {
	      // pass
	    }
	    if (response !== null) {
	      self.push(new Buffer(response));
	      break
	    }
	    // Falls through in IE8
	  case 'text':
	    try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
	      response = xhr.responseText;
	    } catch (e) {
	      self._mode = 'text:vbarray';
	      break
	    }
	    if (response.length > self._pos) {
	      var newData = response.substr(self._pos);
	      if (self._charset === 'x-user-defined') {
	        var buffer = new Buffer(newData.length);
	        for (var i = 0; i < newData.length; i++)
	          buffer[i] = newData.charCodeAt(i) & 0xff;

	        self.push(buffer);
	      } else {
	        self.push(newData, self._charset);
	      }
	      self._pos = response.length;
	    }
	    break
	  case 'arraybuffer':
	    if (xhr.readyState !== rStates.DONE || !xhr.response)
	      break
	    response = xhr.response;
	    self.push(new Buffer(new Uint8Array(response)));
	    break
	  case 'moz-chunked-arraybuffer': // take whole
	    response = xhr.response;
	    if (xhr.readyState !== rStates.LOADING || !response)
	      break
	    self.push(new Buffer(new Uint8Array(response)));
	    break
	  case 'ms-stream':
	    response = xhr.response;
	    if (xhr.readyState !== rStates.LOADING)
	      break
	    var reader = new global$1.MSStreamReader();
	    reader.onprogress = function() {
	      if (reader.result.byteLength > self._pos) {
	        self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
	        self._pos = reader.result.byteLength;
	      }
	    };
	    reader.onload = function() {
	      self.push(null);
	    };
	      // reader.onerror = ??? // TODO: this
	    reader.readAsArrayBuffer(response);
	    break
	  }

	  // The ms-stream case handles end separately in reader.onload()
	  if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
	    self.push(null);
	  }
	};

	// from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
	function toArrayBuffer (buf) {
	  // If the buffer is backed by a Uint8Array, a faster version will work
	  if (buf instanceof Uint8Array) {
	    // If the buffer isn't a subarray, return the underlying ArrayBuffer
	    if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
	      return buf.buffer
	    } else if (typeof buf.buffer.slice === 'function') {
	      // Otherwise we need to get a proper copy
	      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
	    }
	  }

	  if (isBuffer(buf)) {
	    // This is the slow version that will work with any Buffer
	    // implementation (even in old browsers)
	    var arrayCopy = new Uint8Array(buf.length);
	    var len = buf.length;
	    for (var i = 0; i < len; i++) {
	      arrayCopy[i] = buf[i];
	    }
	    return arrayCopy.buffer
	  } else {
	    throw new Error('Argument must be a Buffer')
	  }
	}

	function decideMode(preferBinary, useFetch) {
	  if (hasFetch && useFetch) {
	    return 'fetch'
	  } else if (mozchunkedarraybuffer) {
	    return 'moz-chunked-arraybuffer'
	  } else if (msstream) {
	    return 'ms-stream'
	  } else if (arraybuffer && preferBinary) {
	    return 'arraybuffer'
	  } else if (vbArray && preferBinary) {
	    return 'text:vbarray'
	  } else {
	    return 'text'
	  }
	}

	function ClientRequest(opts) {
	  var self = this;
	  Writable.call(self);

	  self._opts = opts;
	  self._body = [];
	  self._headers = {};
	  if (opts.auth)
	    self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
	  Object.keys(opts.headers).forEach(function(name) {
	    self.setHeader(name, opts.headers[name]);
	  });

	  var preferBinary;
	  var useFetch = true;
	  if (opts.mode === 'disable-fetch') {
	    // If the use of XHR should be preferred and includes preserving the 'content-type' header
	    useFetch = false;
	    preferBinary = true;
	  } else if (opts.mode === 'prefer-streaming') {
	    // If streaming is a high priority but binary compatibility and
	    // the accuracy of the 'content-type' header aren't
	    preferBinary = false;
	  } else if (opts.mode === 'allow-wrong-content-type') {
	    // If streaming is more important than preserving the 'content-type' header
	    preferBinary = !overrideMimeType;
	  } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
	    // Use binary if text streaming may corrupt data or the content-type header, or for speed
	    preferBinary = true;
	  } else {
	    throw new Error('Invalid value for opts.mode')
	  }
	  self._mode = decideMode(preferBinary, useFetch);

	  self.on('finish', function() {
	    self._onFinish();
	  });
	}

	inherits$1(ClientRequest, Writable);
	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
	var unsafeHeaders = [
	  'accept-charset',
	  'accept-encoding',
	  'access-control-request-headers',
	  'access-control-request-method',
	  'connection',
	  'content-length',
	  'cookie',
	  'cookie2',
	  'date',
	  'dnt',
	  'expect',
	  'host',
	  'keep-alive',
	  'origin',
	  'referer',
	  'te',
	  'trailer',
	  'transfer-encoding',
	  'upgrade',
	  'user-agent',
	  'via'
	];
	ClientRequest.prototype.setHeader = function(name, value) {
	  var self = this;
	  var lowerName = name.toLowerCase();
	    // This check is not necessary, but it prevents warnings from browsers about setting unsafe
	    // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	    // http-browserify did it, so I will too.
	  if (unsafeHeaders.indexOf(lowerName) !== -1)
	    return

	  self._headers[lowerName] = {
	    name: name,
	    value: value
	  };
	};

	ClientRequest.prototype.getHeader = function(name) {
	  var self = this;
	  return self._headers[name.toLowerCase()].value
	};

	ClientRequest.prototype.removeHeader = function(name) {
	  var self = this;
	  delete self._headers[name.toLowerCase()];
	};

	ClientRequest.prototype._onFinish = function() {
	  var self = this;

	  if (self._destroyed)
	    return
	  var opts = self._opts;

	  var headersObj = self._headers;
	  var body;
	  if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
	    if (blobConstructor()) {
	      body = new global$1.Blob(self._body.map(function(buffer) {
	        return toArrayBuffer(buffer)
	      }), {
	        type: (headersObj['content-type'] || {}).value || ''
	      });
	    } else {
	      // get utf8 string
	      body = Buffer.concat(self._body).toString();
	    }
	  }

	  if (self._mode === 'fetch') {
	    var headers = Object.keys(headersObj).map(function(name) {
	      return [headersObj[name].name, headersObj[name].value]
	    });

	    global$1.fetch(self._opts.url, {
	      method: self._opts.method,
	      headers: headers,
	      body: body,
	      mode: 'cors',
	      credentials: opts.withCredentials ? 'include' : 'same-origin'
	    }).then(function(response) {
	      self._fetchResponse = response;
	      self._connect();
	    }, function(reason) {
	      self.emit('error', reason);
	    });
	  } else {
	    var xhr = self._xhr = new global$1.XMLHttpRequest();
	    try {
	      xhr.open(self._opts.method, self._opts.url, true);
	    } catch (err) {
	      browser$1.nextTick(function() {
	        self.emit('error', err);
	      });
	      return
	    }

	    // Can't set responseType on really old browsers
	    if ('responseType' in xhr)
	      xhr.responseType = self._mode.split(':')[0];

	    if ('withCredentials' in xhr)
	      xhr.withCredentials = !!opts.withCredentials;

	    if (self._mode === 'text' && 'overrideMimeType' in xhr)
	      xhr.overrideMimeType('text/plain; charset=x-user-defined');

	    Object.keys(headersObj).forEach(function(name) {
	      xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
	    });

	    self._response = null;
	    xhr.onreadystatechange = function() {
	      switch (xhr.readyState) {
	      case rStates.LOADING:
	      case rStates.DONE:
	        self._onXHRProgress();
	        break
	      }
	    };
	      // Necessary for streaming in Firefox, since xhr.response is ONLY defined
	      // in onprogress, not in onreadystatechange with xhr.readyState = 3
	    if (self._mode === 'moz-chunked-arraybuffer') {
	      xhr.onprogress = function() {
	        self._onXHRProgress();
	      };
	    }

	    xhr.onerror = function() {
	      if (self._destroyed)
	        return
	      self.emit('error', new Error('XHR error'));
	    };

	    try {
	      xhr.send(body);
	    } catch (err) {
	      browser$1.nextTick(function() {
	        self.emit('error', err);
	      });
	      return
	    }
	  }
	};

	/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */
	function statusValid(xhr) {
	  try {
	    var status = xhr.status;
	    return (status !== null && status !== 0)
	  } catch (e) {
	    return false
	  }
	}

	ClientRequest.prototype._onXHRProgress = function() {
	  var self = this;

	  if (!statusValid(self._xhr) || self._destroyed)
	    return

	  if (!self._response)
	    self._connect();

	  self._response._onXHRProgress();
	};

	ClientRequest.prototype._connect = function() {
	  var self = this;

	  if (self._destroyed)
	    return

	  self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
	  self.emit('response', self._response);
	};

	ClientRequest.prototype._write = function(chunk, encoding, cb) {
	  var self = this;

	  self._body.push(chunk);
	  cb();
	};

	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
	  var self = this;
	  self._destroyed = true;
	  if (self._response)
	    self._response._destroyed = true;
	  if (self._xhr)
	    self._xhr.abort();
	    // Currently, there isn't a way to truly abort a fetch.
	    // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
	};

	ClientRequest.prototype.end = function(data, encoding, cb) {
	  var self = this;
	  if (typeof data === 'function') {
	    cb = data;
	    data = undefined;
	  }

	  Writable.prototype.end.call(self, data, encoding, cb);
	};

	ClientRequest.prototype.flushHeaders = function() {};
	ClientRequest.prototype.setTimeout = function() {};
	ClientRequest.prototype.setNoDelay = function() {};
	ClientRequest.prototype.setSocketKeepAlive = function() {};

	function request(opts, cb) {
	  if (typeof opts === 'string')
	    opts = urlParse(opts);


	  // Normally, the page is loaded from http or https, so not specifying a protocol
	  // will result in a (valid) protocol-relative url. However, this won't work if
	  // the protocol is something else, like 'file:'
	  var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

	  var protocol = opts.protocol || defaultProtocol;
	  var host = opts.hostname || opts.host;
	  var port = opts.port;
	  var path = opts.path || '/';

	  // Necessary for IPv6 addresses
	  if (host && host.indexOf(':') !== -1)
	    host = '[' + host + ']';

	  // This may be a relative url. The browser should always be able to interpret it correctly.
	  opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
	  opts.method = (opts.method || 'GET').toUpperCase();
	  opts.headers = opts.headers || {};

	  // Also valid opts.auth, opts.mode

	  var req = new ClientRequest(opts);
	  if (cb)
	    req.on('response', cb);
	  return req
	}

	function get(opts, cb) {
	  var req = request(opts, cb);
	  req.end();
	  return req
	}

	function Agent() {}
	Agent.defaultMaxSockets = 4;

	var METHODS = [
	  'CHECKOUT',
	  'CONNECT',
	  'COPY',
	  'DELETE',
	  'GET',
	  'HEAD',
	  'LOCK',
	  'M-SEARCH',
	  'MERGE',
	  'MKACTIVITY',
	  'MKCOL',
	  'MOVE',
	  'NOTIFY',
	  'OPTIONS',
	  'PATCH',
	  'POST',
	  'PROPFIND',
	  'PROPPATCH',
	  'PURGE',
	  'PUT',
	  'REPORT',
	  'SEARCH',
	  'SUBSCRIBE',
	  'TRACE',
	  'UNLOCK',
	  'UNSUBSCRIBE'
	];
	var STATUS_CODES = {
	  100: 'Continue',
	  101: 'Switching Protocols',
	  102: 'Processing', // RFC 2518, obsoleted by RFC 4918
	  200: 'OK',
	  201: 'Created',
	  202: 'Accepted',
	  203: 'Non-Authoritative Information',
	  204: 'No Content',
	  205: 'Reset Content',
	  206: 'Partial Content',
	  207: 'Multi-Status', // RFC 4918
	  300: 'Multiple Choices',
	  301: 'Moved Permanently',
	  302: 'Moved Temporarily',
	  303: 'See Other',
	  304: 'Not Modified',
	  305: 'Use Proxy',
	  307: 'Temporary Redirect',
	  400: 'Bad Request',
	  401: 'Unauthorized',
	  402: 'Payment Required',
	  403: 'Forbidden',
	  404: 'Not Found',
	  405: 'Method Not Allowed',
	  406: 'Not Acceptable',
	  407: 'Proxy Authentication Required',
	  408: 'Request Time-out',
	  409: 'Conflict',
	  410: 'Gone',
	  411: 'Length Required',
	  412: 'Precondition Failed',
	  413: 'Request Entity Too Large',
	  414: 'Request-URI Too Large',
	  415: 'Unsupported Media Type',
	  416: 'Requested Range Not Satisfiable',
	  417: 'Expectation Failed',
	  418: 'I\'m a teapot', // RFC 2324
	  422: 'Unprocessable Entity', // RFC 4918
	  423: 'Locked', // RFC 4918
	  424: 'Failed Dependency', // RFC 4918
	  425: 'Unordered Collection', // RFC 4918
	  426: 'Upgrade Required', // RFC 2817
	  428: 'Precondition Required', // RFC 6585
	  429: 'Too Many Requests', // RFC 6585
	  431: 'Request Header Fields Too Large', // RFC 6585
	  500: 'Internal Server Error',
	  501: 'Not Implemented',
	  502: 'Bad Gateway',
	  503: 'Service Unavailable',
	  504: 'Gateway Time-out',
	  505: 'HTTP Version Not Supported',
	  506: 'Variant Also Negotiates', // RFC 2295
	  507: 'Insufficient Storage', // RFC 4918
	  509: 'Bandwidth Limit Exceeded',
	  510: 'Not Extended', // RFC 2774
	  511: 'Network Authentication Required' // RFC 6585
	};

	var require$$2 = {
	  request,
	  get,
	  Agent,
	  METHODS,
	  STATUS_CODES
	};

	/**
	 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
	 *
	 * This can be used with JS designed for browsers to improve reuse of code and
	 * allow the use of existing libraries.
	 *
	 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
	 *
	 * @author Dan DeFelippi <dan@driverdan.com>
	 * @contributor David Ellis <d.f.ellis@ieee.org>
	 * @license MIT
	 */


	var spawn = require$$0$1.spawn;


	var XMLHttpRequest_1 = function() {

	  /**
	   * Private variables
	   */
	  var self = this;
	  var http = require$$2;
	  var https = require$$2;

	  // Holds http.js objects
	  var request;
	  var response;

	  // Request settings
	  var settings = {};

	  // Disable header blacklist.
	  // Not part of XHR specs.
	  var disableHeaderCheck = false;

	  // Set some default headers
	  var defaultHeaders = {
	    "User-Agent": "node-XMLHttpRequest",
	    "Accept": "*/*",
	  };

	  var headers = {};
	  var headersCase = {};

	  // These headers are not user setable.
	  // The following are allowed but banned in the spec:
	  // * user-agent
	  var forbiddenRequestHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "content-transfer-encoding",
	    "cookie",
	    "cookie2",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "via"
	  ];

	  // These request methods are not allowed
	  var forbiddenRequestMethods = [
	    "TRACE",
	    "TRACK",
	    "CONNECT"
	  ];

	  // Send flag
	  var sendFlag = false;
	  // Error flag, used when errors occur or abort is called
	  var errorFlag = false;

	  // Event listeners
	  var listeners = {};

	  /**
	   * Constants
	   */

	  this.UNSENT = 0;
	  this.OPENED = 1;
	  this.HEADERS_RECEIVED = 2;
	  this.LOADING = 3;
	  this.DONE = 4;

	  /**
	   * Public vars
	   */

	  // Current state
	  this.readyState = this.UNSENT;

	  // default ready state change handler in case one is not set or is set late
	  this.onreadystatechange = null;

	  // Result & response
	  this.responseText = "";
	  this.responseXML = "";
	  this.status = null;
	  this.statusText = null;
	  
	  // Whether cross-site Access-Control requests should be made using
	  // credentials such as cookies or authorization headers
	  this.withCredentials = false;

	  /**
	   * Private methods
	   */

	  /**
	   * Check if the specified header is allowed.
	   *
	   * @param string header Header to validate
	   * @return boolean False if not allowed, otherwise true
	   */
	  var isAllowedHttpHeader = function(header) {
	    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
	  };

	  /**
	   * Check if the specified method is allowed.
	   *
	   * @param string method Request method to validate
	   * @return boolean False if not allowed, otherwise true
	   */
	  var isAllowedHttpMethod = function(method) {
	    return (method && forbiddenRequestMethods.indexOf(method) === -1);
	  };

	  /**
	   * Public methods
	   */

	  /**
	   * Open the connection. Currently supports local server requests.
	   *
	   * @param string method Connection method (eg GET, POST)
	   * @param string url URL for the connection.
	   * @param boolean async Asynchronous connection. Default is true.
	   * @param string user Username for basic authentication (optional)
	   * @param string password Password for basic authentication (optional)
	   */
	  this.open = function(method, url, async, user, password) {
	    this.abort();
	    errorFlag = false;

	    // Check for valid request method
	    if (!isAllowedHttpMethod(method)) {
	      throw new Error("SecurityError: Request method not allowed");
	    }

	    settings = {
	      "method": method,
	      "url": url.toString(),
	      "async": (typeof async !== "boolean" ? true : async),
	      "user": user || null,
	      "password": password || null
	    };

	    setState(this.OPENED);
	  };

	  /**
	   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
	   * This does not conform to the W3C spec.
	   *
	   * @param boolean state Enable or disable header checking.
	   */
	  this.setDisableHeaderCheck = function(state) {
	    disableHeaderCheck = state;
	  };

	  /**
	   * Sets a header for the request or appends the value if one is already set.
	   *
	   * @param string header Header name
	   * @param string value Header value
	   */
	  this.setRequestHeader = function(header, value) {
	    if (this.readyState !== this.OPENED) {
	      throw new Error("INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN");
	    }
	    if (!isAllowedHttpHeader(header)) {
	      console.warn("Refused to set unsafe header \"" + header + "\"");
	      return;
	    }
	    if (sendFlag) {
	      throw new Error("INVALID_STATE_ERR: send flag is true");
	    }
	    header = headersCase[header.toLowerCase()] || header;
	    headersCase[header.toLowerCase()] = header;
	    headers[header] = headers[header] ? headers[header] + ', ' + value : value;
	  };

	  /**
	   * Gets a header from the server response.
	   *
	   * @param string header Name of header to get.
	   * @return string Text of the header or null if it doesn't exist.
	   */
	  this.getResponseHeader = function(header) {
	    if (typeof header === "string"
	      && this.readyState > this.OPENED
	      && response
	      && response.headers
	      && response.headers[header.toLowerCase()]
	      && !errorFlag
	    ) {
	      return response.headers[header.toLowerCase()];
	    }

	    return null;
	  };

	  /**
	   * Gets all the response headers.
	   *
	   * @return string A string with all response headers separated by CR+LF
	   */
	  this.getAllResponseHeaders = function() {
	    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
	      return "";
	    }
	    var result = "";

	    for (var i in response.headers) {
	      // Cookie headers are excluded
	      if (i !== "set-cookie" && i !== "set-cookie2") {
	        result += i + ": " + response.headers[i] + "\r\n";
	      }
	    }
	    return result.substr(0, result.length - 2);
	  };

	  /**
	   * Gets a request header
	   *
	   * @param string name Name of header to get
	   * @return string Returns the request header or empty string if not set
	   */
	  this.getRequestHeader = function(name) {
	    if (typeof name === "string" && headersCase[name.toLowerCase()]) {
	      return headers[headersCase[name.toLowerCase()]];
	    }

	    return "";
	  };

	  /**
	   * Sends the request to the server.
	   *
	   * @param string data Optional data to send as request body.
	   */
	  this.send = function(data) {
	    if (this.readyState !== this.OPENED) {
	      throw new Error("INVALID_STATE_ERR: connection must be opened before send() is called");
	    }

	    if (sendFlag) {
	      throw new Error("INVALID_STATE_ERR: send has already been called");
	    }

	    var ssl = false, local = false;
	    var url = Url.parse(settings.url);
	    var host;
	    // Determine the server
	    switch (url.protocol) {
	      case "https:":
	        ssl = true;
	        // SSL & non-SSL both need host, no break here.
	      case "http:":
	        host = url.hostname;
	        break;

	      case "file:":
	        local = true;
	        break;

	      case undefined:
	      case null:
	      case "":
	        host = "localhost";
	        break;

	      default:
	        throw new Error("Protocol not supported.");
	    }

	    // Load files off the local filesystem (file://)
	    if (local) {
	      if (settings.method !== "GET") {
	        throw new Error("XMLHttpRequest: Only GET method is supported");
	      }

	      if (settings.async) {
	        require$$0$1.readFile(url.pathname, "utf8", function(error, data) {
	          if (error) {
	            self.handleError(error);
	          } else {
	            self.status = 200;
	            self.responseText = data;
	            setState(self.DONE);
	          }
	        });
	      } else {
	        try {
	          this.responseText = require$$0$1.readFileSync(url.pathname, "utf8");
	          this.status = 200;
	          setState(self.DONE);
	        } catch(e) {
	          this.handleError(e);
	        }
	      }

	      return;
	    }

	    // Default to port 80. If accessing localhost on another port be sure
	    // to use http://localhost:port/path
	    var port = url.port || (ssl ? 443 : 80);
	    // Add query string if one is used
	    var uri = url.pathname + (url.search ? url.search : "");

	    // Set the defaults if they haven't been set
	    for (var name in defaultHeaders) {
	      if (!headersCase[name.toLowerCase()]) {
	        headers[name] = defaultHeaders[name];
	      }
	    }

	    // Set the Host header or the server may reject the request
	    headers.Host = host;
	    if (!((ssl && port === 443) || port === 80)) {
	      headers.Host += ":" + url.port;
	    }

	    // Set Basic Auth if necessary
	    if (settings.user) {
	      if (typeof settings.password === "undefined") {
	        settings.password = "";
	      }
	      var authBuf = new Buffer(settings.user + ":" + settings.password);
	      headers.Authorization = "Basic " + authBuf.toString("base64");
	    }

	    // Set content length header
	    if (settings.method === "GET" || settings.method === "HEAD") {
	      data = null;
	    } else if (data) {
	      headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

	      if (!headers["Content-Type"]) {
	        headers["Content-Type"] = "text/plain;charset=UTF-8";
	      }
	    } else if (settings.method === "POST") {
	      // For a post with no data set Content-Length: 0.
	      // This is required by buggy servers that don't meet the specs.
	      headers["Content-Length"] = 0;
	    }

	    var options = {
	      host: host,
	      port: port,
	      path: uri,
	      method: settings.method,
	      headers: headers,
	      agent: false,
	      withCredentials: self.withCredentials
	    };

	    // Reset error flag
	    errorFlag = false;

	    // Handle async requests
	    if (settings.async) {
	      // Use the proper protocol
	      var doRequest = ssl ? https.request : http.request;

	      // Request is being sent, set send flag
	      sendFlag = true;

	      // As per spec, this is called here for historical reasons.
	      self.dispatchEvent("readystatechange");

	      // Handler for the response
	      var responseHandler = function responseHandler(resp) {
	        // Set response var to the response we got back
	        // This is so it remains accessable outside this scope
	        response = resp;
	        // Check for redirect
	        // @TODO Prevent looped redirects
	        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
	          // Change URL to the redirect location
	          settings.url = response.headers.location;
	          var url = Url.parse(settings.url);
	          // Set host var in case it's used later
	          host = url.hostname;
	          // Options for the new request
	          var newOptions = {
	            hostname: url.hostname,
	            port: url.port,
	            path: url.path,
	            method: response.statusCode === 303 ? "GET" : settings.method,
	            headers: headers,
	            withCredentials: self.withCredentials
	          };

	          // Issue the new request
	          request = doRequest(newOptions, responseHandler).on("error", errorHandler);
	          request.end();
	          // @TODO Check if an XHR event needs to be fired here
	          return;
	        }

	        response.setEncoding("utf8");

	        setState(self.HEADERS_RECEIVED);
	        self.status = response.statusCode;

	        response.on("data", function(chunk) {
	          // Make sure there's some data
	          if (chunk) {
	            self.responseText += chunk;
	          }
	          // Don't emit state changes if the connection has been aborted.
	          if (sendFlag) {
	            setState(self.LOADING);
	          }
	        });

	        response.on("end", function() {
	          if (sendFlag) {
	            // Discard the end event if the connection has been aborted
	            setState(self.DONE);
	            sendFlag = false;
	          }
	        });

	        response.on("error", function(error) {
	          self.handleError(error);
	        });
	      };

	      // Error handler for the request
	      var errorHandler = function errorHandler(error) {
	        self.handleError(error);
	      };

	      // Create the request
	      request = doRequest(options, responseHandler).on("error", errorHandler);

	      // Node 0.4 and later won't accept empty data. Make sure it's needed.
	      if (data) {
	        request.write(data);
	      }

	      request.end();

	      self.dispatchEvent("loadstart");
	    } else { // Synchronous
	      // Create a temporary file for communication with the other Node process
	      var contentFile = ".node-xmlhttprequest-content-" + browser$1.pid;
	      var syncFile = ".node-xmlhttprequest-sync-" + browser$1.pid;
	      require$$0$1.writeFileSync(syncFile, "", "utf8");
	      // The async request the other Node process executes
	      var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
	        + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
	        + "var options = " + JSON.stringify(options) + ";"
	        + "var responseText = '';"
	        + "var req = doRequest(options, function(response) {"
	        + "response.setEncoding('utf8');"
	        + "response.on('data', function(chunk) {"
	        + "  responseText += chunk;"
	        + "});"
	        + "response.on('end', function() {"
	        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');"
	        + "fs.unlinkSync('" + syncFile + "');"
	        + "});"
	        + "response.on('error', function(error) {"
	        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
	        + "fs.unlinkSync('" + syncFile + "');"
	        + "});"
	        + "}).on('error', function(error) {"
	        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
	        + "fs.unlinkSync('" + syncFile + "');"
	        + "});"
	        + (data ? "req.write('" + JSON.stringify(data).slice(1,-1).replace(/'/g, "\\'") + "');":"")
	        + "req.end();";
	      // Start the other Node Process, executing this string
	      var syncProc = spawn(browser$1.argv[0], ["-e", execString]);
	      while(require$$0$1.existsSync(syncFile)) {
	        // Wait while the sync file is empty
	      }
	      var resp = JSON.parse(require$$0$1.readFileSync(contentFile, 'utf8'));
	      // Kill the child process once the file has data
	      syncProc.stdin.end();
	      // Remove the temporary file
	      require$$0$1.unlinkSync(contentFile);

	      if (resp.err) {
	        self.handleError(resp.err);
	      } else {
	        response = resp.data;
	        self.status = resp.data.statusCode;
	        self.responseText = resp.data.text;
	        setState(self.DONE);
	      }
	    }
	  };

	  /**
	   * Called when an error is encountered to deal with it.
	   */
	  this.handleError = function(error) {
	    this.status = 0;
	    this.statusText = error;
	    this.responseText = error.stack;
	    errorFlag = true;
	    setState(this.DONE);
	    this.dispatchEvent('error');
	  };

	  /**
	   * Aborts a request.
	   */
	  this.abort = function() {
	    if (request) {
	      request.abort();
	      request = null;
	    }

	    headers = defaultHeaders;
	    this.status = 0;
	    this.responseText = "";
	    this.responseXML = "";

	    errorFlag = true;

	    if (this.readyState !== this.UNSENT
	        && (this.readyState !== this.OPENED || sendFlag)
	        && this.readyState !== this.DONE) {
	      sendFlag = false;
	      setState(this.DONE);
	    }
	    this.readyState = this.UNSENT;
	    this.dispatchEvent('abort');
	  };

	  /**
	   * Adds an event listener. Preferred method of binding to events.
	   */
	  this.addEventListener = function(event, callback) {
	    if (!(event in listeners)) {
	      listeners[event] = [];
	    }
	    // Currently allows duplicate callbacks. Should it?
	    listeners[event].push(callback);
	  };

	  /**
	   * Remove an event callback that has already been bound.
	   * Only works on the matching funciton, cannot be a copy.
	   */
	  this.removeEventListener = function(event, callback) {
	    if (event in listeners) {
	      // Filter will return a new array with the callback removed
	      listeners[event] = listeners[event].filter(function(ev) {
	        return ev !== callback;
	      });
	    }
	  };

	  /**
	   * Dispatch any events, including both "on" methods and events attached using addEventListener.
	   */
	  this.dispatchEvent = function(event) {
	    if (typeof self["on" + event] === "function") {
	      self["on" + event]();
	    }
	    if (event in listeners) {
	      for (var i = 0, len = listeners[event].length; i < len; i++) {
	        listeners[event][i].call(self);
	      }
	    }
	  };

	  /**
	   * Changes readyState and calls onreadystatechange.
	   *
	   * @param int state New state
	   */
	  var setState = function(state) {
	    if (state == self.LOADING || self.readyState !== state) {
	      self.readyState = state;

	      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
	        self.dispatchEvent("readystatechange");
	      }

	      if (self.readyState === self.DONE && !errorFlag) {
	        self.dispatchEvent("load");
	        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
	        self.dispatchEvent("loadend");
	      }
	    }
	  };
	};

	var XMLHttpRequest = {
		XMLHttpRequest: XMLHttpRequest_1
	};

	var base64 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	///////////////////////////////
	/*
	declare class Buffer implements ArrayLike<number> {
	    constructor(data: any, encoding?: string);
	    toString(encoding?: string): any;
	    [key: number]: number;
	    length: number;
	}
	*/
	function decode(textData) {
	    return bytes.arrayify(new Uint8Array(Buffer.from(textData, 'base64')));
	}
	exports.decode = decode;
	function encode(data) {
	    return Buffer.from(bytes.arrayify(data)).toString('base64');
	}
	exports.encode = encode;
	});

	var web = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var errors$1 = __importStar(errors);
	function fetchJson(connection, json, processFunc) {
	    var headers = {};
	    var url = null;
	    var timeout = 2 * 60 * 1000;
	    if (typeof (connection) === 'string') {
	        url = connection;
	    }
	    else if (typeof (connection) === 'object') {
	        if (connection.url == null) {
	            errors$1.throwError('missing URL', errors$1.MISSING_ARGUMENT, { arg: 'url' });
	        }
	        url = connection.url;
	        if (typeof (connection.timeout) === 'number' && connection.timeout > 0) {
	            timeout = connection.timeout;
	        }
	        if (connection.headers) {
	            for (var key in connection.headers) {
	                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
	            }
	        }
	        if (connection.user != null && connection.password != null) {
	            if (url.substring(0, 6) !== 'https:' && connection.allowInsecure !== true) {
	                errors$1.throwError('basic authentication requires a secure https url', errors$1.INVALID_ARGUMENT, { arg: 'url', url: url, user: connection.user, password: '[REDACTED]' });
	            }
	            var authorization = connection.user + ':' + connection.password;
	            headers['authorization'] = {
	                key: 'Authorization',
	                value: 'Basic ' + base64.encode(utf8.toUtf8Bytes(authorization))
	            };
	        }
	    }
	    return new Promise(function (resolve, reject) {
	        var request = new XMLHttpRequest.XMLHttpRequest();
	        var timer = null;
	        timer = setTimeout(function () {
	            if (timer == null) {
	                return;
	            }
	            timer = null;
	            reject(new Error('timeout'));
	            setTimeout(function () {
	                request.abort();
	            }, 0);
	        }, timeout);
	        var cancelTimeout = function () {
	            if (timer == null) {
	                return;
	            }
	            clearTimeout(timer);
	            timer = null;
	        };
	        if (json) {
	            request.open('POST', url, true);
	            headers['content-type'] = { key: 'Content-Type', value: 'application/json' };
	        }
	        else {
	            request.open('GET', url, true);
	        }
	        Object.keys(headers).forEach(function (key) {
	            var header = headers[key];
	            request.setRequestHeader(header.key, header.value);
	        });
	        request.onreadystatechange = function () {
	            if (request.readyState !== 4) {
	                return;
	            }
	            if (request.status != 200) {
	                cancelTimeout();
	                // @TODO: not any!
	                var error = new Error('invalid response - ' + request.status);
	                error.statusCode = request.status;
	                if (request.responseText) {
	                    error.responseText = request.responseText;
	                }
	                reject(error);
	                return;
	            }
	            var result = null;
	            try {
	                result = JSON.parse(request.responseText);
	            }
	            catch (error) {
	                cancelTimeout();
	                // @TODO: not any!
	                var jsonError = new Error('invalid json response');
	                jsonError.orginialError = error;
	                jsonError.responseText = request.responseText;
	                if (json != null) {
	                    jsonError.requestBody = json;
	                }
	                jsonError.url = url;
	                reject(jsonError);
	                return;
	            }
	            if (processFunc) {
	                try {
	                    result = processFunc(result);
	                }
	                catch (error) {
	                    cancelTimeout();
	                    error.url = url;
	                    error.body = json;
	                    error.responseText = request.responseText;
	                    reject(error);
	                    return;
	                }
	            }
	            cancelTimeout();
	            resolve(result);
	        };
	        request.onerror = function (error) {
	            cancelTimeout();
	            reject(error);
	        };
	        try {
	            if (json != null) {
	                request.send(json);
	            }
	            else {
	                request.send();
	            }
	        }
	        catch (error) {
	            cancelTimeout();
	            // @TODO: not any!
	            var connectionError = new Error('connection error');
	            connectionError.error = error;
	            reject(connectionError);
	        }
	    });
	}
	exports.fetchJson = fetchJson;
	function poll(func, options) {
	    if (!options) {
	        options = {};
	    }
	    options = properties.shallowCopy(options);
	    if (options.floor == null) {
	        options.floor = 0;
	    }
	    if (options.ceiling == null) {
	        options.ceiling = 10000;
	    }
	    if (options.interval == null) {
	        options.interval = 250;
	    }
	    return new Promise(function (resolve, reject) {
	        var timer = null;
	        var done = false;
	        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
	        var cancel = function () {
	            if (done) {
	                return false;
	            }
	            done = true;
	            if (timer) {
	                clearTimeout(timer);
	            }
	            return true;
	        };
	        if (options.timeout) {
	            timer = setTimeout(function () {
	                if (cancel()) {
	                    reject(new Error('timeout'));
	                }
	            }, options.timeout);
	        }
	        var fastTimeout = options.fastRetry || null;
	        var attempt = 0;
	        function check() {
	            return func().then(function (result) {
	                // If we have a result, or are allowed null then we're done
	                if (result !== undefined) {
	                    if (cancel()) {
	                        resolve(result);
	                    }
	                }
	                else if (options.onceBlock) {
	                    options.onceBlock.once('block', check);
	                    // Otherwise, exponential back-off (up to 10s) our next request
	                }
	                else if (!done) {
	                    attempt++;
	                    var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
	                    if (timeout < options.floor) {
	                        timeout = options.floor;
	                    }
	                    if (timeout > options.ceiling) {
	                        timeout = options.ceiling;
	                    }
	                    // Fast Timeout, means we quickly try again the first time
	                    if (fastTimeout) {
	                        attempt--;
	                        timeout = fastTimeout;
	                        fastTimeout = null;
	                    }
	                    setTimeout(check, timeout);
	                }
	                return null;
	            }, function (error) {
	                if (cancel()) {
	                    reject(error);
	                }
	            });
	        }
	        check();
	    });
	}
	exports.poll = poll;
	});

	var baseProvider = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });











	var errors$1 = __importStar(errors);
	///////////////////////////////
	// Imported Abstracts

	//////////////////////////////
	// Request and Response Checking
	// @TODO: not any?
	function check(format, object) {
	    var result = {};
	    for (var key in format) {
	        try {
	            var value = format[key](object[key]);
	            if (value !== undefined) {
	                result[key] = value;
	            }
	        }
	        catch (error) {
	            error.checkKey = key;
	            error.checkValue = object[key];
	            throw error;
	        }
	    }
	    return result;
	}
	function allowNull(check, nullValue) {
	    return (function (value) {
	        if (value == null) {
	            return nullValue;
	        }
	        return check(value);
	    });
	}
	function allowFalsish(check, replaceValue) {
	    return (function (value) {
	        if (!value) {
	            return replaceValue;
	        }
	        return check(value);
	    });
	}
	function arrayOf(check) {
	    return (function (array) {
	        if (!Array.isArray(array)) {
	            throw new Error('not an array');
	        }
	        var result = [];
	        array.forEach(function (value) {
	            result.push(check(value));
	        });
	        return result;
	    });
	}
	function checkHash(hash, requirePrefix) {
	    if (typeof (hash) === 'string') {
	        // geth-etc does add a "0x" prefix on receipt.root
	        if (!requirePrefix && hash.substring(0, 2) !== '0x') {
	            hash = '0x' + hash;
	        }
	        if (bytes.hexDataLength(hash) === 32) {
	            return hash.toLowerCase();
	        }
	    }
	    errors$1.throwError('invalid hash', errors$1.INVALID_ARGUMENT, { arg: 'hash', value: hash });
	    return null;
	}
	function checkNumber(number) {
	    return bignumber.bigNumberify(number).toNumber();
	}
	// Returns the difficulty as a number, or if too large (i.e. PoA network) null
	function checkDifficulty(value) {
	    var v = bignumber.bigNumberify(value);
	    try {
	        return v.toNumber();
	    }
	    catch (error) { }
	    return null;
	}
	function checkBoolean(value) {
	    if (typeof (value) === 'boolean') {
	        return value;
	    }
	    if (typeof (value) === 'string') {
	        if (value === 'true') {
	            return true;
	        }
	        if (value === 'false') {
	            return false;
	        }
	    }
	    throw new Error('invaid boolean - ' + value);
	}
	function checkUint256(uint256) {
	    if (!bytes.isHexString(uint256)) {
	        throw new Error('invalid uint256');
	    }
	    while (uint256.length < 66) {
	        uint256 = '0x0' + uint256.substring(2);
	    }
	    return uint256;
	}
	/*
	function checkString(string) {
	    if (typeof(string) !== 'string') { throw new Error('invalid string'); }
	    return string;
	}
	*/
	function checkBlockTag(blockTag) {
	    if (blockTag == null) {
	        return 'latest';
	    }
	    if (blockTag === 'earliest') {
	        return '0x0';
	    }
	    if (blockTag === 'latest' || blockTag === 'pending') {
	        return blockTag;
	    }
	    if (typeof (blockTag) === 'number') {
	        return bytes.hexStripZeros(bytes.hexlify(blockTag));
	    }
	    if (bytes.isHexString(blockTag)) {
	        return bytes.hexStripZeros(blockTag);
	    }
	    throw new Error('invalid blockTag');
	}
	var formatTransaction = {
	    hash: checkHash,
	    blockHash: allowNull(checkHash, null),
	    blockNumber: allowNull(checkNumber, null),
	    transactionIndex: allowNull(checkNumber, null),
	    confirmations: allowNull(checkNumber, null),
	    from: address.getAddress,
	    gasPrice: bignumber.bigNumberify,
	    gasLimit: bignumber.bigNumberify,
	    to: allowNull(address.getAddress, null),
	    value: bignumber.bigNumberify,
	    nonce: checkNumber,
	    data: bytes.hexlify,
	    r: allowNull(checkUint256),
	    s: allowNull(checkUint256),
	    v: allowNull(checkNumber),
	    creates: allowNull(address.getAddress, null),
	    raw: allowNull(bytes.hexlify),
	};
	function checkTransactionResponse(transaction) {
	    // Rename gas to gasLimit
	    if (transaction.gas != null && transaction.gasLimit == null) {
	        transaction.gasLimit = transaction.gas;
	    }
	    // Some clients (TestRPC) do strange things like return 0x0 for the
	    // 0 address; correct this to be a real address
	    if (transaction.to && bignumber.bigNumberify(transaction.to).isZero()) {
	        transaction.to = '0x0000000000000000000000000000000000000000';
	    }
	    // Rename input to data
	    if (transaction.input != null && transaction.data == null) {
	        transaction.data = transaction.input;
	    }
	    // If to and creates are empty, populate the creates from the transaction
	    if (transaction.to == null && transaction.creates == null) {
	        transaction.creates = address.getContractAddress(transaction);
	    }
	    // @TODO: use transaction.serialize? Have to add support for including v, r, and s...
	    if (!transaction.raw) {
	        // Very loose providers (e.g. TestRPC) don't provide a signature or raw
	        if (transaction.v && transaction.r && transaction.s) {
	            var raw = [
	                bytes.stripZeros(bytes.hexlify(transaction.nonce)),
	                bytes.stripZeros(bytes.hexlify(transaction.gasPrice)),
	                bytes.stripZeros(bytes.hexlify(transaction.gasLimit)),
	                (transaction.to || "0x"),
	                bytes.stripZeros(bytes.hexlify(transaction.value || '0x')),
	                bytes.hexlify(transaction.data || '0x'),
	                bytes.stripZeros(bytes.hexlify(transaction.v || '0x')),
	                bytes.stripZeros(bytes.hexlify(transaction.r)),
	                bytes.stripZeros(bytes.hexlify(transaction.s)),
	            ];
	            transaction.raw = rlp.encode(raw);
	        }
	    }
	    var result = check(formatTransaction, transaction);
	    var networkId = transaction.networkId;
	    // geth-etc returns chainId
	    if (transaction.chainId != null && networkId == null && result.v == null) {
	        networkId = transaction.chainId;
	    }
	    if (bytes.isHexString(networkId)) {
	        networkId = bignumber.bigNumberify(networkId).toNumber();
	    }
	    if (typeof (networkId) !== 'number' && result.v != null) {
	        networkId = (result.v - 35) / 2;
	        if (networkId < 0) {
	            networkId = 0;
	        }
	        networkId = parseInt(networkId);
	    }
	    if (typeof (networkId) !== 'number') {
	        networkId = 0;
	    }
	    result.networkId = networkId;
	    if (result.chainId == null && networkId != null) {
	        result.chainId = networkId;
	    }
	    // 0x0000... should actually be null
	    if (result.blockHash && result.blockHash.replace(/0/g, '') === 'x') {
	        result.blockHash = null;
	    }
	    return result;
	}
	var formatBlock = {
	    hash: checkHash,
	    parentHash: checkHash,
	    number: checkNumber,
	    timestamp: checkNumber,
	    nonce: allowNull(bytes.hexlify),
	    difficulty: checkDifficulty,
	    gasLimit: bignumber.bigNumberify,
	    gasUsed: bignumber.bigNumberify,
	    miner: address.getAddress,
	    extraData: bytes.hexlify,
	    transactions: allowNull(arrayOf(checkHash)),
	};
	var formatBlockWithTransactions = properties.shallowCopy(formatBlock);
	formatBlockWithTransactions.transactions = allowNull(arrayOf(checkTransactionResponse));
	function checkBlock(block, includeTransactions) {
	    if (block.author != null && block.miner == null) {
	        block.miner = block.author;
	    }
	    return check(includeTransactions ? formatBlockWithTransactions : formatBlock, block);
	}
	var formatTransactionRequest = {
	    from: allowNull(address.getAddress),
	    nonce: allowNull(checkNumber),
	    gasLimit: allowNull(bignumber.bigNumberify),
	    gasPrice: allowNull(bignumber.bigNumberify),
	    to: allowNull(address.getAddress),
	    value: allowNull(bignumber.bigNumberify),
	    data: allowNull(bytes.hexlify),
	};
	function checkTransactionRequest(transaction) {
	    return check(formatTransactionRequest, transaction);
	}
	var formatTransactionReceiptLog = {
	    transactionLogIndex: allowNull(checkNumber),
	    transactionIndex: checkNumber,
	    blockNumber: checkNumber,
	    transactionHash: checkHash,
	    address: address.getAddress,
	    topics: arrayOf(checkHash),
	    data: bytes.hexlify,
	    logIndex: checkNumber,
	    blockHash: checkHash,
	};
	function checkTransactionReceiptLog(log) {
	    return check(formatTransactionReceiptLog, log);
	}
	var formatTransactionReceipt = {
	    to: allowNull(address.getAddress, null),
	    from: allowNull(address.getAddress, null),
	    contractAddress: allowNull(address.getAddress, null),
	    transactionIndex: checkNumber,
	    root: allowNull(checkHash),
	    gasUsed: bignumber.bigNumberify,
	    logsBloom: allowNull(bytes.hexlify),
	    blockHash: checkHash,
	    transactionHash: checkHash,
	    logs: arrayOf(checkTransactionReceiptLog),
	    blockNumber: checkNumber,
	    confirmations: allowNull(checkNumber, null),
	    cumulativeGasUsed: bignumber.bigNumberify,
	    status: allowNull(checkNumber)
	};
	function checkTransactionReceipt(transactionReceipt) {
	    //var status = transactionReceipt.status;
	    //var root = transactionReceipt.root;
	    var result = check(formatTransactionReceipt, transactionReceipt);
	    result.logs.forEach(function (entry, index) {
	        if (entry.transactionLogIndex == null) {
	            entry.transactionLogIndex = index;
	        }
	    });
	    if (transactionReceipt.status != null) {
	        result.byzantium = true;
	    }
	    return result;
	}
	function checkTopics(topics) {
	    if (Array.isArray(topics)) {
	        topics.forEach(function (topic) {
	            checkTopics(topic);
	        });
	    }
	    else if (topics != null) {
	        checkHash(topics);
	    }
	    return topics;
	}
	var formatFilter = {
	    fromBlock: allowNull(checkBlockTag, undefined),
	    toBlock: allowNull(checkBlockTag, undefined),
	    address: allowNull(address.getAddress, undefined),
	    topics: allowNull(checkTopics, undefined),
	};
	var formatFilterByBlock = {
	    blockHash: allowNull(checkHash, undefined),
	    address: allowNull(address.getAddress, undefined),
	    topics: allowNull(checkTopics, undefined),
	};
	function checkFilter(filter) {
	    if (filter && filter.blockHash) {
	        return check(formatFilterByBlock, filter);
	    }
	    return check(formatFilter, filter);
	}
	var formatLog = {
	    blockNumber: allowNull(checkNumber),
	    blockHash: allowNull(checkHash),
	    transactionIndex: checkNumber,
	    removed: allowNull(checkBoolean),
	    address: address.getAddress,
	    data: allowFalsish(bytes.hexlify, '0x'),
	    topics: arrayOf(checkHash),
	    transactionHash: checkHash,
	    logIndex: checkNumber,
	};
	function checkLog(log) {
	    return check(formatLog, log);
	}
	//////////////////////////////
	// Event Serializeing
	function serializeTopics(topics) {
	    return topics.map(function (topic) {
	        if (typeof (topic) === 'string') {
	            return topic;
	        }
	        else if (Array.isArray(topic)) {
	            topic.forEach(function (topic) {
	                if (topic !== null && bytes.hexDataLength(topic) !== 32) {
	                    errors$1.throwError('invalid topic', errors$1.INVALID_ARGUMENT, { argument: 'topic', value: topic });
	                }
	            });
	            return topic.join(',');
	        }
	        else if (topic === null) {
	            return '';
	        }
	        return errors$1.throwError('invalid topic value', errors$1.INVALID_ARGUMENT, { argument: 'topic', value: topic });
	    }).join('&');
	}
	function deserializeTopics(data) {
	    return data.split(/&/g).map(function (topic) {
	        var comps = topic.split(',');
	        if (comps.length === 1) {
	            if (comps[0] === '') {
	                return null;
	            }
	            return topic;
	        }
	        return comps.map(function (topic) {
	            if (topic === '') {
	                return null;
	            }
	            return topic;
	        });
	    });
	}
	function getEventTag(eventName) {
	    if (typeof (eventName) === 'string') {
	        if (bytes.hexDataLength(eventName) === 20) {
	            return 'address:' + address.getAddress(eventName);
	        }
	        eventName = eventName.toLowerCase();
	        if (bytes.hexDataLength(eventName) === 32) {
	            return 'tx:' + eventName;
	        }
	        if (eventName.indexOf(':') === -1) {
	            return eventName;
	        }
	    }
	    else if (Array.isArray(eventName)) {
	        return 'filter::' + serializeTopics(eventName);
	    }
	    else if (eventName && typeof (eventName) === 'object') {
	        return 'filter:' + (eventName.address || '') + ':' + serializeTopics(eventName.topics || []);
	    }
	    throw new Error('invalid event - ' + eventName);
	}
	//////////////////////////////
	// Helper Object
	function getTime() {
	    return (new Date()).getTime();
	}
	var BaseProvider = /** @class */ (function (_super) {
	    __extends(BaseProvider, _super);
	    function BaseProvider(network) {
	        var _this = _super.call(this) || this;
	        errors$1.checkNew(_this, abstractProvider.Provider);
	        if (network instanceof Promise) {
	            properties.defineReadOnly(_this, 'ready', network.then(function (network) {
	                properties.defineReadOnly(_this, '_network', network);
	                return network;
	            }));
	            // Squash any "unhandled promise" errors; the don't need to be handled
	            _this.ready.catch(function (error) { });
	        }
	        else {
	            var knownNetwork = networks_1.getNetwork((network == null) ? 'homestead' : network);
	            if (knownNetwork) {
	                properties.defineReadOnly(_this, '_network', knownNetwork);
	                properties.defineReadOnly(_this, 'ready', Promise.resolve(_this._network));
	            }
	            else {
	                errors$1.throwError('invalid network', errors$1.INVALID_ARGUMENT, { arg: 'network', value: network });
	            }
	        }
	        _this._lastBlockNumber = -2;
	        // Balances being watched for changes
	        _this._balances = {};
	        // Events being listened to
	        _this._events = [];
	        _this._pollingInterval = 4000;
	        _this._emitted = { block: -2 };
	        _this._fastQueryDate = 0;
	        return _this;
	    }
	    BaseProvider.prototype._doPoll = function () {
	        var _this = this;
	        this.getBlockNumber().then(function (blockNumber) {
	            if (!_this.polling) {
	                return;
	            }
	            _this._setFastBlockNumber(blockNumber);
	            // If the block hasn't changed, meh.
	            if (blockNumber === _this._lastBlockNumber) {
	                return;
	            }
	            // First polling cycle, trigger a "block" events
	            if (_this._emitted.block === -2) {
	                _this._emitted.block = blockNumber - 1;
	            }
	            // Notify all listener for each block that has passed
	            for (var i = _this._emitted.block + 1; i <= blockNumber; i++) {
	                _this.emit('block', i);
	            }
	            // The emitted block was updated, check for obsolete events
	            if (_this._emitted.block !== blockNumber) {
	                _this._emitted.block = blockNumber;
	                Object.keys(_this._emitted).forEach(function (key) {
	                    // The block event does not expire
	                    if (key === 'block') {
	                        return;
	                    }
	                    // The block we were at when we emitted this event
	                    var eventBlockNumber = _this._emitted[key];
	                    // We cannot garbage collect pending transactions or blocks here
	                    // They should be garbage collected by the Provider when setting
	                    // "pending" events
	                    if (eventBlockNumber === 'pending') {
	                        return;
	                    }
	                    // Evict any transaction hashes or block hashes over 12 blocks
	                    // old, since they should not return null anyways
	                    if (blockNumber - eventBlockNumber > 12) {
	                        delete _this._emitted[key];
	                    }
	                });
	            }
	            // First polling cycle
	            if (_this._lastBlockNumber === -2) {
	                _this._lastBlockNumber = blockNumber - 1;
	            }
	            // Sweep balances and remove addresses we no longer have events for
	            var newBalances = {};
	            // Find all transaction hashes we are waiting on
	            var uniqueEventTags = {};
	            _this._events.forEach(function (event) {
	                uniqueEventTags[event.tag] = true;
	            });
	            Object.keys(uniqueEventTags).forEach(function (tag) {
	                var comps = tag.split(':');
	                switch (comps[0]) {
	                    case 'tx': {
	                        var hash_2 = comps[1];
	                        _this.getTransactionReceipt(hash_2).then(function (receipt) {
	                            if (!receipt || receipt.blockNumber == null) {
	                                return null;
	                            }
	                            _this._emitted['t:' + hash_2] = receipt.blockNumber;
	                            _this.emit(hash_2, receipt);
	                            return null;
	                        }).catch(function (error) { _this.emit('error', error); });
	                        break;
	                    }
	                    case 'address': {
	                        var address_2 = comps[1];
	                        if (_this._balances[address_2]) {
	                            newBalances[address_2] = _this._balances[address_2];
	                        }
	                        _this.getBalance(address_2, 'latest').then(function (balance) {
	                            var lastBalance = _this._balances[address_2];
	                            if (lastBalance && balance.eq(lastBalance)) {
	                                return;
	                            }
	                            _this._balances[address_2] = balance;
	                            _this.emit(address_2, balance);
	                            return null;
	                        }).catch(function (error) { _this.emit('error', error); });
	                        break;
	                    }
	                    case 'filter': {
	                        var topics = deserializeTopics(comps[2]);
	                        var filter_1 = {
	                            address: comps[1],
	                            fromBlock: _this._lastBlockNumber + 1,
	                            toBlock: blockNumber,
	                            topics: topics
	                        };
	                        if (!filter_1.address) {
	                            delete filter_1.address;
	                        }
	                        _this.getLogs(filter_1).then(function (logs) {
	                            if (logs.length === 0) {
	                                return;
	                            }
	                            logs.forEach(function (log) {
	                                _this._emitted['b:' + log.blockHash] = log.blockNumber;
	                                _this._emitted['t:' + log.transactionHash] = log.blockNumber;
	                                _this.emit(filter_1, log);
	                            });
	                            return null;
	                        }).catch(function (error) { _this.emit('error', error); });
	                        break;
	                    }
	                }
	            });
	            _this._lastBlockNumber = blockNumber;
	            _this._balances = newBalances;
	            return null;
	        }).catch(function (error) { });
	        this.doPoll();
	    };
	    BaseProvider.prototype.resetEventsBlock = function (blockNumber) {
	        this._lastBlockNumber = blockNumber - 1;
	        if (this.polling) {
	            this._doPoll();
	        }
	    };
	    Object.defineProperty(BaseProvider.prototype, "network", {
	        get: function () {
	            return this._network;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BaseProvider.prototype.getNetwork = function () {
	        return this.ready;
	    };
	    Object.defineProperty(BaseProvider.prototype, "blockNumber", {
	        get: function () {
	            return this._fastBlockNumber;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseProvider.prototype, "polling", {
	        get: function () {
	            return (this._poller != null);
	        },
	        set: function (value) {
	            var _this = this;
	            setTimeout(function () {
	                if (value && !_this._poller) {
	                    _this._poller = setInterval(_this._doPoll.bind(_this), _this.pollingInterval);
	                    _this._doPoll();
	                }
	                else if (!value && _this._poller) {
	                    clearInterval(_this._poller);
	                    _this._poller = null;
	                }
	            }, 0);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BaseProvider.prototype, "pollingInterval", {
	        get: function () {
	            return this._pollingInterval;
	        },
	        set: function (value) {
	            var _this = this;
	            if (typeof (value) !== 'number' || value <= 0 || parseInt(String(value)) != value) {
	                throw new Error('invalid polling interval');
	            }
	            this._pollingInterval = value;
	            if (this._poller) {
	                clearInterval(this._poller);
	                this._poller = setInterval(function () { _this._doPoll(); }, this._pollingInterval);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BaseProvider.prototype._getFastBlockNumber = function () {
	        var _this = this;
	        var now = getTime();
	        // Stale block number, request a newer value
	        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
	            this._fastQueryDate = now;
	            this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {
	                if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
	                    _this._fastBlockNumber = blockNumber;
	                }
	                return _this._fastBlockNumber;
	            });
	        }
	        return this._fastBlockNumberPromise;
	    };
	    BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {
	        // Older block, maybe a stale request
	        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
	            return;
	        }
	        // Update the time we updated the blocknumber
	        this._fastQueryDate = getTime();
	        // Newer block number, use  it
	        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
	            this._fastBlockNumber = blockNumber;
	            this._fastBlockNumberPromise = Promise.resolve(blockNumber);
	        }
	    };
	    // @TODO: Add .poller which must be an event emitter with a 'start', 'stop' and 'block' event;
	    //        this will be used once we move to the WebSocket or other alternatives to polling
	    BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations) {
	        var _this = this;
	        if (confirmations == null) {
	            confirmations = 1;
	        }
	        return this.getTransactionReceipt(transactionHash).then(function (receipt) {
	            if (confirmations === 0 || (receipt && receipt.confirmations >= confirmations)) {
	                return receipt;
	            }
	            return (new Promise(function (resolve) {
	                var handler = function (receipt) {
	                    if (receipt.confirmations < confirmations) {
	                        return;
	                    }
	                    _this.removeListener(transactionHash, handler);
	                    resolve(receipt);
	                };
	                _this.on(transactionHash, handler);
	            }));
	        });
	    };
	    BaseProvider.prototype.getBlockNumber = function () {
	        var _this = this;
	        return this.ready.then(function () {
	            return _this.perform('getBlockNumber', {}).then(function (result) {
	                var value = parseInt(result);
	                if (value != result) {
	                    throw new Error('invalid response - getBlockNumber');
	                }
	                _this._setFastBlockNumber(value);
	                return value;
	            });
	        });
	    };
	    BaseProvider.prototype.getGasPrice = function () {
	        var _this = this;
	        return this.ready.then(function () {
	            return _this.perform('getGasPrice', {}).then(function (result) {
	                return bignumber.bigNumberify(result);
	            });
	        });
	    };
	    BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties({ addressOrName: addressOrName, blockTag: blockTag }).then(function (_a) {
	                var addressOrName = _a.addressOrName, blockTag = _a.blockTag;
	                return _this._getAddress(addressOrName).then(function (address) {
	                    var params = { address: address, blockTag: checkBlockTag(blockTag) };
	                    return _this.perform('getBalance', params).then(function (result) {
	                        return bignumber.bigNumberify(result);
	                    });
	                });
	            });
	        });
	    };
	    BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties({ addressOrName: addressOrName, blockTag: blockTag }).then(function (_a) {
	                var addressOrName = _a.addressOrName, blockTag = _a.blockTag;
	                return _this._getAddress(addressOrName).then(function (address) {
	                    var params = { address: address, blockTag: checkBlockTag(blockTag) };
	                    return _this.perform('getTransactionCount', params).then(function (result) {
	                        return bignumber.bigNumberify(result).toNumber();
	                    });
	                });
	            });
	        });
	    };
	    BaseProvider.prototype.getCode = function (addressOrName, blockTag) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties({ addressOrName: addressOrName, blockTag: blockTag }).then(function (_a) {
	                var addressOrName = _a.addressOrName, blockTag = _a.blockTag;
	                return _this._getAddress(addressOrName).then(function (address) {
	                    var params = { address: address, blockTag: checkBlockTag(blockTag) };
	                    return _this.perform('getCode', params).then(function (result) {
	                        return bytes.hexlify(result);
	                    });
	                });
	            });
	        });
	    };
	    BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties({ addressOrName: addressOrName, position: position, blockTag: blockTag }).then(function (_a) {
	                var addressOrName = _a.addressOrName, position = _a.position, blockTag = _a.blockTag;
	                return _this._getAddress(addressOrName).then(function (address) {
	                    var params = {
	                        address: address,
	                        blockTag: checkBlockTag(blockTag),
	                        position: bytes.hexStripZeros(bytes.hexlify(position)),
	                    };
	                    return _this.perform('getStorageAt', params).then(function (result) {
	                        return bytes.hexlify(result);
	                    });
	                });
	            });
	        });
	    };
	    BaseProvider.prototype.sendTransaction = function (signedTransaction) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties({ signedTransaction: signedTransaction }).then(function (_a) {
	                var signedTransaction = _a.signedTransaction;
	                var params = { signedTransaction: bytes.hexlify(signedTransaction) };
	                return _this.perform('sendTransaction', params).then(function (hash) {
	                    return _this._wrapTransaction(transaction.parse(signedTransaction), hash);
	                }, function (error) {
	                    error.transaction = transaction.parse(signedTransaction);
	                    if (error.transaction.hash) {
	                        error.transactionHash = error.transaction.hash;
	                    }
	                    throw error;
	                });
	            });
	        });
	    };
	    // This should be called by any subclass wrapping a TransactionResponse
	    BaseProvider.prototype._wrapTransaction = function (tx, hash) {
	        var _this = this;
	        if (hash != null && bytes.hexDataLength(hash) !== 32) {
	            throw new Error('invalid response - sendTransaction');
	        }
	        var result = tx;
	        // Check the hash we expect is the same as the hash the server reported
	        if (hash != null && tx.hash !== hash) {
	            errors$1.throwError('Transaction hash mismatch from Provider.sendTransaction.', errors$1.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
	        }
	        // @TODO: (confirmations? number, timeout? number)
	        result.wait = function (confirmations) {
	            // We know this transaction *must* exist (whether it gets mined is
	            // another story), so setting an emitted value forces us to
	            // wait even if the node returns null for the receipt
	            if (confirmations !== 0) {
	                _this._emitted['t:' + tx.hash] = 'pending';
	            }
	            return _this.waitForTransaction(tx.hash, confirmations).then(function (receipt) {
	                if (receipt == null && confirmations === 0) {
	                    return null;
	                }
	                // No longer pending, allow the polling loop to garbage collect this
	                _this._emitted['t:' + tx.hash] = receipt.blockNumber;
	                if (receipt.status === 0) {
	                    errors$1.throwError('transaction failed', errors$1.CALL_EXCEPTION, {
	                        transactionHash: tx.hash,
	                        transaction: tx
	                    });
	                }
	                return receipt;
	            });
	        };
	        return result;
	    };
	    BaseProvider.prototype.call = function (transaction, blockTag) {
	        var _this = this;
	        var tx = properties.shallowCopy(transaction);
	        return this.ready.then(function () {
	            return properties.resolveProperties({ blockTag: blockTag, tx: tx }).then(function (_a) {
	                var blockTag = _a.blockTag, tx = _a.tx;
	                return _this._resolveNames(tx, ['to', 'from']).then(function (tx) {
	                    var params = { blockTag: checkBlockTag(blockTag), transaction: checkTransactionRequest(tx) };
	                    return _this.perform('call', params).then(function (result) {
	                        return bytes.hexlify(result);
	                    });
	                });
	            });
	        });
	    };
	    BaseProvider.prototype.estimateGas = function (transaction) {
	        var _this = this;
	        var tx = {
	            to: transaction.to,
	            from: transaction.from,
	            data: transaction.data,
	            gasPrice: transaction.gasPrice,
	            value: transaction.value
	        };
	        return this.ready.then(function () {
	            return properties.resolveProperties(tx).then(function (tx) {
	                return _this._resolveNames(tx, ['to', 'from']).then(function (tx) {
	                    var params = { transaction: checkTransactionRequest(tx) };
	                    return _this.perform('estimateGas', params).then(function (result) {
	                        return bignumber.bigNumberify(result);
	                    });
	                });
	            });
	        });
	    };
	    BaseProvider.prototype.getBlock = function (blockHashOrBlockTag, includeTransactions) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties({ blockHashOrBlockTag: blockHashOrBlockTag }).then(function (_a) {
	                var blockHashOrBlockTag = _a.blockHashOrBlockTag;
	                try {
	                    var blockHash_1 = bytes.hexlify(blockHashOrBlockTag);
	                    if (bytes.hexDataLength(blockHash_1) === 32) {
	                        return web.poll(function () {
	                            return _this.perform('getBlock', { blockHash: blockHash_1, includeTransactions: !!includeTransactions }).then(function (block) {
	                                if (block == null) {
	                                    if (_this._emitted['b:' + blockHash_1] == null) {
	                                        return null;
	                                    }
	                                    return undefined;
	                                }
	                                return checkBlock(block, includeTransactions);
	                            });
	                        }, { onceBlock: _this });
	                    }
	                }
	                catch (error) { }
	                try {
	                    var blockNumber_1 = -128;
	                    var blockTag_1 = checkBlockTag(blockHashOrBlockTag);
	                    if (bytes.isHexString(blockTag_1)) {
	                        blockNumber_1 = parseInt(blockTag_1.substring(2), 16);
	                    }
	                    return web.poll(function () {
	                        return _this.perform('getBlock', { blockTag: blockTag_1, includeTransactions: !!includeTransactions }).then(function (block) {
	                            if (block == null) {
	                                if (blockNumber_1 <= _this._emitted.block) {
	                                    return undefined;
	                                }
	                                return null;
	                            }
	                            return checkBlock(block, includeTransactions);
	                        });
	                    }, { onceBlock: _this });
	                }
	                catch (error) { }
	                throw new Error('invalid block hash or block tag');
	            });
	        });
	    };
	    BaseProvider.prototype.getTransaction = function (transactionHash) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties({ transactionHash: transactionHash }).then(function (_a) {
	                var transactionHash = _a.transactionHash;
	                var params = { transactionHash: checkHash(transactionHash, true) };
	                return web.poll(function () {
	                    return _this.perform('getTransaction', params).then(function (result) {
	                        if (result == null) {
	                            if (_this._emitted['t:' + transactionHash] == null) {
	                                return null;
	                            }
	                            return undefined;
	                        }
	                        var tx = BaseProvider.checkTransactionResponse(result);
	                        if (tx.blockNumber == null) {
	                            tx.confirmations = 0;
	                        }
	                        else if (tx.confirmations == null) {
	                            return _this._getFastBlockNumber().then(function (blockNumber) {
	                                // Add the confirmations using the fast block number (pessimistic)
	                                var confirmations = (blockNumber - tx.blockNumber) + 1;
	                                if (confirmations <= 0) {
	                                    confirmations = 1;
	                                }
	                                tx.confirmations = confirmations;
	                                return _this._wrapTransaction(tx);
	                            });
	                        }
	                        return _this._wrapTransaction(tx);
	                    });
	                }, { onceBlock: _this });
	            });
	        });
	    };
	    BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties({ transactionHash: transactionHash }).then(function (_a) {
	                var transactionHash = _a.transactionHash;
	                var params = { transactionHash: checkHash(transactionHash, true) };
	                return web.poll(function () {
	                    return _this.perform('getTransactionReceipt', params).then(function (result) {
	                        if (result == null) {
	                            if (_this._emitted['t:' + transactionHash] == null) {
	                                return null;
	                            }
	                            return undefined;
	                        }
	                        // "geth-etc" returns receipts before they are ready
	                        if (result.blockHash == null) {
	                            return undefined;
	                        }
	                        var receipt = checkTransactionReceipt(result);
	                        if (receipt.blockNumber == null) {
	                            receipt.confirmations = 0;
	                        }
	                        else if (receipt.confirmations == null) {
	                            return _this._getFastBlockNumber().then(function (blockNumber) {
	                                // Add the confirmations using the fast block number (pessimistic)
	                                var confirmations = (blockNumber - receipt.blockNumber) + 1;
	                                if (confirmations <= 0) {
	                                    confirmations = 1;
	                                }
	                                receipt.confirmations = confirmations;
	                                return receipt;
	                            });
	                        }
	                        return receipt;
	                    });
	                }, { onceBlock: _this });
	            });
	        });
	    };
	    BaseProvider.prototype.getLogs = function (filter) {
	        var _this = this;
	        return this.ready.then(function () {
	            return properties.resolveProperties(filter).then(function (filter) {
	                return _this._resolveNames(filter, ['address']).then(function (filter) {
	                    var params = { filter: checkFilter(filter) };
	                    return _this.perform('getLogs', params).then(function (result) {
	                        return arrayOf(checkLog)(result);
	                    });
	                });
	            });
	        });
	    };
	    BaseProvider.prototype.getEtherPrice = function () {
	        var _this = this;
	        return this.ready.then(function () {
	            return _this.perform('getEtherPrice', {}).then(function (result) {
	                // @TODO: Check valid float
	                return result;
	            });
	        });
	    };
	    BaseProvider.prototype._getAddress = function (addressOrName) {
	        return this.resolveName(addressOrName).then(function (address) {
	            if (address == null) {
	                errors$1.throwError("ENS name not configured", errors$1.UNSUPPORTED_OPERATION, { operation: "resolveName(" + JSON.stringify(addressOrName) + ")" });
	            }
	            return address;
	        });
	    };
	    // @TODO: Could probably use resolveProperties instead?
	    BaseProvider.prototype._resolveNames = function (object, keys) {
	        var promises = [];
	        var result = properties.shallowCopy(object);
	        keys.forEach(function (key) {
	            if (result[key] == null) {
	                return;
	            }
	            promises.push(this._getAddress(result[key]).then(function (address) {
	                result[key] = address;
	                return;
	            }));
	        }, this);
	        return Promise.all(promises).then(function () { return result; });
	    };
	    BaseProvider.prototype._getResolver = function (name) {
	        var _this = this;
	        // Get the resolver from the blockchain
	        return this.getNetwork().then(function (network) {
	            // No ENS...
	            if (!network.ensAddress) {
	                errors$1.throwError('network does not support ENS', errors$1.UNSUPPORTED_OPERATION, { operation: 'ENS', network: network.name });
	            }
	            // keccak256('resolver(bytes32)')
	            var data = '0x0178b8bf' + hash.namehash(name).substring(2);
	            var transaction = { to: network.ensAddress, data: data };
	            return _this.call(transaction).then(function (data) {
	                // extract the address from the data
	                if (bytes.hexDataLength(data) !== 32) {
	                    return null;
	                }
	                var address$1 = address.getAddress(bytes.hexDataSlice(data, 12));
	                if (address$1 === constants.AddressZero) {
	                    return null;
	                }
	                return address$1;
	            });
	        });
	    };
	    BaseProvider.prototype.resolveName = function (name) {
	        var _this = this;
	        // If it is a promise, resolve it then recurse
	        if (name instanceof Promise) {
	            return name.then(function (addressOrName) {
	                return _this.resolveName(addressOrName);
	            });
	        }
	        // If it is already an address, nothing to resolve
	        try {
	            return Promise.resolve(address.getAddress(name));
	        }
	        catch (error) {
	            // See #694
	            if (bytes.isHexString(name)) {
	                throw error;
	            }
	        }
	        var self = this;
	        var nodeHash = hash.namehash(name);
	        // Get the addr from the resovler
	        return this._getResolver(name).then(function (resolverAddress) {
	            if (resolverAddress == null) {
	                return null;
	            }
	            // keccak256('addr(bytes32)')
	            var data = '0x3b3b57de' + nodeHash.substring(2);
	            var transaction = { to: resolverAddress, data: data };
	            return self.call(transaction);
	            // extract the address from the data
	        }).then(function (data) {
	            if (bytes.hexDataLength(data) !== 32) {
	                return null;
	            }
	            var address$1 = address.getAddress(bytes.hexDataSlice(data, 12));
	            if (address$1 === constants.AddressZero) {
	                return null;
	            }
	            return address$1;
	        });
	    };
	    BaseProvider.prototype.lookupAddress = function (address$1) {
	        var _this = this;
	        if (address$1 instanceof Promise) {
	            return address$1.then(function (address) {
	                return _this.lookupAddress(address);
	            });
	        }
	        address$1 = address.getAddress(address$1);
	        var name = address$1.substring(2) + '.addr.reverse';
	        var nodehash = hash.namehash(name);
	        var self = this;
	        return this._getResolver(name).then(function (resolverAddress) {
	            if (!resolverAddress) {
	                return null;
	            }
	            // keccak('name(bytes32)')
	            var data = '0x691f3431' + nodehash.substring(2);
	            var transaction = { to: resolverAddress, data: data };
	            return self.call(transaction);
	        }).then(function (data) {
	            if (data == null) {
	                return null;
	            }
	            // Strip off the "0x"
	            data = data.substring(2);
	            // Strip off the dynamic string pointer (0x20)
	            if (data.length < 64) {
	                return null;
	            }
	            data = data.substring(64);
	            if (data.length < 64) {
	                return null;
	            }
	            var length = bignumber.bigNumberify('0x' + data.substring(0, 64)).toNumber();
	            data = data.substring(64);
	            if (2 * length > data.length) {
	                return null;
	            }
	            var name = utf8.toUtf8String('0x' + data.substring(0, 2 * length));
	            // Make sure the reverse record matches the foward record
	            return self.resolveName(name).then(function (addr) {
	                if (addr != address$1) {
	                    return null;
	                }
	                return name;
	            });
	        });
	    };
	    BaseProvider.checkTransactionResponse = function (transaction) {
	        return checkTransactionResponse(transaction);
	    };
	    BaseProvider.prototype.doPoll = function () {
	    };
	    BaseProvider.prototype.perform = function (method, params) {
	        errors$1.throwError(method + ' not implemented', errors$1.NOT_IMPLEMENTED, { operation: method });
	        return null;
	    };
	    BaseProvider.prototype._startPending = function () {
	        errors$1.warn('WARNING: this provider does not support pending events');
	    };
	    BaseProvider.prototype._stopPending = function () {
	    };
	    BaseProvider.prototype._addEventListener = function (eventName, listener, once) {
	        this._events.push({
	            tag: getEventTag(eventName),
	            listener: listener,
	            once: once,
	        });
	        if (eventName === 'pending') {
	            this._startPending();
	        }
	        this.polling = true;
	    };
	    BaseProvider.prototype.on = function (eventName, listener) {
	        this._addEventListener(eventName, listener, false);
	        return this;
	    };
	    BaseProvider.prototype.once = function (eventName, listener) {
	        this._addEventListener(eventName, listener, true);
	        return this;
	    };
	    BaseProvider.prototype.addEventListener = function (eventName, listener) {
	        return this.on(eventName, listener);
	    };
	    BaseProvider.prototype.emit = function (eventName) {
	        var _this = this;
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var result = false;
	        var eventTag = getEventTag(eventName);
	        this._events = this._events.filter(function (event) {
	            if (event.tag !== eventTag) {
	                return true;
	            }
	            setTimeout(function () {
	                event.listener.apply(_this, args);
	            }, 0);
	            result = true;
	            return !(event.once);
	        });
	        if (this.listenerCount() === 0) {
	            this.polling = false;
	        }
	        return result;
	    };
	    BaseProvider.prototype.listenerCount = function (eventName) {
	        if (!eventName) {
	            return this._events.length;
	        }
	        var eventTag = getEventTag(eventName);
	        return this._events.filter(function (event) {
	            return (event.tag === eventTag);
	        }).length;
	    };
	    BaseProvider.prototype.listeners = function (eventName) {
	        var eventTag = getEventTag(eventName);
	        return this._events.filter(function (event) {
	            return (event.tag === eventTag);
	        }).map(function (event) {
	            return event.listener;
	        });
	    };
	    BaseProvider.prototype.removeAllListeners = function (eventName) {
	        if (eventName == null) {
	            this._events = [];
	            this._stopPending();
	        }
	        else {
	            var eventTag_1 = getEventTag(eventName);
	            this._events = this._events.filter(function (event) {
	                return (event.tag !== eventTag_1);
	            });
	            if (eventName === 'pending') {
	                this._stopPending();
	            }
	        }
	        if (this._events.length === 0) {
	            this.polling = false;
	        }
	        return this;
	    };
	    BaseProvider.prototype.removeListener = function (eventName, listener) {
	        var found = false;
	        var eventTag = getEventTag(eventName);
	        this._events = this._events.filter(function (event) {
	            if (event.tag !== eventTag || event.listener != listener) {
	                return true;
	            }
	            if (found) {
	                return true;
	            }
	            found = true;
	            return false;
	        });
	        if (eventName === 'pending' && this.listenerCount('pending') === 0) {
	            this._stopPending();
	        }
	        if (this.listenerCount() === 0) {
	            this.polling = false;
	        }
	        return this;
	    };
	    return BaseProvider;
	}(abstractProvider.Provider));
	exports.BaseProvider = BaseProvider;
	properties.defineReadOnly(abstractProvider.Provider, 'inherits', properties.inheritable(abstractProvider.Provider));
	});

	var etherscanProvider = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var errors$1 = __importStar(errors);
	///////////////////////////////
	// The transaction has already been sanitized by the calls in Provider
	function getTransactionString(transaction) {
	    var result = [];
	    for (var key in transaction) {
	        if (transaction[key] == null) {
	            continue;
	        }
	        var value = bytes.hexlify(transaction[key]);
	        if ({ gasLimit: true, gasPrice: true, nonce: true, value: true }[key]) {
	            value = bytes.hexStripZeros(value);
	        }
	        result.push(key + '=' + value);
	    }
	    return result.join('&');
	}
	function getResult(result) {
	    // getLogs, getHistory have weird success responses
	    if (result.status == 0 && (result.message === 'No records found' || result.message === 'No transactions found')) {
	        return result.result;
	    }
	    if (result.status != 1 || result.message != 'OK') {
	        // @TODO: not any
	        var error = new Error('invalid response');
	        error.result = JSON.stringify(result);
	        throw error;
	    }
	    return result.result;
	}
	function getJsonResult(result) {
	    if (result.jsonrpc != '2.0') {
	        // @TODO: not any
	        var error = new Error('invalid response');
	        error.result = JSON.stringify(result);
	        throw error;
	    }
	    if (result.error) {
	        // @TODO: not any
	        var error = new Error(result.error.message || 'unknown error');
	        if (result.error.code) {
	            error.code = result.error.code;
	        }
	        if (result.error.data) {
	            error.data = result.error.data;
	        }
	        throw error;
	    }
	    return result.result;
	}
	// The blockTag was normalized as a string by the Provider pre-perform operations
	function checkLogTag(blockTag) {
	    if (blockTag === 'pending') {
	        throw new Error('pending not supported');
	    }
	    if (blockTag === 'latest') {
	        return blockTag;
	    }
	    return parseInt(blockTag.substring(2), 16);
	}
	var defaultApiKey = "8FG3JMZ9USS4NTA6YKEKHINU56SEPPVBJR";
	var EtherscanProvider = /** @class */ (function (_super) {
	    __extends(EtherscanProvider, _super);
	    function EtherscanProvider(network, apiKey) {
	        var _this = _super.call(this, network) || this;
	        errors$1.checkNew(_this, EtherscanProvider);
	        var name = 'invalid';
	        if (_this.network) {
	            name = _this.network.name;
	        }
	        var baseUrl = null;
	        switch (name) {
	            case 'homestead':
	                baseUrl = 'https://api.etherscan.io';
	                break;
	            case 'ropsten':
	                baseUrl = 'https://api-ropsten.etherscan.io';
	                break;
	            case 'rinkeby':
	                baseUrl = 'https://api-rinkeby.etherscan.io';
	                break;
	            case 'kovan':
	                baseUrl = 'https://api-kovan.etherscan.io';
	                break;
	            case 'goerli':
	                baseUrl = 'https://api-goerli.etherscan.io';
	                break;
	            default:
	                throw new Error('unsupported network');
	        }
	        properties.defineReadOnly(_this, 'baseUrl', baseUrl);
	        properties.defineReadOnly(_this, 'apiKey', apiKey || defaultApiKey);
	        return _this;
	    }
	    EtherscanProvider.prototype.perform = function (method, params) {
	        var _this = this;
	        var url = this.baseUrl;
	        var apiKey = '';
	        if (this.apiKey) {
	            apiKey += '&apikey=' + this.apiKey;
	        }
	        var get = function (url, procFunc) {
	            return web.fetchJson(url, null, procFunc || getJsonResult).then(function (result) {
	                _this.emit('debug', {
	                    action: 'perform',
	                    request: url,
	                    response: result,
	                    provider: _this
	                });
	                return result;
	            });
	        };
	        switch (method) {
	            case 'getBlockNumber':
	                url += '/api?module=proxy&action=eth_blockNumber' + apiKey;
	                return get(url);
	            case 'getGasPrice':
	                url += '/api?module=proxy&action=eth_gasPrice' + apiKey;
	                return get(url);
	            case 'getBalance':
	                // Returns base-10 result
	                url += '/api?module=account&action=balance&address=' + params.address;
	                url += '&tag=' + params.blockTag + apiKey;
	                return get(url, getResult);
	            case 'getTransactionCount':
	                url += '/api?module=proxy&action=eth_getTransactionCount&address=' + params.address;
	                url += '&tag=' + params.blockTag + apiKey;
	                return get(url);
	            case 'getCode':
	                url += '/api?module=proxy&action=eth_getCode&address=' + params.address;
	                url += '&tag=' + params.blockTag + apiKey;
	                return get(url, getJsonResult);
	            case 'getStorageAt':
	                url += '/api?module=proxy&action=eth_getStorageAt&address=' + params.address;
	                url += '&position=' + params.position;
	                url += '&tag=' + params.blockTag + apiKey;
	                return get(url, getJsonResult);
	            case 'sendTransaction':
	                url += '/api?module=proxy&action=eth_sendRawTransaction&hex=' + params.signedTransaction;
	                url += apiKey;
	                return get(url).catch(function (error) {
	                    if (error.responseText) {
	                        // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
	                        if (error.responseText.toLowerCase().indexOf('insufficient funds') >= 0) {
	                            errors$1.throwError('insufficient funds', errors$1.INSUFFICIENT_FUNDS, {});
	                        }
	                        // "Transaction with the same hash was already imported."
	                        if (error.responseText.indexOf('same hash was already imported') >= 0) {
	                            errors$1.throwError('nonce has already been used', errors$1.NONCE_EXPIRED, {});
	                        }
	                        // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
	                        if (error.responseText.indexOf('another transaction with same nonce') >= 0) {
	                            errors$1.throwError('replacement fee too low', errors$1.REPLACEMENT_UNDERPRICED, {});
	                        }
	                    }
	                    throw error;
	                });
	            case 'getBlock':
	                if (params.blockTag) {
	                    url += '/api?module=proxy&action=eth_getBlockByNumber&tag=' + params.blockTag;
	                    if (params.includeTransactions) {
	                        url += '&boolean=true';
	                    }
	                    else {
	                        url += '&boolean=false';
	                    }
	                    url += apiKey;
	                    return get(url);
	                }
	                return Promise.reject(new Error('getBlock by blockHash not implemeneted'));
	            case 'getTransaction':
	                url += '/api?module=proxy&action=eth_getTransactionByHash&txhash=' + params.transactionHash;
	                url += apiKey;
	                return get(url);
	            case 'getTransactionReceipt':
	                url += '/api?module=proxy&action=eth_getTransactionReceipt&txhash=' + params.transactionHash;
	                url += apiKey;
	                return get(url);
	            case 'call': {
	                var transaction = getTransactionString(params.transaction);
	                if (transaction) {
	                    transaction = '&' + transaction;
	                }
	                url += '/api?module=proxy&action=eth_call' + transaction;
	                //url += '&tag=' + params.blockTag + apiKey;
	                if (params.blockTag !== 'latest') {
	                    return Promise.reject(new Error('EtherscanProvider does not support blockTag for call'));
	                }
	                url += apiKey;
	                return get(url);
	            }
	            case 'estimateGas': {
	                var transaction = getTransactionString(params.transaction);
	                if (transaction) {
	                    transaction = '&' + transaction;
	                }
	                url += '/api?module=proxy&action=eth_estimateGas&' + transaction;
	                url += apiKey;
	                return get(url);
	            }
	            case 'getLogs':
	                url += '/api?module=logs&action=getLogs';
	                try {
	                    if (params.filter.fromBlock) {
	                        url += '&fromBlock=' + checkLogTag(params.filter.fromBlock);
	                    }
	                    if (params.filter.toBlock) {
	                        url += '&toBlock=' + checkLogTag(params.filter.toBlock);
	                    }
	                    if (params.filter.blockHash) {
	                        try {
	                            errors$1.throwError("Etherscan does not support blockHash filters", errors$1.UNSUPPORTED_OPERATION, {
	                                operation: "getLogs(blockHash)"
	                            });
	                        }
	                        catch (error) {
	                            return Promise.reject(error);
	                        }
	                    }
	                    if (params.filter.address) {
	                        url += '&address=' + params.filter.address;
	                    }
	                    // @TODO: We can handle slightly more complicated logs using the logs API
	                    if (params.filter.topics && params.filter.topics.length > 0) {
	                        if (params.filter.topics.length > 1) {
	                            throw new Error('unsupported topic format');
	                        }
	                        var topic0 = params.filter.topics[0];
	                        if (typeof (topic0) !== 'string' || topic0.length !== 66) {
	                            throw new Error('unsupported topic0 format');
	                        }
	                        url += '&topic0=' + topic0;
	                    }
	                }
	                catch (error) {
	                    return Promise.reject(error);
	                }
	                url += apiKey;
	                var self = this;
	                return get(url, getResult).then(function (logs) {
	                    var txs = {};
	                    var seq = Promise.resolve();
	                    logs.forEach(function (log) {
	                        seq = seq.then(function () {
	                            if (log.blockHash != null) {
	                                return null;
	                            }
	                            log.blockHash = txs[log.transactionHash];
	                            if (log.blockHash == null) {
	                                return self.getTransaction(log.transactionHash).then(function (tx) {
	                                    txs[log.transactionHash] = tx.blockHash;
	                                    log.blockHash = tx.blockHash;
	                                    return null;
	                                });
	                            }
	                            return null;
	                        });
	                    });
	                    return seq.then(function () {
	                        return logs;
	                    });
	                });
	            case 'getEtherPrice':
	                if (this.network.name !== 'homestead') {
	                    return Promise.resolve(0.0);
	                }
	                url += '/api?module=stats&action=ethprice';
	                url += apiKey;
	                return get(url, getResult).then(function (result) {
	                    return parseFloat(result.ethusd);
	                });
	        }
	        return _super.prototype.perform.call(this, method, params);
	    };
	    // @TODO: Allow startBlock and endBlock to be Promises
	    EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {
	        var _this = this;
	        var url = this.baseUrl;
	        var apiKey = '';
	        if (this.apiKey) {
	            apiKey += '&apikey=' + this.apiKey;
	        }
	        if (startBlock == null) {
	            startBlock = 0;
	        }
	        if (endBlock == null) {
	            endBlock = 99999999;
	        }
	        return this.resolveName(addressOrName).then(function (address) {
	            url += '/api?module=account&action=txlist&address=' + address;
	            url += '&startblock=' + startBlock;
	            url += '&endblock=' + endBlock;
	            url += '&sort=asc' + apiKey;
	            return web.fetchJson(url, null, getResult).then(function (result) {
	                _this.emit('debug', {
	                    action: 'getHistory',
	                    request: url,
	                    response: result,
	                    provider: _this
	                });
	                var output = [];
	                result.forEach(function (tx) {
	                    ['contractAddress', 'to'].forEach(function (key) {
	                        if (tx[key] == '') {
	                            delete tx[key];
	                        }
	                    });
	                    if (tx.creates == null && tx.contractAddress != null) {
	                        tx.creates = tx.contractAddress;
	                    }
	                    var item = baseProvider.BaseProvider.checkTransactionResponse(tx);
	                    if (tx.timeStamp) {
	                        item.timestamp = parseInt(tx.timeStamp);
	                    }
	                    output.push(item);
	                });
	                return output;
	            });
	        });
	    };
	    return EtherscanProvider;
	}(baseProvider.BaseProvider));
	exports.EtherscanProvider = EtherscanProvider;
	});

	var fallbackProvider = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var errors$1 = __importStar(errors);
	// Returns:
	//  - true is all networks match
	//  - false if any network is null
	//  - throws if any 2 networks do not match
	function checkNetworks(networks) {
	    var result = true;
	    var check = null;
	    networks.forEach(function (network) {
	        // Null
	        if (network == null) {
	            result = false;
	            return;
	        }
	        // Have nothing to compre to yet
	        if (check == null) {
	            check = network;
	            return;
	        }
	        // Matches!
	        if (check.name === network.name &&
	            check.chainId === network.chainId &&
	            ((check.ensAddress === network.ensAddress) ||
	                (check.ensAddress == null && network.ensAddress == null))) {
	            return;
	        }
	        errors$1.throwError('provider mismatch', errors$1.INVALID_ARGUMENT, { arg: 'networks', value: networks });
	    });
	    return result;
	}
	var FallbackProvider = /** @class */ (function (_super) {
	    __extends(FallbackProvider, _super);
	    function FallbackProvider(providers) {
	        var _this = this;
	        if (providers.length === 0) {
	            throw new Error('no providers');
	        }
	        // All networks are ready, we can know the network for certain
	        var ready = checkNetworks(providers.map(function (p) { return p.network; }));
	        if (ready) {
	            _this = _super.call(this, providers[0].network) || this;
	        }
	        else {
	            // The network won't be known until all child providers know
	            var ready_1 = Promise.all(providers.map(function (p) { return p.getNetwork(); })).then(function (networks) {
	                if (!checkNetworks(networks)) {
	                    errors$1.throwError('getNetwork returned null', errors$1.UNKNOWN_ERROR, {});
	                }
	                return networks[0];
	            });
	            _this = _super.call(this, ready_1) || this;
	        }
	        errors$1.checkNew(_this, FallbackProvider);
	        // Preserve a copy, so we don't get mutated
	        _this._providers = providers.slice(0);
	        return _this;
	    }
	    Object.defineProperty(FallbackProvider.prototype, "providers", {
	        get: function () {
	            // Return a copy, so we don't get mutated
	            return this._providers.slice(0);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FallbackProvider.prototype.perform = function (method, params) {
	        // Creates a copy of the providers array
	        var providers = this.providers;
	        return new Promise(function (resolve, reject) {
	            var firstError = null;
	            function next() {
	                if (!providers.length) {
	                    reject(firstError);
	                    return;
	                }
	                var provider = providers.shift();
	                provider.perform(method, params).then(function (result) {
	                    return resolve(result);
	                }).catch(function (error) {
	                    if (!firstError) {
	                        firstError = error;
	                    }
	                    setTimeout(next, 0);
	                });
	            }
	            next();
	        });
	    };
	    return FallbackProvider;
	}(baseProvider.BaseProvider));
	exports.FallbackProvider = FallbackProvider;
	});

	var jsonRpcProvider = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	// See: https://github.com/ethereum/wiki/wiki/JSON-RPC


	var errors$1 = __importStar(errors);






	function timer(timeout) {
	    return new Promise(function (resolve) {
	        setTimeout(function () {
	            resolve();
	        }, timeout);
	    });
	}
	function getResult(payload) {
	    if (payload.error) {
	        // @TODO: not any
	        var error = new Error(payload.error.message);
	        error.code = payload.error.code;
	        error.data = payload.error.data;
	        throw error;
	    }
	    return payload.result;
	}
	function getLowerCase(value) {
	    if (value) {
	        return value.toLowerCase();
	    }
	    return value;
	}
	var _constructorGuard = {};
	// Some environments (Trust Wallet and company) use a global map
	// to track JSON-RPC ID, so we try to keep IDs unique across all
	// connections. See #489.
	var _nextId = 42;
	var JsonRpcSigner = /** @class */ (function (_super) {
	    __extends(JsonRpcSigner, _super);
	    function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {
	        var _this = _super.call(this) || this;
	        errors$1.checkNew(_this, JsonRpcSigner);
	        if (constructorGuard !== _constructorGuard) {
	            throw new Error('do not call the JsonRpcSigner constructor directly; use provider.getSigner');
	        }
	        properties.defineReadOnly(_this, 'provider', provider);
	        // Statically attach to a given address
	        if (addressOrIndex) {
	            if (typeof (addressOrIndex) === 'string') {
	                properties.defineReadOnly(_this, '_address', address.getAddress(addressOrIndex));
	            }
	            else if (typeof (addressOrIndex) === 'number') {
	                properties.defineReadOnly(_this, '_index', addressOrIndex);
	            }
	            else {
	                errors$1.throwError('invalid address or index', errors$1.INVALID_ARGUMENT, { argument: 'addressOrIndex', value: addressOrIndex });
	            }
	        }
	        else {
	            properties.defineReadOnly(_this, '_index', 0);
	        }
	        return _this;
	    }
	    JsonRpcSigner.prototype.getAddress = function () {
	        var _this = this;
	        if (this._address) {
	            return Promise.resolve(this._address);
	        }
	        return this.provider.send('eth_accounts', []).then(function (accounts) {
	            if (accounts.length <= _this._index) {
	                errors$1.throwError('unknown account #' + _this._index, errors$1.UNSUPPORTED_OPERATION, { operation: 'getAddress' });
	            }
	            _this._address = address.getAddress(accounts[_this._index]);
	            return _this._address;
	        });
	    };
	    JsonRpcSigner.prototype.getBalance = function (blockTag) {
	        return this.provider.getBalance(this.getAddress(), blockTag);
	    };
	    JsonRpcSigner.prototype.getTransactionCount = function (blockTag) {
	        return this.provider.getTransactionCount(this.getAddress(), blockTag);
	    };
	    JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {
	        var _this = this;
	        transaction = properties.shallowCopy(transaction);
	        var fromAddress = this.getAddress().then(function (address) {
	            if (address) {
	                address = address.toLowerCase();
	            }
	            return address;
	        });
	        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
	        // wishes to use this, it is easy to specify explicitly, otherwise
	        // we look it up for them.
	        if (transaction.gasLimit == null) {
	            var estimate = properties.shallowCopy(transaction);
	            estimate.from = fromAddress;
	            transaction.gasLimit = this.provider.estimateGas(estimate);
	        }
	        return Promise.all([
	            properties.resolveProperties(transaction),
	            fromAddress
	        ]).then(function (results) {
	            var tx = results[0];
	            var hexTx = JsonRpcProvider.hexlifyTransaction(tx);
	            hexTx.from = results[1];
	            return _this.provider.send('eth_sendTransaction', [hexTx]).then(function (hash) {
	                return hash;
	            }, function (error) {
	                if (error.responseText) {
	                    // See: JsonRpcProvider.sendTransaction (@TODO: Expose a ._throwError??)
	                    if (error.responseText.indexOf('insufficient funds') >= 0) {
	                        errors$1.throwError('insufficient funds', errors$1.INSUFFICIENT_FUNDS, {
	                            transaction: tx
	                        });
	                    }
	                    if (error.responseText.indexOf('nonce too low') >= 0) {
	                        errors$1.throwError('nonce has already been used', errors$1.NONCE_EXPIRED, {
	                            transaction: tx
	                        });
	                    }
	                    if (error.responseText.indexOf('replacement transaction underpriced') >= 0) {
	                        errors$1.throwError('replacement fee too low', errors$1.REPLACEMENT_UNDERPRICED, {
	                            transaction: tx
	                        });
	                    }
	                }
	                throw error;
	            });
	        });
	    };
	    JsonRpcSigner.prototype.sendTransaction = function (transaction) {
	        var _this = this;
	        return this.sendUncheckedTransaction(transaction).then(function (hash) {
	            return web.poll(function () {
	                return _this.provider.getTransaction(hash).then(function (tx) {
	                    if (tx === null) {
	                        return undefined;
	                    }
	                    return _this.provider._wrapTransaction(tx, hash);
	                });
	            }, { fastRetry: 250, onceBlock: _this.provider }).catch(function (error) {
	                error.transactionHash = hash;
	                throw error;
	            });
	        });
	    };
	    JsonRpcSigner.prototype.signMessage = function (message) {
	        var _this = this;
	        var data = ((typeof (message) === 'string') ? utf8.toUtf8Bytes(message) : message);
	        return this.getAddress().then(function (address) {
	            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
	            return _this.provider.send('eth_sign', [address.toLowerCase(), bytes.hexlify(data)]);
	        });
	    };
	    JsonRpcSigner.prototype.unlock = function (password) {
	        var provider = this.provider;
	        return this.getAddress().then(function (address) {
	            return provider.send('personal_unlockAccount', [address.toLowerCase(), password, null]);
	        });
	    };
	    return JsonRpcSigner;
	}(abstractSigner.Signer));
	exports.JsonRpcSigner = JsonRpcSigner;
	var allowedTransactionKeys = {
	    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true
	};
	var JsonRpcProvider = /** @class */ (function (_super) {
	    __extends(JsonRpcProvider, _super);
	    function JsonRpcProvider(url, network) {
	        var _this = this;
	        // One parameter, but it is a network name, so swap it with the URL
	        if (typeof (url) === 'string') {
	            if (network === null && networks_1.getNetwork(url)) {
	                network = url;
	                url = null;
	            }
	        }
	        if (network) {
	            // The network has been specified explicitly, we can use it
	            _this = _super.call(this, network) || this;
	        }
	        else {
	            // The network is unknown, query the JSON-RPC for it
	            var ready = new Promise(function (resolve, reject) {
	                setTimeout(function () {
	                    _this.send('net_version', []).then(function (result) {
	                        return resolve(networks_1.getNetwork(parseInt(result)));
	                    }).catch(function (error) {
	                        reject(error);
	                    });
	                });
	            });
	            _this = _super.call(this, ready) || this;
	        }
	        errors$1.checkNew(_this, JsonRpcProvider);
	        // Default URL
	        if (!url) {
	            url = 'http://localhost:8545';
	        }
	        if (typeof (url) === 'string') {
	            _this.connection = {
	                url: url
	            };
	        }
	        else {
	            _this.connection = url;
	        }
	        return _this;
	    }
	    JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {
	        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
	    };
	    JsonRpcProvider.prototype.listAccounts = function () {
	        return this.send('eth_accounts', []).then(function (accounts) {
	            return accounts.map(function (a) { return address.getAddress(a); });
	        });
	    };
	    JsonRpcProvider.prototype.send = function (method, params) {
	        var _this = this;
	        var request = {
	            method: method,
	            params: params,
	            id: (_nextId++),
	            jsonrpc: "2.0"
	        };
	        return web.fetchJson(this.connection, JSON.stringify(request), getResult).then(function (result) {
	            _this.emit('debug', {
	                action: 'send',
	                request: request,
	                response: result,
	                provider: _this
	            });
	            return result;
	        });
	    };
	    JsonRpcProvider.prototype.perform = function (method, params) {
	        switch (method) {
	            case 'getBlockNumber':
	                return this.send('eth_blockNumber', []);
	            case 'getGasPrice':
	                return this.send('eth_gasPrice', []);
	            case 'getBalance':
	                return this.send('eth_getBalance', [getLowerCase(params.address), params.blockTag]);
	            case 'getTransactionCount':
	                return this.send('eth_getTransactionCount', [getLowerCase(params.address), params.blockTag]);
	            case 'getCode':
	                return this.send('eth_getCode', [getLowerCase(params.address), params.blockTag]);
	            case 'getStorageAt':
	                return this.send('eth_getStorageAt', [getLowerCase(params.address), params.position, params.blockTag]);
	            case 'sendTransaction':
	                return this.send('eth_sendRawTransaction', [params.signedTransaction]).catch(function (error) {
	                    if (error.responseText) {
	                        // "insufficient funds for gas * price + value"
	                        if (error.responseText.indexOf('insufficient funds') > 0) {
	                            errors$1.throwError('insufficient funds', errors$1.INSUFFICIENT_FUNDS, {});
	                        }
	                        // "nonce too low"
	                        if (error.responseText.indexOf('nonce too low') > 0) {
	                            errors$1.throwError('nonce has already been used', errors$1.NONCE_EXPIRED, {});
	                        }
	                        // "replacement transaction underpriced"
	                        if (error.responseText.indexOf('replacement transaction underpriced') > 0) {
	                            errors$1.throwError('replacement fee too low', errors$1.REPLACEMENT_UNDERPRICED, {});
	                        }
	                    }
	                    throw error;
	                });
	            case 'getBlock':
	                if (params.blockTag) {
	                    return this.send('eth_getBlockByNumber', [params.blockTag, !!params.includeTransactions]);
	                }
	                else if (params.blockHash) {
	                    return this.send('eth_getBlockByHash', [params.blockHash, !!params.includeTransactions]);
	                }
	                return Promise.reject(new Error('invalid block tag or block hash'));
	            case 'getTransaction':
	                return this.send('eth_getTransactionByHash', [params.transactionHash]);
	            case 'getTransactionReceipt':
	                return this.send('eth_getTransactionReceipt', [params.transactionHash]);
	            case 'call':
	                return this.send('eth_call', [JsonRpcProvider.hexlifyTransaction(params.transaction, { from: true }), params.blockTag]);
	            case 'estimateGas':
	                return this.send('eth_estimateGas', [JsonRpcProvider.hexlifyTransaction(params.transaction, { from: true })]);
	            case 'getLogs':
	                if (params.filter && params.filter.address != null) {
	                    params.filter.address = getLowerCase(params.filter.address);
	                }
	                return this.send('eth_getLogs', [params.filter]);
	        }
	        errors$1.throwError(method + ' not implemented', errors$1.NOT_IMPLEMENTED, { operation: method });
	        return null;
	    };
	    JsonRpcProvider.prototype._startPending = function () {
	        if (this._pendingFilter != null) {
	            return;
	        }
	        var self = this;
	        var pendingFilter = this.send('eth_newPendingTransactionFilter', []);
	        this._pendingFilter = pendingFilter;
	        pendingFilter.then(function (filterId) {
	            function poll() {
	                self.send('eth_getFilterChanges', [filterId]).then(function (hashes) {
	                    if (self._pendingFilter != pendingFilter) {
	                        return null;
	                    }
	                    var seq = Promise.resolve();
	                    hashes.forEach(function (hash) {
	                        // @TODO: This should be garbage collected at some point... How? When?
	                        self._emitted['t:' + hash.toLowerCase()] = 'pending';
	                        seq = seq.then(function () {
	                            return self.getTransaction(hash).then(function (tx) {
	                                self.emit('pending', tx);
	                                return null;
	                            });
	                        });
	                    });
	                    return seq.then(function () {
	                        return timer(1000);
	                    });
	                }).then(function () {
	                    if (self._pendingFilter != pendingFilter) {
	                        self.send('eth_uninstallFilter', [filterId]);
	                        return;
	                    }
	                    setTimeout(function () { poll(); }, 0);
	                    return null;
	                }).catch(function (error) { });
	            }
	            poll();
	            return filterId;
	        }).catch(function (error) { });
	    };
	    JsonRpcProvider.prototype._stopPending = function () {
	        this._pendingFilter = null;
	    };
	    // Convert an ethers.js transaction into a JSON-RPC transaction
	    //  - gasLimit => gas
	    //  - All values hexlified
	    //  - All numeric values zero-striped
	    // NOTE: This allows a TransactionRequest, but all values should be resolved
	    //       before this is called
	    JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {
	        // Check only allowed properties are given
	        var allowed = properties.shallowCopy(allowedTransactionKeys);
	        if (allowExtra) {
	            for (var key in allowExtra) {
	                if (allowExtra[key]) {
	                    allowed[key] = true;
	                }
	            }
	        }
	        properties.checkProperties(transaction, allowed);
	        var result = {};
	        // Some nodes (INFURA ropsten; INFURA mainnet is fine) don't like leading zeros.
	        ['gasLimit', 'gasPrice', 'nonce', 'value'].forEach(function (key) {
	            if (transaction[key] == null) {
	                return;
	            }
	            var value = bytes.hexStripZeros(bytes.hexlify(transaction[key]));
	            if (key === 'gasLimit') {
	                key = 'gas';
	            }
	            result[key] = value;
	        });
	        ['from', 'to', 'data'].forEach(function (key) {
	            if (transaction[key] == null) {
	                return;
	            }
	            result[key] = bytes.hexlify(transaction[key]);
	        });
	        return result;
	    };
	    return JsonRpcProvider;
	}(baseProvider.BaseProvider));
	exports.JsonRpcProvider = JsonRpcProvider;
	});

	var ipcProvider = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var net_1 = __importDefault(require$$0$1);


	var errors$1 = __importStar(errors);
	var IpcProvider = /** @class */ (function (_super) {
	    __extends(IpcProvider, _super);
	    function IpcProvider(path, network) {
	        var _this = this;
	        if (path == null) {
	            errors$1.throwError('missing path', errors$1.MISSING_ARGUMENT, {
	                argument: 'path'
	            });
	        }
	        _this = _super.call(this, 'ipc://' + path, network) || this;
	        errors$1.checkNew(_this, IpcProvider);
	        properties.defineReadOnly(_this, 'path', path);
	        return _this;
	    }
	    // @TODO: Create a connection to the IPC path and use filters instead of polling for block
	    IpcProvider.prototype.send = function (method, params) {
	        // This method is very simple right now. We create a new socket
	        // connection each time, which may be slower, but the main
	        // advantage we are aiming for now is security. This simplifies
	        // multiplexing requests (since we do not need to multiplex).
	        var _this = this;
	        var payload = JSON.stringify({
	            method: method,
	            params: params,
	            id: 42,
	            jsonrpc: "2.0"
	        });
	        return new Promise(function (resolve, reject) {
	            var response = Buffer.alloc(0);
	            var stream = net_1.default.connect(_this.path);
	            stream.on('data', function (data) {
	                response = Buffer.concat([response, data]);
	            });
	            stream.on("end", function () {
	                try {
	                    var payload_1 = JSON.parse(response.toString('utf8'));
	                    if (payload_1.error) {
	                        var error = new Error(payload_1.error.message);
	                        error.code = payload_1.error.code;
	                        error.data = payload_1.error.data;
	                        reject(error);
	                    }
	                    else {
	                        resolve(payload_1.result);
	                    }
	                    stream.destroy();
	                }
	                catch (error) {
	                    reject(error);
	                    stream.destroy();
	                }
	            });
	            stream.on('error', function (error) {
	                reject(error);
	                stream.destroy();
	            });
	            stream.write(payload);
	            stream.end();
	        });
	    };
	    return IpcProvider;
	}(jsonRpcProvider.JsonRpcProvider));
	exports.IpcProvider = IpcProvider;
	});

	var infuraProvider = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });




	var errors$1 = __importStar(errors);
	var defaultProjectId = "7d0d81d0919f4f05b9ab6634be01ee73";
	var InfuraProvider = /** @class */ (function (_super) {
	    __extends(InfuraProvider, _super);
	    function InfuraProvider(network, projectId) {
	        var _this = this;
	        var standard = networks_1.getNetwork((network == null) ? 'homestead' : network);
	        if (projectId == null) {
	            projectId = defaultProjectId;
	        }
	        var host = null;
	        switch (standard.name) {
	            case 'homestead':
	                host = 'mainnet.infura.io';
	                break;
	            case 'ropsten':
	                host = 'ropsten.infura.io';
	                break;
	            case 'rinkeby':
	                host = 'rinkeby.infura.io';
	                break;
	            case 'goerli':
	                host = 'goerli.infura.io';
	                break;
	            case 'kovan':
	                host = 'kovan.infura.io';
	                break;
	            default:
	                errors$1.throwError('unsupported network', errors$1.INVALID_ARGUMENT, {
	                    argument: "network",
	                    value: network
	                });
	        }
	        // New-style Project ID
	        if (bytes.isHexString("0x" + projectId, 16)) {
	            _this = _super.call(this, 'https://' + host + '/v3/' + projectId, standard) || this;
	            properties.defineReadOnly(_this, 'apiAccessToken', null);
	            properties.defineReadOnly(_this, 'projectId', projectId);
	            // Legacy API Access Token
	        }
	        else {
	            errors$1.warn("The legacy INFURA apiAccesToken API is deprecated; please upgrade to a Project ID instead (see INFURA dshboard; https://infura.io)");
	            _this = _super.call(this, 'https://' + host + '/' + projectId, standard) || this;
	            properties.defineReadOnly(_this, 'apiAccessToken', projectId);
	            properties.defineReadOnly(_this, 'projectId', null);
	        }
	        errors$1.checkNew(_this, InfuraProvider);
	        return _this;
	    }
	    InfuraProvider.prototype._startPending = function () {
	        errors$1.warn('WARNING: INFURA does not support pending filters');
	    };
	    InfuraProvider.prototype.getSigner = function (address) {
	        return errors$1.throwError('INFURA does not support signing', errors$1.UNSUPPORTED_OPERATION, { operation: 'getSigner' });
	    };
	    InfuraProvider.prototype.listAccounts = function () {
	        return Promise.resolve([]);
	    };
	    return InfuraProvider;
	}(jsonRpcProvider.JsonRpcProvider));
	exports.InfuraProvider = InfuraProvider;
	});

	var web3Provider = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });


	var errors$1 = __importStar(errors);
	/*
	@TODO
	utils.defineProperty(Web3Signer, 'onchange', {

	});

	*/
	var _nextId = 42;
	var Web3Provider = /** @class */ (function (_super) {
	    __extends(Web3Provider, _super);
	    function Web3Provider(web3Provider, network) {
	        var _this = 
	        // HTTP has a host; IPC has a path.
	        _super.call(this, web3Provider.host || web3Provider.path || '', network) || this;
	        errors$1.checkNew(_this, Web3Provider);
	        if (web3Provider) {
	            if (web3Provider.sendAsync) {
	                _this._sendAsync = web3Provider.sendAsync.bind(web3Provider);
	            }
	            else if (web3Provider.send) {
	                _this._sendAsync = web3Provider.send.bind(web3Provider);
	            }
	        }
	        if (!web3Provider || !_this._sendAsync) {
	            errors$1.throwError('invalid web3Provider', errors$1.INVALID_ARGUMENT, { arg: 'web3Provider', value: web3Provider });
	        }
	        properties.defineReadOnly(_this, '_web3Provider', web3Provider);
	        // @TODO: In v5 remove the above definition; only this one is needed
	        properties.defineReadOnly(_this, 'provider', web3Provider);
	        return _this;
	    }
	    Web3Provider.prototype.send = function (method, params) {
	        var _this = this;
	        // Metamask complains about eth_sign (and on some versions hangs)
	        if (method == 'eth_sign' && this._web3Provider.isMetaMask) {
	            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign
	            method = 'personal_sign';
	            params = [params[1], params[0]];
	        }
	        return new Promise(function (resolve, reject) {
	            var request = {
	                method: method,
	                params: params,
	                id: (_nextId++),
	                jsonrpc: "2.0"
	            };
	            _this._sendAsync(request, function (error, result) {
	                if (error) {
	                    reject(error);
	                    return;
	                }
	                if (result.error) {
	                    // @TODO: not any
	                    var error_1 = new Error(result.error.message);
	                    error_1.code = result.error.code;
	                    error_1.data = result.error.data;
	                    reject(error_1);
	                    return;
	                }
	                resolve(result.result);
	            });
	        });
	    };
	    return Web3Provider;
	}(jsonRpcProvider.JsonRpcProvider));
	exports.Web3Provider = Web3Provider;
	});

	var providers = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	exports.Provider = abstractProvider.Provider;

	exports.BaseProvider = baseProvider.BaseProvider;

	exports.EtherscanProvider = etherscanProvider.EtherscanProvider;

	exports.FallbackProvider = fallbackProvider.FallbackProvider;

	exports.IpcProvider = ipcProvider.IpcProvider;

	exports.InfuraProvider = infuraProvider.InfuraProvider;

	exports.JsonRpcProvider = jsonRpcProvider.JsonRpcProvider;
	exports.JsonRpcSigner = jsonRpcProvider.JsonRpcSigner;

	exports.Web3Provider = web3Provider.Web3Provider;
	});

	var solidity = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });





	var regexBytes = new RegExp("^bytes([0-9]+)$");
	var regexNumber = new RegExp("^(u?int)([0-9]*)$");
	var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
	var Zeros = '0000000000000000000000000000000000000000000000000000000000000000';
	function _pack(type, value, isArray) {
	    switch (type) {
	        case 'address':
	            if (isArray) {
	                return bytes.padZeros(value, 32);
	            }
	            return bytes.arrayify(value);
	        case 'string':
	            return utf8.toUtf8Bytes(value);
	        case 'bytes':
	            return bytes.arrayify(value);
	        case 'bool':
	            value = (value ? '0x01' : '0x00');
	            if (isArray) {
	                return bytes.padZeros(value, 32);
	            }
	            return bytes.arrayify(value);
	    }
	    var match = type.match(regexNumber);
	    if (match) {
	        //var signed = (match[1] === 'int')
	        var size = parseInt(match[2] || "256");
	        if ((size % 8 != 0) || size === 0 || size > 256) {
	            throw new Error('invalid number type - ' + type);
	        }
	        if (isArray) {
	            size = 256;
	        }
	        value = bignumber.bigNumberify(value).toTwos(size);
	        return bytes.padZeros(value, size / 8);
	    }
	    match = type.match(regexBytes);
	    if (match) {
	        var size = parseInt(match[1]);
	        if (String(size) != match[1] || size === 0 || size > 32) {
	            throw new Error('invalid number type - ' + type);
	        }
	        if (bytes.arrayify(value).byteLength !== size) {
	            throw new Error('invalid value for ' + type);
	        }
	        if (isArray) {
	            return bytes.arrayify((value + Zeros).substring(0, 66));
	        }
	        return value;
	    }
	    match = type.match(regexArray);
	    if (match && Array.isArray(value)) {
	        var baseType = match[1];
	        var count = parseInt(match[2] || String(value.length));
	        if (count != value.length) {
	            throw new Error('invalid value for ' + type);
	        }
	        var result = [];
	        value.forEach(function (value) {
	            result.push(_pack(baseType, value, true));
	        });
	        return bytes.concat(result);
	    }
	    throw new Error('unknown type - ' + type);
	}
	// @TODO: Array Enum
	function pack(types, values) {
	    if (types.length != values.length) {
	        throw new Error('type/value count mismatch');
	    }
	    var tight = [];
	    types.forEach(function (type, index) {
	        tight.push(_pack(type, values[index]));
	    });
	    return bytes.hexlify(bytes.concat(tight));
	}
	exports.pack = pack;
	function keccak256(types, values) {
	    return keccak256_1.keccak256(pack(types, values));
	}
	exports.keccak256 = keccak256;
	function sha256(types, values) {
	    return sha2.sha256(pack(types, values));
	}
	exports.sha256 = sha256;
	});

	var units = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	var errors$1 = __importStar(errors);

	var names = [
	    'wei',
	    'kwei',
	    'Mwei',
	    'Gwei',
	    'szabo',
	    'finney',
	    'ether',
	];
	var unitInfos = {};
	function _getUnitInfo(value) {
	    return {
	        decimals: value.length - 1,
	        tenPower: bignumber.bigNumberify(value)
	    };
	}
	// Build cache of common units
	(function () {
	    // Cache the common units
	    var value = '1';
	    names.forEach(function (name) {
	        var info = _getUnitInfo(value);
	        unitInfos[name.toLowerCase()] = info;
	        unitInfos[String(info.decimals)] = info;
	        value += '000';
	    });
	})();
	function getUnitInfo(name) {
	    // Try the cache
	    var info = unitInfos[String(name).toLowerCase()];
	    if (!info && typeof (name) === 'number' && parseInt(String(name)) == name && name >= 0 && name <= 256) {
	        var value = '1';
	        for (var i = 0; i < name; i++) {
	            value += '0';
	        }
	        info = _getUnitInfo(value);
	    }
	    // Make sure we got something
	    if (!info) {
	        errors$1.throwError('invalid unitType', errors$1.INVALID_ARGUMENT, { argument: 'name', value: name });
	    }
	    return info;
	}
	// Some environments have issues with RegEx that contain back-tracking, so we cannot
	// use them.
	function commify(value) {
	    var comps = String(value).split('.');
	    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === '.' || value === '-.') {
	        errors$1.throwError('invalid value', errors$1.INVALID_ARGUMENT, { argument: 'value', value: value });
	    }
	    // Make sure we have at least one whole digit (0 if none)
	    var whole = comps[0];
	    var negative = '';
	    if (whole.substring(0, 1) === '-') {
	        negative = '-';
	        whole = whole.substring(1);
	    }
	    // Make sure we have at least 1 whole digit with no leading zeros
	    while (whole.substring(0, 1) === '0') {
	        whole = whole.substring(1);
	    }
	    if (whole === '') {
	        whole = '0';
	    }
	    var suffix = '';
	    if (comps.length === 2) {
	        suffix = '.' + (comps[1] || '0');
	    }
	    var formatted = [];
	    while (whole.length) {
	        if (whole.length <= 3) {
	            formatted.unshift(whole);
	            break;
	        }
	        else {
	            var index = whole.length - 3;
	            formatted.unshift(whole.substring(index));
	            whole = whole.substring(0, index);
	        }
	    }
	    return negative + formatted.join(',') + suffix;
	}
	exports.commify = commify;
	function formatUnits(value, unitType) {
	    var unitInfo = getUnitInfo(unitType);
	    // Make sure wei is a big number (convert as necessary)
	    value = bignumber.bigNumberify(value);
	    var negative = value.lt(constants.Zero);
	    if (negative) {
	        value = value.mul(constants.NegativeOne);
	    }
	    var fraction = value.mod(unitInfo.tenPower).toString();
	    while (fraction.length < unitInfo.decimals) {
	        fraction = '0' + fraction;
	    }
	    // Strip training 0
	    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
	    var whole = value.div(unitInfo.tenPower).toString();
	    value = whole + '.' + fraction;
	    if (negative) {
	        value = '-' + value;
	    }
	    return value;
	}
	exports.formatUnits = formatUnits;
	function parseUnits(value, unitType) {
	    if (unitType == null) {
	        unitType = 18;
	    }
	    var unitInfo = getUnitInfo(unitType);
	    if (typeof (value) !== 'string' || !value.match(/^-?[0-9.,]+$/)) {
	        errors$1.throwError('invalid decimal value', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	    }
	    if (unitInfo.decimals === 0) {
	        return bignumber.bigNumberify(value);
	    }
	    // Is it negative?
	    var negative = (value.substring(0, 1) === '-');
	    if (negative) {
	        value = value.substring(1);
	    }
	    if (value === '.') {
	        errors$1.throwError('missing value', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	    }
	    // Split it into a whole and fractional part
	    var comps = value.split('.');
	    if (comps.length > 2) {
	        errors$1.throwError('too many decimal points', errors$1.INVALID_ARGUMENT, { arg: 'value', value: value });
	    }
	    var whole = comps[0], fraction = comps[1];
	    if (!whole) {
	        whole = '0';
	    }
	    if (!fraction) {
	        fraction = '0';
	    }
	    // Prevent underflow
	    if (fraction.length > unitInfo.decimals) {
	        errors$1.throwError('underflow occurred', errors$1.NUMERIC_FAULT, { operation: 'division', fault: "underflow" });
	    }
	    // Fully pad the string with zeros to get to wei
	    while (fraction.length < unitInfo.decimals) {
	        fraction += '0';
	    }
	    var wholeValue = bignumber.bigNumberify(whole);
	    var fractionValue = bignumber.bigNumberify(fraction);
	    var wei = (wholeValue.mul(unitInfo.tenPower)).add(fractionValue);
	    if (negative) {
	        wei = wei.mul(constants.NegativeOne);
	    }
	    return wei;
	}
	exports.parseUnits = parseUnits;
	function formatEther(wei) {
	    return formatUnits(wei, 18);
	}
	exports.formatEther = formatEther;
	function parseEther(ether) {
	    return parseUnits(ether, 18);
	}
	exports.parseEther = parseEther;
	});

	var utils$3 = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	exports.AbiCoder = abiCoder.AbiCoder;
	exports.defaultAbiCoder = abiCoder.defaultAbiCoder;
	exports.formatSignature = abiCoder.formatSignature;
	exports.formatParamType = abiCoder.formatParamType;
	exports.parseSignature = abiCoder.parseSignature;
	exports.parseParamType = abiCoder.parseParamType;

	exports.getAddress = address.getAddress;
	exports.getContractAddress = address.getContractAddress;
	exports.getCreate2Address = address.getCreate2Address;
	exports.getIcapAddress = address.getIcapAddress;
	var base64$1 = __importStar(base64);
	exports.base64 = base64$1;

	exports.BigNumber = bignumber.BigNumber;
	exports.bigNumberify = bignumber.bigNumberify;

	exports.arrayify = bytes.arrayify;
	exports.concat = bytes.concat;
	exports.hexDataSlice = bytes.hexDataSlice;
	exports.hexDataLength = bytes.hexDataLength;
	exports.hexlify = bytes.hexlify;
	exports.hexStripZeros = bytes.hexStripZeros;
	exports.hexZeroPad = bytes.hexZeroPad;
	exports.isHexString = bytes.isHexString;
	exports.joinSignature = bytes.joinSignature;
	exports.padZeros = bytes.padZeros;
	exports.splitSignature = bytes.splitSignature;
	exports.stripZeros = bytes.stripZeros;

	exports.hashMessage = hash.hashMessage;
	exports.id = hash.id;
	exports.namehash = hash.namehash;
	var HDNode = __importStar(hdnode);
	exports.HDNode = HDNode;

	exports.Interface = _interface.Interface;

	exports.getJsonWalletAddress = jsonWallet.getJsonWalletAddress;

	exports.keccak256 = keccak256_1.keccak256;

	exports.sha256 = sha2.sha256;

	exports.solidityKeccak256 = solidity.keccak256;
	exports.solidityPack = solidity.pack;
	exports.soliditySha256 = solidity.sha256;

	exports.randomBytes = randomBytes_1.randomBytes;

	exports.getNetwork = networks_1.getNetwork;

	exports.checkProperties = properties.checkProperties;
	exports.deepCopy = properties.deepCopy;
	exports.defineReadOnly = properties.defineReadOnly;
	exports.resolveProperties = properties.resolveProperties;
	exports.shallowCopy = properties.shallowCopy;
	var RLP = __importStar(rlp);
	exports.RLP = RLP;

	exports.computeAddress = secp256k1$1.computeAddress;
	exports.computePublicKey = secp256k1$1.computePublicKey;
	exports.recoverAddress = secp256k1$1.recoverAddress;
	exports.recoverPublicKey = secp256k1$1.recoverPublicKey;
	exports.verifyMessage = secp256k1$1.verifyMessage;

	exports.SigningKey = signingKey.SigningKey;

	exports.populateTransaction = transaction.populateTransaction;
	var transaction_2 = transaction;
	exports.parseTransaction = transaction_2.parse;
	exports.serializeTransaction = transaction_2.serialize;

	exports.formatBytes32String = utf8.formatBytes32String;
	exports.parseBytes32String = utf8.parseBytes32String;
	exports.toUtf8Bytes = utf8.toUtf8Bytes;
	exports.toUtf8String = utf8.toUtf8String;

	exports.commify = units.commify;
	exports.formatEther = units.formatEther;
	exports.parseEther = units.parseEther;
	exports.formatUnits = units.formatUnits;
	exports.parseUnits = units.parseUnits;

	exports.fetchJson = web.fetchJson;
	exports.poll = web.poll;
	////////////////////////
	// Enums

	exports.SupportedAlgorithms = hmac.SupportedAlgorithms;
	var utf8_2 = utf8;
	exports.UnicodeNormalizationForm = utf8_2.UnicodeNormalizationForm;

	exports.Wordlist = wordlist.Wordlist;
	});

	var langEs_1 = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var words = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
	var lookup = {};
	var wordlist$1 = null;
	function dropDiacritic(word) {
	    errors.checkNormalize();
	    return utf8.toUtf8String(Array.prototype.filter.call(utf8.toUtf8Bytes(word.normalize('NFD').toLowerCase()), function (c) {
	        return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
	    }));
	}
	function expand(word) {
	    var output = [];
	    Array.prototype.forEach.call(utf8.toUtf8Bytes(word), function (c) {
	        // Acute accent
	        if (c === 47) {
	            output.push(204);
	            output.push(129);
	            // n-tilde
	        }
	        else if (c === 126) {
	            output.push(110);
	            output.push(204);
	            output.push(131);
	        }
	        else {
	            output.push(c);
	        }
	    });
	    return utf8.toUtf8String(output);
	}
	function loadWords(lang) {
	    if (wordlist$1 != null) {
	        return;
	    }
	    wordlist$1 = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ').map(function (w) { return expand(w); });
	    wordlist$1.forEach(function (word, index) {
	        lookup[dropDiacritic(word)] = index;
	    });
	    if (wordlist.check(lang) !== '0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300') {
	        wordlist$1 = null;
	        throw new Error('BIP39 Wordlist for es (Spanish) FAILED');
	    }
	}
	var LangEs = /** @class */ (function (_super) {
	    __extends(LangEs, _super);
	    function LangEs() {
	        return _super.call(this, 'es') || this;
	    }
	    LangEs.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist$1[index];
	    };
	    LangEs.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        var index = lookup[dropDiacritic(word)];
	        if (typeof (index) !== 'number') {
	            return -1;
	        }
	        return index;
	    };
	    return LangEs;
	}(wordlist.Wordlist));
	var langEs = new LangEs();
	exports.langEs = langEs;
	wordlist.register(langEs);
	});

	var langFr_1 = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });



	var words = "";
	var wordlist$1 = null;
	var lookup = {};
	function dropDiacritic(word) {
	    errors.checkNormalize();
	    return utf8.toUtf8String(Array.prototype.filter.call(utf8.toUtf8Bytes(word.normalize('NFD').toLowerCase()), function (c) {
	        return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
	    }));
	}
	function expand(word) {
	    var output = [];
	    Array.prototype.forEach.call(utf8.toUtf8Bytes(word), function (c) {
	        // Acute accent
	        if (c === 47) {
	            output.push(204);
	            output.push(129);
	            // Grave accent
	        }
	        else if (c === 45) {
	            output.push(204);
	            output.push(128);
	        }
	        else {
	            output.push(c);
	        }
	    });
	    return utf8.toUtf8String(output);
	}
	function loadWords(lang) {
	    if (wordlist$1 != null) {
	        return;
	    }
	    wordlist$1 = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ').map(function (w) { return expand(w); });
	    wordlist$1.forEach(function (word, index) {
	        lookup[dropDiacritic(word)] = index;
	    });
	    if (wordlist.check(lang) !== '0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045') {
	        wordlist$1 = null;
	        throw new Error('BIP39 Wordlist for fr (French) FAILED');
	    }
	}
	var LangFr = /** @class */ (function (_super) {
	    __extends(LangFr, _super);
	    function LangFr() {
	        return _super.call(this, 'fr') || this;
	    }
	    LangFr.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist$1[index];
	    };
	    LangFr.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        var index = lookup[dropDiacritic(word)];
	        if (typeof (index) !== 'number') {
	            return -1;
	        }
	        return index;
	    };
	    return LangFr;
	}(wordlist.Wordlist));
	var langFr = new LangFr();
	exports.langFr = langFr;
	wordlist.register(langFr);
	});

	var langJa_1 = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });



	var errors$1 = __importStar(errors);
	var data = [
	    // 4-kana words
	    'AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR',
	    // 5-kana words
	    'ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR',
	    // 6-kana words
	    'AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm',
	    // 7-kana words
	    'ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC',
	    // 8-kana words
	    'BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD',
	    // 9-kana words
	    'QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD',
	    // 10-kana words
	    'IJBEJqXZJ'
	];
	// Maps each character into its kana value (the index)
	var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
	var wordlist$1 = null;
	function hex(word) {
	    return bytes.hexlify(utf8.toUtf8Bytes(word));
	}
	var KiYoKu = '0xe3818de38284e3818f';
	var KyoKu = '0xe3818de38283e3818f';
	function loadWords(lang) {
	    if (wordlist$1 !== null) {
	        return;
	    }
	    wordlist$1 = [];
	    // Transforms for normalizing (sort is a not quite UTF-8)
	    var transform = {};
	    // Delete the diacritic marks
	    transform[utf8.toUtf8String([227, 130, 154])] = false;
	    transform[utf8.toUtf8String([227, 130, 153])] = false;
	    // Some simple transforms that sort out most of the order
	    transform[utf8.toUtf8String([227, 130, 133])] = utf8.toUtf8String([227, 130, 134]);
	    transform[utf8.toUtf8String([227, 129, 163])] = utf8.toUtf8String([227, 129, 164]);
	    transform[utf8.toUtf8String([227, 130, 131])] = utf8.toUtf8String([227, 130, 132]);
	    transform[utf8.toUtf8String([227, 130, 135])] = utf8.toUtf8String([227, 130, 136]);
	    // Normalize words using the transform
	    function normalize(word) {
	        var result = '';
	        for (var i = 0; i < word.length; i++) {
	            var kana = word[i];
	            var target = transform[kana];
	            if (target === false) {
	                continue;
	            }
	            if (target) {
	                kana = target;
	            }
	            result += kana;
	        }
	        return result;
	    }
	    // Sort how the Japanese list is sorted
	    function sortJapanese(a, b) {
	        a = normalize(a);
	        b = normalize(b);
	        if (a < b) {
	            return -1;
	        }
	        if (a > b) {
	            return 1;
	        }
	        return 0;
	    }
	    // Load all the words
	    for (var length_1 = 3; length_1 <= 9; length_1++) {
	        var d = data[length_1 - 3];
	        for (var offset = 0; offset < d.length; offset += length_1) {
	            var word = [];
	            for (var i = 0; i < length_1; i++) {
	                var k = mapping.indexOf(d[offset + i]);
	                word.push(227);
	                word.push((k & 0x40) ? 130 : 129);
	                word.push((k & 0x3f) + 128);
	            }
	            wordlist$1.push(utf8.toUtf8String(word));
	        }
	    }
	    wordlist$1.sort(sortJapanese);
	    // For some reason kyoku and kiyoku are flipped in node (!!).
	    // The order SHOULD be:
	    //   - kyoku
	    //   - kiyoku
	    if (hex(wordlist$1[442]) === KiYoKu && hex(wordlist$1[443]) === KyoKu) {
	        var tmp = wordlist$1[442];
	        wordlist$1[442] = wordlist$1[443];
	        wordlist$1[443] = tmp;
	    }
	    if (wordlist.check(lang) !== '0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600') {
	        wordlist$1 = null;
	        throw new Error('BIP39 Wordlist for ja (Japanese) FAILED');
	    }
	}
	var LangJa = /** @class */ (function (_super) {
	    __extends(LangJa, _super);
	    function LangJa() {
	        return _super.call(this, 'ja') || this;
	    }
	    LangJa.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist$1[index];
	    };
	    LangJa.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        return wordlist$1.indexOf(word);
	    };
	    LangJa.prototype.split = function (mnemonic) {
	        errors$1.checkNormalize();
	        return mnemonic.split(/(?:\u3000| )+/g);
	    };
	    LangJa.prototype.join = function (words) {
	        return words.join('\u3000');
	    };
	    return LangJa;
	}(wordlist.Wordlist));
	var langJa = new LangJa();
	exports.langJa = langJa;
	wordlist.register(langJa);
	});

	var langKo_1 = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var data = [
	    'OYAa',
	    'ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8',
	    'ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6',
	    'ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv',
	    'AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo',
	    'AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg',
	    'HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb',
	    'AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl'
	];
	var codes = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
	function getHangul(code) {
	    if (code >= 40) {
	        code = code + 168 - 40;
	    }
	    else if (code >= 19) {
	        code = code + 97 - 19;
	    }
	    return utf8.toUtf8String([225, (code >> 6) + 132, (code & 0x3f) + 128]);
	}
	var wordlist$1 = null;
	function loadWords(lang) {
	    if (wordlist$1 != null) {
	        return;
	    }
	    wordlist$1 = [];
	    data.forEach(function (data, length) {
	        length += 4;
	        for (var i = 0; i < data.length; i += length) {
	            var word = '';
	            for (var j = 0; j < length; j++) {
	                word += getHangul(codes.indexOf(data[i + j]));
	            }
	            wordlist$1.push(word);
	        }
	    });
	    wordlist$1.sort();
	    if (wordlist.check(lang) !== '0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a') {
	        wordlist$1 = null;
	        throw new Error('BIP39 Wordlist for ko (Korean) FAILED');
	    }
	}
	var LangKo = /** @class */ (function (_super) {
	    __extends(LangKo, _super);
	    function LangKo() {
	        return _super.call(this, 'ko') || this;
	    }
	    LangKo.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist$1[index];
	    };
	    LangKo.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        return wordlist$1.indexOf(word);
	    };
	    return LangKo;
	}(wordlist.Wordlist));
	var langKo = new LangKo();
	exports.langKo = langKo;
	wordlist.register(langKo);
	});

	var langIt_1 = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });

	var words = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
	var wordlist$1 = null;
	function loadWords(lang) {
	    if (wordlist$1 != null) {
	        return;
	    }
	    wordlist$1 = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ');
	    if (wordlist.check(lang) !== '0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620') {
	        wordlist$1 = null;
	        throw new Error('BIP39 Wordlist for it (Italian) FAILED');
	    }
	}
	var LangIt = /** @class */ (function (_super) {
	    __extends(LangIt, _super);
	    function LangIt() {
	        return _super.call(this, 'it') || this;
	    }
	    LangIt.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist$1[index];
	    };
	    LangIt.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        return wordlist$1.indexOf(word);
	    };
	    return LangIt;
	}(wordlist.Wordlist));
	var langIt = new LangIt();
	exports.langIt = langIt;
	wordlist.register(langIt);
	});

	var langZh = createCommonjsModule(function (module, exports) {
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });


	var data = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
	var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
	// @TODO: Load lazily
	var wordlist$1 = {
	    zh_cn: null,
	    zh_tw: null
	};
	var Checks = {
	    zh_cn: '0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1',
	    zh_tw: '0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d'
	};
	var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
	function loadWords(lang) {
	    if (wordlist$1[lang.locale] !== null) {
	        return;
	    }
	    wordlist$1[lang.locale] = [];
	    var deltaOffset = 0;
	    for (var i = 0; i < 2048; i++) {
	        var s = style.indexOf(data[i * 3]);
	        var bytes = [
	            228 + (s >> 2),
	            128 + codes.indexOf(data[i * 3 + 1]),
	            128 + codes.indexOf(data[i * 3 + 2]),
	        ];
	        if (lang.locale === 'zh_tw') {
	            var common = s % 4;
	            for (var i_1 = common; i_1 < 3; i_1++) {
	                bytes[i_1] = codes.indexOf(deltaData[deltaOffset++]) + ((i_1 == 0) ? 228 : 128);
	            }
	        }
	        wordlist$1[lang.locale].push(utf8.toUtf8String(bytes));
	    }
	    if (wordlist.check(lang) !== Checks[lang.locale]) {
	        wordlist$1[lang.locale] = null;
	        throw new Error('BIP39 Wordlist for ' + lang.locale + ' (Chinese) FAILED');
	    }
	}
	var LangZh = /** @class */ (function (_super) {
	    __extends(LangZh, _super);
	    function LangZh(country) {
	        return _super.call(this, 'zh_' + country) || this;
	    }
	    LangZh.prototype.getWord = function (index) {
	        loadWords(this);
	        return wordlist$1[this.locale][index];
	    };
	    LangZh.prototype.getWordIndex = function (word) {
	        loadWords(this);
	        return wordlist$1[this.locale].indexOf(word);
	    };
	    LangZh.prototype.split = function (mnemonic) {
	        mnemonic = mnemonic.replace(/(?:\u3000| )+/g, '');
	        return mnemonic.split('');
	    };
	    return LangZh;
	}(wordlist.Wordlist));
	var langZhCn = new LangZh('cn');
	exports.langZhCn = langZhCn;
	wordlist.register(langZhCn);
	wordlist.register(langZhCn, 'zh');
	var langZhTw = new LangZh('tw');
	exports.langZhTw = langZhTw;
	wordlist.register(langZhTw);
	});

	var wordlists = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });







	var en = langEn_1.langEn;
	exports.en = en;
	var es = langEs_1.langEs;
	exports.es = es;
	var fr = langFr_1.langFr;
	exports.fr = fr;
	var it = langIt_1.langIt;
	exports.it = it;
	var ja = langJa_1.langJa;
	exports.ja = ja;
	var ko = langKo_1.langKo;
	exports.ko = ko;
	var zh = langZh.langZhCn;
	exports.zh = zh;
	var zh_cn = langZh.langZhCn;
	exports.zh_cn = zh_cn;
	var zh_tw = langZh.langZhTw;
	exports.zh_tw = zh_tw;
	});

	var shims = createCommonjsModule(function (module, exports) {
	/* no shims for node */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.platform = 'node';
	});

	var ethers = createCommonjsModule(function (module, exports) {
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });

	exports.Contract = contract.Contract;
	exports.ContractFactory = contract.ContractFactory;
	exports.VoidSigner = contract.VoidSigner;

	exports.Signer = abstractSigner.Signer;

	exports.Wallet = wallet.Wallet;
	var constants$1 = __importStar(constants);
	exports.constants = constants$1;
	var errors$1 = __importStar(errors);
	exports.errors = errors$1;
	var providers$1 = __importStar(providers);
	exports.providers = providers$1;
	var utils = __importStar(utils$3);
	exports.utils = utils;
	var wordlists$1 = __importStar(wordlists);
	exports.wordlists = wordlists$1;
	////////////////////////
	// Compile-Time Constants
	// This is empty in node, and used by browserify to inject extra goodies

	exports.platform = shims.platform;
	// This is generated by "npm run dist"

	exports.version = _version.version;
	////////////////////////
	// Helper Functions
	function getDefaultProvider(network) {
	    if (network == null) {
	        network = 'homestead';
	    }
	    var n = utils.getNetwork(network);
	    if (!n || !n._defaultProvider) {
	        errors$1.throwError('unsupported getDefaultProvider network', errors$1.UNSUPPORTED_OPERATION, {
	            operation: 'getDefaultProvider',
	            network: network
	        });
	    }
	    return n._defaultProvider(providers$1);
	}
	exports.getDefaultProvider = getDefaultProvider;
	});

	var ethers_1 = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result["default"] = mod;
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ethers$1 = __importStar(ethers);
	exports.ethers = ethers$1;
	__export(ethers);
	});

	const isNumber$2 = (thing) => !Number.isNaN(thing);

	const isString$3 = (thing) => (typeof thing === 'string' || thing instanceof String);

	// Blockchain

	const isAddress = (thing) => (
	  thing
	  && isString$3(thing)
	  && ethers_1.ethers.utils.isHexString(thing)
	  && thing.length === 42
	);

	const isBigNumber = (thing) => (thing && BigNumber.isBigNumber(thing) && !thing.isNaN());

	const buildError = ({ message, prefix = '@pie-dao/utils - validations' }) => (
	  `${prefix}: ${message}`
	);

	const validate = (result, options) => {
	  const {
	    level = 'error',
	    message,
	    prefix,
	    throwError = true,
	  } = options;

	  if (result) {
	    return true;
	  }

	  const error = buildError({ message, prefix });

	  if (throwError) {
	    throw new TypeError(error);
	  }

	  console[level](error);
	  return false;
	};

	const validateIsBigNumber = (thing, options = {}) => {
	  const defaultMessage = 'not a BigNumber';
	  return validate(isBigNumber(thing), { ...options, message: options.message || defaultMessage });
	};

	const validateIsNumber = (thing, options = {}) => {
	  const defaultMessage = 'not a number';
	  return validate(isNumber$2(thing), { ...options, message: options.message || defaultMessage });
	};

	const validateIsString = (thing, options = {}) => {
	  const defaultMessage = 'not a string';
	  return validate(isString$3(thing), { ...options, message: options.message || defaultMessage });
	};

	// Blockchain

	const validateIsAddress = (thing, options = {}) => {
	  const defaultMessage = 'not an Ethereum address';
	  return validate(isAddress(thing), { ...options, message: options.message || defaultMessage });
	};

	promise_allsettled.shim();
	const isAddress$1 = isAddress;
	const isBigNumber$1 = isBigNumber;
	const isNumber$3 = isNumber$2;
	const validateIsAddress$1 = validateIsAddress;
	const validateIsBigNumber$1 = validateIsBigNumber;
	const validateIsNumber$1 = validateIsNumber;
	const validateIsString$1 = validateIsString;

	const buildError$1 = ({
	  message,
	  prefix = 'elasticdao.org/utils - validations'
	}) => `${prefix}: ${message}`;
	const upTo = n => {
	  validateIsNumber$1(n);
	  const arr = [];

	  for (let i = 0; i < n; i += 1) {
	    arr.push(n - 1);
	  }

	  return arr;
	};
	const validate$1 = (result, options) => {
	  const {
	    level = 'error',
	    message,
	    prefix,
	    throwError = true
	  } = options;

	  if (result) {
	    return true;
	  }

	  const error = buildError$1({
	    message,
	    prefix
	  });

	  if (throwError) {
	    throw new TypeError(error);
	  }

	  console[level](error);
	  return false;
	};

	const version$2 = "logger/5.0.8";

	let _permanentCensorErrors = false;
	let _censorErrors = false;
	const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
	let _logLevel = LogLevels["default"];
	let _globalLogger = null;
	function _checkNormalize() {
	    try {
	        const missing = [];
	        // Make sure all forms of normalization are supported
	        ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
	            try {
	                if ("test".normalize(form) !== "test") {
	                    throw new Error("bad normalize");
	                }
	                ;
	            }
	            catch (error) {
	                missing.push(form);
	            }
	        });
	        if (missing.length) {
	            throw new Error("missing " + missing.join(", "));
	        }
	        if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
	            throw new Error("broken implementation");
	        }
	    }
	    catch (error) {
	        return error.message;
	    }
	    return null;
	}
	const _normalizeError = _checkNormalize();
	var LogLevel;
	(function (LogLevel) {
	    LogLevel["DEBUG"] = "DEBUG";
	    LogLevel["INFO"] = "INFO";
	    LogLevel["WARNING"] = "WARNING";
	    LogLevel["ERROR"] = "ERROR";
	    LogLevel["OFF"] = "OFF";
	})(LogLevel || (LogLevel = {}));
	var ErrorCode;
	(function (ErrorCode) {
	    ///////////////////
	    // Generic Errors
	    // Unknown Error
	    ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
	    // Not Implemented
	    ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
	    // Unsupported Operation
	    //   - operation
	    ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
	    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
	    //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
	    ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
	    // Some sort of bad response from the server
	    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
	    // Timeout
	    ErrorCode["TIMEOUT"] = "TIMEOUT";
	    ///////////////////
	    // Operational  Errors
	    // Buffer Overrun
	    ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
	    // Numeric Fault
	    //   - operation: the operation being executed
	    //   - fault: the reason this faulted
	    ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
	    ///////////////////
	    // Argument Errors
	    // Missing new operator to an object
	    //  - name: The name of the class
	    ErrorCode["MISSING_NEW"] = "MISSING_NEW";
	    // Invalid argument (e.g. value is incompatible with type) to a function:
	    //   - argument: The argument name that was invalid
	    //   - value: The value of the argument
	    ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
	    // Missing argument to a function:
	    //   - count: The number of arguments received
	    //   - expectedCount: The number of arguments expected
	    ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
	    // Too many arguments
	    //   - count: The number of arguments received
	    //   - expectedCount: The number of arguments expected
	    ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
	    ///////////////////
	    // Blockchain Errors
	    // Call exception
	    //  - transaction: the transaction
	    //  - address?: the contract address
	    //  - args?: The arguments passed into the function
	    //  - method?: The Solidity method signature
	    //  - errorSignature?: The EIP848 error signature
	    //  - errorArgs?: The EIP848 error parameters
	    //  - reason: The reason (only for EIP848 "Error(string)")
	    ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
	    // Insufficien funds (< value + gasLimit * gasPrice)
	    //   - transaction: the transaction attempted
	    ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
	    // Nonce has already been used
	    //   - transaction: the transaction attempted
	    ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
	    // The replacement fee for the transaction is too low
	    //   - transaction: the transaction attempted
	    ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
	    // The gas limit could not be estimated
	    //   - transaction: the transaction passed to estimateGas
	    ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
	})(ErrorCode || (ErrorCode = {}));
	class Logger {
	    constructor(version) {
	        Object.defineProperty(this, "version", {
	            enumerable: true,
	            value: version,
	            writable: false
	        });
	    }
	    _log(logLevel, args) {
	        const level = logLevel.toLowerCase();
	        if (LogLevels[level] == null) {
	            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
	        }
	        if (_logLevel > LogLevels[level]) {
	            return;
	        }
	        console.log.apply(console, args);
	    }
	    debug(...args) {
	        this._log(Logger.levels.DEBUG, args);
	    }
	    info(...args) {
	        this._log(Logger.levels.INFO, args);
	    }
	    warn(...args) {
	        this._log(Logger.levels.WARNING, args);
	    }
	    makeError(message, code, params) {
	        // Errors are being censored
	        if (_censorErrors) {
	            return this.makeError("censored error", code, {});
	        }
	        if (!code) {
	            code = Logger.errors.UNKNOWN_ERROR;
	        }
	        if (!params) {
	            params = {};
	        }
	        const messageDetails = [];
	        Object.keys(params).forEach((key) => {
	            try {
	                messageDetails.push(key + "=" + JSON.stringify(params[key]));
	            }
	            catch (error) {
	                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
	            }
	        });
	        messageDetails.push(`code=${code}`);
	        messageDetails.push(`version=${this.version}`);
	        const reason = message;
	        if (messageDetails.length) {
	            message += " (" + messageDetails.join(", ") + ")";
	        }
	        // @TODO: Any??
	        const error = new Error(message);
	        error.reason = reason;
	        error.code = code;
	        Object.keys(params).forEach(function (key) {
	            error[key] = params[key];
	        });
	        return error;
	    }
	    throwError(message, code, params) {
	        throw this.makeError(message, code, params);
	    }
	    throwArgumentError(message, name, value) {
	        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
	            argument: name,
	            value: value
	        });
	    }
	    assert(condition, message, code, params) {
	        if (!!condition) {
	            return;
	        }
	        this.throwError(message, code, params);
	    }
	    assertArgument(condition, message, name, value) {
	        if (!!condition) {
	            return;
	        }
	        this.throwArgumentError(message, name, value);
	    }
	    checkNormalize(message) {
	        if (_normalizeError) {
	            this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "String.prototype.normalize", form: _normalizeError
	            });
	        }
	    }
	    checkSafeUint53(value, message) {
	        if (typeof (value) !== "number") {
	            return;
	        }
	        if (message == null) {
	            message = "value not safe";
	        }
	        if (value < 0 || value >= 0x1fffffffffffff) {
	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
	                operation: "checkSafeInteger",
	                fault: "out-of-safe-range",
	                value: value
	            });
	        }
	        if (value % 1) {
	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
	                operation: "checkSafeInteger",
	                fault: "non-integer",
	                value: value
	            });
	        }
	    }
	    checkArgumentCount(count, expectedCount, message) {
	        if (message) {
	            message = ": " + message;
	        }
	        else {
	            message = "";
	        }
	        if (count < expectedCount) {
	            this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
	                count: count,
	                expectedCount: expectedCount
	            });
	        }
	        if (count > expectedCount) {
	            this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
	                count: count,
	                expectedCount: expectedCount
	            });
	        }
	    }
	    checkNew(target, kind) {
	        if (target === Object || target == null) {
	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
	        }
	    }
	    checkAbstract(target, kind) {
	        if (target === kind) {
	            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
	        }
	        else if (target === Object || target == null) {
	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
	        }
	    }
	    static globalLogger() {
	        if (!_globalLogger) {
	            _globalLogger = new Logger(version$2);
	        }
	        return _globalLogger;
	    }
	    static setCensorship(censorship, permanent) {
	        if (!censorship && permanent) {
	            this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setCensorship"
	            });
	        }
	        if (_permanentCensorErrors) {
	            if (!censorship) {
	                return;
	            }
	            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setCensorship"
	            });
	        }
	        _censorErrors = !!censorship;
	        _permanentCensorErrors = !!permanent;
	    }
	    static setLogLevel(logLevel) {
	        const level = LogLevels[logLevel.toLowerCase()];
	        if (level == null) {
	            Logger.globalLogger().warn("invalid log level - " + logLevel);
	            return;
	        }
	        _logLevel = level;
	    }
	    static from(version) {
	        return new Logger(version);
	    }
	}
	Logger.errors = ErrorCode;
	Logger.levels = LogLevel;
	//# sourceMappingURL=index.js.map

	const version$3 = "bytes/5.0.8";

	const logger = new Logger(version$3);
	///////////////////////////////
	function isHexable(value) {
	    return !!(value.toHexString);
	}
	function isBytes(value) {
	    if (value == null) {
	        return false;
	    }
	    if (value.constructor === Uint8Array) {
	        return true;
	    }
	    if (typeof (value) === "string") {
	        return false;
	    }
	    if (value.length == null) {
	        return false;
	    }
	    for (let i = 0; i < value.length; i++) {
	        const v = value[i];
	        if (typeof (v) !== "number" || v < 0 || v >= 256 || (v % 1)) {
	            return false;
	        }
	    }
	    return true;
	}
	function isHexString(value, length) {
	    if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	        return false;
	    }
	    if (length && value.length !== 2 + 2 * length) {
	        return false;
	    }
	    return true;
	}
	const HexCharacters = "0123456789abcdef";
	function hexlify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger.checkSafeUint53(value, "invalid hexlify value");
	        let hex = "";
	        while (value) {
	            hex = HexCharacters[value & 0x0f] + hex;
	            value = Math.floor(value / 16);
	        }
	        if (hex.length) {
	            if (hex.length % 2) {
	                hex = "0" + hex;
	            }
	            return "0x" + hex;
	        }
	        return "0x00";
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        return value.toHexString();
	    }
	    if (isHexString(value)) {
	        if (value.length % 2) {
	            if (options.hexPad === "left") {
	                value = "0x0" + value.substring(2);
	            }
	            else if (options.hexPad === "right") {
	                value += "0";
	            }
	            else {
	                logger.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        return value.toLowerCase();
	    }
	    if (isBytes(value)) {
	        let result = "0x";
	        for (let i = 0; i < value.length; i++) {
	            let v = value[i];
	            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
	        }
	        return result;
	    }
	    return logger.throwArgumentError("invalid hexlify value", "value", value);
	}

	const version$4 = "bignumber/5.0.12";

	var BN = bn.BN;
	const logger$1 = new Logger(version$4);
	const _constructorGuard = {};
	const MAX_SAFE = 0x1fffffffffffff;
	// Only warn about passing 10 into radix once
	let _warnedToStringRadix = false;
	class BigNumber$1 {
	    constructor(constructorGuard, hex) {
	        logger$1.checkNew(new.target, BigNumber$1);
	        if (constructorGuard !== _constructorGuard) {
	            logger$1.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new (BigNumber)"
	            });
	        }
	        this._hex = hex;
	        this._isBigNumber = true;
	        Object.freeze(this);
	    }
	    fromTwos(value) {
	        return toBigNumber(toBN(this).fromTwos(value));
	    }
	    toTwos(value) {
	        return toBigNumber(toBN(this).toTwos(value));
	    }
	    abs() {
	        if (this._hex[0] === "-") {
	            return BigNumber$1.from(this._hex.substring(1));
	        }
	        return this;
	    }
	    add(other) {
	        return toBigNumber(toBN(this).add(toBN(other)));
	    }
	    sub(other) {
	        return toBigNumber(toBN(this).sub(toBN(other)));
	    }
	    div(other) {
	        const o = BigNumber$1.from(other);
	        if (o.isZero()) {
	            throwFault("division by zero", "div");
	        }
	        return toBigNumber(toBN(this).div(toBN(other)));
	    }
	    mul(other) {
	        return toBigNumber(toBN(this).mul(toBN(other)));
	    }
	    mod(other) {
	        const value = toBN(other);
	        if (value.isNeg()) {
	            throwFault("cannot modulo negative values", "mod");
	        }
	        return toBigNumber(toBN(this).umod(value));
	    }
	    pow(other) {
	        const value = toBN(other);
	        if (value.isNeg()) {
	            throwFault("cannot raise to negative values", "pow");
	        }
	        return toBigNumber(toBN(this).pow(value));
	    }
	    and(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("cannot 'and' negative values", "and");
	        }
	        return toBigNumber(toBN(this).and(value));
	    }
	    or(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("cannot 'or' negative values", "or");
	        }
	        return toBigNumber(toBN(this).or(value));
	    }
	    xor(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("cannot 'xor' negative values", "xor");
	        }
	        return toBigNumber(toBN(this).xor(value));
	    }
	    mask(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("cannot mask negative values", "mask");
	        }
	        return toBigNumber(toBN(this).maskn(value));
	    }
	    shl(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("cannot shift negative values", "shl");
	        }
	        return toBigNumber(toBN(this).shln(value));
	    }
	    shr(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("cannot shift negative values", "shr");
	        }
	        return toBigNumber(toBN(this).shrn(value));
	    }
	    eq(other) {
	        return toBN(this).eq(toBN(other));
	    }
	    lt(other) {
	        return toBN(this).lt(toBN(other));
	    }
	    lte(other) {
	        return toBN(this).lte(toBN(other));
	    }
	    gt(other) {
	        return toBN(this).gt(toBN(other));
	    }
	    gte(other) {
	        return toBN(this).gte(toBN(other));
	    }
	    isNegative() {
	        return (this._hex[0] === "-");
	    }
	    isZero() {
	        return toBN(this).isZero();
	    }
	    toNumber() {
	        try {
	            return toBN(this).toNumber();
	        }
	        catch (error) {
	            throwFault("overflow", "toNumber", this.toString());
	        }
	        return null;
	    }
	    toString() {
	        // Lots of people expect this, which we do not support, so check (See: #889)
	        if (arguments.length > 0) {
	            if (arguments[0] === 10) {
	                if (!_warnedToStringRadix) {
	                    _warnedToStringRadix = true;
	                    logger$1.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
	                }
	            }
	            else if (arguments[0] === 16) {
	                logger$1.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	            else {
	                logger$1.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	        }
	        return toBN(this).toString(10);
	    }
	    toHexString() {
	        return this._hex;
	    }
	    toJSON(key) {
	        return { type: "BigNumber", hex: this.toHexString() };
	    }
	    static from(value) {
	        if (value instanceof BigNumber$1) {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            if (value.match(/^-?0x[0-9a-f]+$/i)) {
	                return new BigNumber$1(_constructorGuard, toHex$4(value));
	            }
	            if (value.match(/^-?[0-9]+$/)) {
	                return new BigNumber$1(_constructorGuard, toHex$4(new BN(value)));
	            }
	            return logger$1.throwArgumentError("invalid BigNumber string", "value", value);
	        }
	        if (typeof (value) === "number") {
	            if (value % 1) {
	                throwFault("underflow", "BigNumber.from", value);
	            }
	            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
	                throwFault("overflow", "BigNumber.from", value);
	            }
	            return BigNumber$1.from(String(value));
	        }
	        const anyValue = value;
	        if (typeof (anyValue) === "bigint") {
	            return BigNumber$1.from(anyValue.toString());
	        }
	        if (isBytes(anyValue)) {
	            return BigNumber$1.from(hexlify(anyValue));
	        }
	        if (anyValue) {
	            // Hexable interface (takes piority)
	            if (anyValue.toHexString) {
	                const hex = anyValue.toHexString();
	                if (typeof (hex) === "string") {
	                    return BigNumber$1.from(hex);
	                }
	            }
	            else {
	                // For now, handle legacy JSON-ified values (goes away in v6)
	                let hex = anyValue._hex;
	                // New-form JSON
	                if (hex == null && anyValue.type === "BigNumber") {
	                    hex = anyValue.hex;
	                }
	                if (typeof (hex) === "string") {
	                    if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
	                        return BigNumber$1.from(hex);
	                    }
	                }
	            }
	        }
	        return logger$1.throwArgumentError("invalid BigNumber value", "value", value);
	    }
	    static isBigNumber(value) {
	        return !!(value && value._isBigNumber);
	    }
	}
	// Normalize the hex string
	function toHex$4(value) {
	    // For BN, call on the hex string
	    if (typeof (value) !== "string") {
	        return toHex$4(value.toString(16));
	    }
	    // If negative, prepend the negative sign to the normalized positive value
	    if (value[0] === "-") {
	        // Strip off the negative sign
	        value = value.substring(1);
	        // Cannot have mulitple negative signs (e.g. "--0x04")
	        if (value[0] === "-") {
	            logger$1.throwArgumentError("invalid hex", "value", value);
	        }
	        // Call toHex on the positive component
	        value = toHex$4(value);
	        // Do not allow "-0x00"
	        if (value === "0x00") {
	            return value;
	        }
	        // Negate the value
	        return "-" + value;
	    }
	    // Add a "0x" prefix if missing
	    if (value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    // Normalize zero
	    if (value === "0x") {
	        return "0x00";
	    }
	    // Make the string even length
	    if (value.length % 2) {
	        value = "0x0" + value.substring(2);
	    }
	    // Trim to smallest even-length string
	    while (value.length > 4 && value.substring(0, 4) === "0x00") {
	        value = "0x" + value.substring(4);
	    }
	    return value;
	}
	function toBigNumber(value) {
	    return BigNumber$1.from(toHex$4(value));
	}
	function toBN(value) {
	    const hex = BigNumber$1.from(value).toHexString();
	    if (hex[0] === "-") {
	        return (new BN("-" + hex.substring(3), 16));
	    }
	    return new BN(hex.substring(2), 16);
	}
	function throwFault(fault, operation, value) {
	    const params = { fault: fault, operation: operation };
	    if (value != null) {
	        params.value = value;
	    }
	    return logger$1.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
	}

	const AddressZero = "0x0000000000000000000000000000000000000000";

	var _format = "hh-sol-artifact-1";
	var contractName = "Ecosystem";
	var sourceName = "src/models/Ecosystem.sol";
	var abi = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_daoAddress",
					type: "address"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_daoAddress",
					type: "address"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode = "0x608060405234801561001057600080fd5b50610a49806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063332a4d0914610046578063884a0c5f1461006f578063f6a3d24e14610084575b600080fd5b610059610054366004610578565b6100a4565b6040516100669190610911565b60405180910390f35b61008261007d366004610599565b610230565b005b610097610092366004610578565b610445565b6040516100669190610906565b6100ac610505565b6100b582610456565b1561022b576001600160a01b0382168082526040516100f5916100da9160200161076f565b60405160208183030381529060405280519060200120610487565b6001600160a01b0316602080830191909152815160405161011b926100da9291016107f7565b6001600160a01b031660408083019190915281519051610141916100da916020016106b5565b6001600160a01b03166101008201528051604051610165916100da91602001610882565b6001600160a01b03166060820152306080820152805160405161018e916100da916020016107ae565b6001600160a01b031660a082015280516040516101b1916100da91602001610840565b6001600160a01b031661014082015280516040516101d5916100da91602001610731565b6001600160a01b031661012082015280516040516101f9916100da916020016108bd565b6001600160a01b031660c0820152805160405161021c916100da916020016106f4565b6001600160a01b031660e08201525b919050565b8051604051610265916102459160200161076f565b6040516020818303038152906040528051906020012082602001516104a2565b805160405161029a9161027a916020016107f7565b6040516020818303038152906040528051906020012082604001516104a2565b80516040516102d0916102af916020016106b5565b604051602081830303815290604052805190602001208261010001516104a2565b8051604051610305916102e591602001610882565b6040516020818303038152906040528051906020012082606001516104a2565b805160405161033a9161031a916020016107ae565b604051602081830303815290604052805190602001208260a001516104a2565b80516040516103709161034f91602001610840565b604051602081830303815290604052805190602001208261014001516104a2565b80516040516103a69161038591602001610731565b604051602081830303815290604052805190602001208261012001516104a2565b80516040516103db916103bb916020016108bd565b604051602081830303815290604052805190602001208260c001516104a2565b8051604051610410916103f0916020016106f4565b604051602081830303815290604052805190602001208260e001516104a2565b80516040516104429161042591602001610683565b6040516020818303038152906040528051906020012060016104d0565b50565b600061045082610456565b92915050565b60006104508260405160200161046c9190610683565b604051602081830303815290604052805190602001206104f0565b6000908152602081905260409020546001600160a01b031690565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b600091825260016020526040909120805460ff1916911515919091179055565b60009081526001602052604090205460ff1690565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b80356001600160a01b038116811461022b57600080fd5b600060208284031215610589578081fd5b61059282610561565b9392505050565b60006101608083850312156105ac578182fd5b6105b5816109ef565b90506105c083610561565b81526105ce60208401610561565b60208201526105df60408401610561565b60408201526105f060608401610561565b606082015261060160808401610561565b608082015261061260a08401610561565b60a082015261062360c08401610561565b60c082015261063460e08401610561565b60e0820152610100610647818501610561565b90820152610120610659848201610561565b9082015261014061066b848201610561565b908201529392505050565b6001600160a01b03169052565b6001600160a01b039190911681526040602082018190526006908201526565786973747360d01b606082015260800190565b6001600160a01b0391909116815260406020820181905260139082015272636f6e666967757261746f724164647265737360681b606082015260800190565b6001600160a01b0391909116815260406020820181905260119082015270746f6b656e4d6f64656c4164647265737360781b606082015260800190565b6001600160a01b03919091168152604060208201819052601290820152717265676973747261746f724164647265737360701b606082015260800190565b6001600160a01b039190911681526040602082018190526013908201527262616c616e63654d6f64656c4164647265737360681b606082015260800190565b6001600160a01b039190911681526040602082018190526019908201527f656c61737469634d6f64756c654d6f64656c4164647265737300000000000000606082015260800190565b6001600160a01b03919091168152604060208201819052601e908201527f62616c616e63654d756c7469706c696572734d6f64656c416464726573730000606082015260800190565b6001600160a01b0391909116815260406020820181905260169082015275676f7665726e616e6365546f6b656e4164647265737360501b606082015260800190565b6001600160a01b03919091168152604060208201819052600f908201526e64616f4d6f64656c4164647265737360881b606082015260800190565b6001600160a01b039190911681526040602082018190526017908201527f746f6b656e486f6c6465724d6f64656c41646472657373000000000000000000606082015260800190565b901515815260200190565b600061016082019050610925828451610676565b60208301516109376020840182610676565b50604083015161094a6040840182610676565b50606083015161095d6060840182610676565b5060808301516109706080840182610676565b5060a083015161098360a0840182610676565b5060c083015161099660c0840182610676565b5060e08301516109a960e0840182610676565b50610100808401516109bd82850182610676565b5050610120808401516109d282850182610676565b5050610140808401516109e782850182610676565b505092915050565b60405181810167ffffffffffffffff81118282101715610a0b57fe5b60405291905056fea264697066735822122046d7d8783b80b4dd55d59d1858c7c2bea06ae3fb7e11cce370df45d6aa0c3cbb64736f6c63430007020033";
	var deployedBytecode = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063332a4d0914610046578063884a0c5f1461006f578063f6a3d24e14610084575b600080fd5b610059610054366004610578565b6100a4565b6040516100669190610911565b60405180910390f35b61008261007d366004610599565b610230565b005b610097610092366004610578565b610445565b6040516100669190610906565b6100ac610505565b6100b582610456565b1561022b576001600160a01b0382168082526040516100f5916100da9160200161076f565b60405160208183030381529060405280519060200120610487565b6001600160a01b0316602080830191909152815160405161011b926100da9291016107f7565b6001600160a01b031660408083019190915281519051610141916100da916020016106b5565b6001600160a01b03166101008201528051604051610165916100da91602001610882565b6001600160a01b03166060820152306080820152805160405161018e916100da916020016107ae565b6001600160a01b031660a082015280516040516101b1916100da91602001610840565b6001600160a01b031661014082015280516040516101d5916100da91602001610731565b6001600160a01b031661012082015280516040516101f9916100da916020016108bd565b6001600160a01b031660c0820152805160405161021c916100da916020016106f4565b6001600160a01b031660e08201525b919050565b8051604051610265916102459160200161076f565b6040516020818303038152906040528051906020012082602001516104a2565b805160405161029a9161027a916020016107f7565b6040516020818303038152906040528051906020012082604001516104a2565b80516040516102d0916102af916020016106b5565b604051602081830303815290604052805190602001208261010001516104a2565b8051604051610305916102e591602001610882565b6040516020818303038152906040528051906020012082606001516104a2565b805160405161033a9161031a916020016107ae565b604051602081830303815290604052805190602001208260a001516104a2565b80516040516103709161034f91602001610840565b604051602081830303815290604052805190602001208261014001516104a2565b80516040516103a69161038591602001610731565b604051602081830303815290604052805190602001208261012001516104a2565b80516040516103db916103bb916020016108bd565b604051602081830303815290604052805190602001208260c001516104a2565b8051604051610410916103f0916020016106f4565b604051602081830303815290604052805190602001208260e001516104a2565b80516040516104429161042591602001610683565b6040516020818303038152906040528051906020012060016104d0565b50565b600061045082610456565b92915050565b60006104508260405160200161046c9190610683565b604051602081830303815290604052805190602001206104f0565b6000908152602081905260409020546001600160a01b031690565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b600091825260016020526040909120805460ff1916911515919091179055565b60009081526001602052604090205460ff1690565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b80356001600160a01b038116811461022b57600080fd5b600060208284031215610589578081fd5b61059282610561565b9392505050565b60006101608083850312156105ac578182fd5b6105b5816109ef565b90506105c083610561565b81526105ce60208401610561565b60208201526105df60408401610561565b60408201526105f060608401610561565b606082015261060160808401610561565b608082015261061260a08401610561565b60a082015261062360c08401610561565b60c082015261063460e08401610561565b60e0820152610100610647818501610561565b90820152610120610659848201610561565b9082015261014061066b848201610561565b908201529392505050565b6001600160a01b03169052565b6001600160a01b039190911681526040602082018190526006908201526565786973747360d01b606082015260800190565b6001600160a01b0391909116815260406020820181905260139082015272636f6e666967757261746f724164647265737360681b606082015260800190565b6001600160a01b0391909116815260406020820181905260119082015270746f6b656e4d6f64656c4164647265737360781b606082015260800190565b6001600160a01b03919091168152604060208201819052601290820152717265676973747261746f724164647265737360701b606082015260800190565b6001600160a01b039190911681526040602082018190526013908201527262616c616e63654d6f64656c4164647265737360681b606082015260800190565b6001600160a01b039190911681526040602082018190526019908201527f656c61737469634d6f64756c654d6f64656c4164647265737300000000000000606082015260800190565b6001600160a01b03919091168152604060208201819052601e908201527f62616c616e63654d756c7469706c696572734d6f64656c416464726573730000606082015260800190565b6001600160a01b0391909116815260406020820181905260169082015275676f7665726e616e6365546f6b656e4164647265737360501b606082015260800190565b6001600160a01b03919091168152604060208201819052600f908201526e64616f4d6f64656c4164647265737360881b606082015260800190565b6001600160a01b039190911681526040602082018190526017908201527f746f6b656e486f6c6465724d6f64656c41646472657373000000000000000000606082015260800190565b901515815260200190565b600061016082019050610925828451610676565b60208301516109376020840182610676565b50604083015161094a6040840182610676565b50606083015161095d6060840182610676565b5060808301516109706080840182610676565b5060a083015161098360a0840182610676565b5060c083015161099660c0840182610676565b5060e08301516109a960e0840182610676565b50610100808401516109bd82850182610676565b5050610120808401516109d282850182610676565b5050610140808401516109e782850182610676565b505092915050565b60405181810167ffffffffffffffff81118282101715610a0b57fe5b60405291905056fea264697066735822122046d7d8783b80b4dd55d59d1858c7c2bea06ae3fb7e11cce370df45d6aa0c3cbb64736f6c63430007020033";
	var linkReferences = {
	};
	var deployedLinkReferences = {
	};
	var EcosystemContract = {
		_format: _format,
		contractName: contractName,
		sourceName: sourceName,
		abi: abi,
		bytecode: bytecode,
		deployedBytecode: deployedBytecode,
		linkReferences: linkReferences,
		deployedLinkReferences: deployedLinkReferences
	};

	/* eslint class-methods-use-this: 0 */
	const prefix = '@elastic-dao/sdk';
	const validKeys = ['from', 'gasLimit', 'gasPrice', 'nonce', 'value'];
	class Base {
	  constructor(sdk) {
	    this._sdk = sdk;
	  }

	  get sdk() {
	    return this._sdk;
	  }

	  sanitizeOverrides(requested = {}) {
	    const overrides = {};

	    if (requested.from && isAddress$1(requested.from)) {
	      overrides.from = requested.from;
	    } else {
	      console.warn(`${prefix}: Requested override 'from' (${requested.from}) is not a valid address and was excluded`);
	    }

	    if (requested.gasLimit) {
	      try {
	        overrides.gasLimit = this.toEthersBigNumber(requested.gasLimit);
	      } catch (e) {
	        console.warn(`${prefix}: Requested override 'gasLimit' (${requested.gasLimit}) is invalid and was excluded (${e.message})`);
	      }
	    }

	    if (requested.gasPrice) {
	      try {
	        overrides.gasPrice = this.toEthersBigNumber(requested.gasPrice);
	      } catch (e) {
	        console.warn(`${prefix}: Requested override 'gasPrice' (${requested.gasPrice}) is invalid and was excluded (${e.message})`);
	      }
	    }

	    if (requested.nonce && isNumber$3(requested.nonce)) {
	      overrides.nonce = requested.nonce;
	    } else {
	      console.warn(`${prefix}: Requested override 'nonce' (${requested.nonce}) is not a valid number and was excluded`);
	    }

	    if (requested.value) {
	      try {
	        overrides.value = this.toEthersBigNumber(requested.value, 18);
	      } catch (e) {
	        console.warn(`${prefix}: Requested override 'value' (${requested.value}) is invalid and was excluded (${e.message})`);
	      }
	    }

	    Object.keys(requested).forEach(key => {
	      if (!validKeys.includes(key)) {
	        console.warn(`${prefix}: Requested override '${key}' is not supported and was excluded`);
	      }
	    });
	    return overrides;
	  }

	  toBigNumber(value, decimalShift = 0) {
	    return BigNumber(value.toString()).dividedBy(10 ** decimalShift);
	  }

	  toEthersBigNumber(value, decimalShift = 0) {
	    return BigNumber$1.from(BigNumber(value.toString()).multipliedBy(10 ** decimalShift).dp(0).toFixed());
	  }

	  toNumber(value, decimalShift = 0) {
	    return this.toBigNumber(value, decimalShift).toNumber();
	  }

	}

	/* eslint class-methods-use-this: 0 */
	class ElasticModel extends Base {
	  async refresh() {
	    return this.constructor.deserialize(this.id);
	  }

	  sanitize(obj) {
	    const clean = {};
	    const keys = Object.keys(obj);
	    keys.forEach(key => {
	      clean[key] = obj[key];

	      try {
	        if (isBigNumber$1(obj[key])) {
	          clean[key] = obj[key].toFixed();
	        }
	      } catch (e) {// console.error(e);
	      }
	    });
	    return clean;
	  }

	}

	const cache = {};
	const prefix$1 = '@elastic-dao/sdk - Ecosystem';
	const isEcosystem = thing => thing && typeof thing === 'object' && thing instanceof Ecosystem;
	const validateIsEcosystem = thing => {
	  const message = 'not an Ecosystem';
	  validate$1(isEcosystem(thing), {
	    message,
	    prefix: prefix$1
	  });
	};
	class Ecosystem extends ElasticModel {
	  constructor(sdk, {
	    balanceModelAddress,
	    balanceMultipliersModelAddress,
	    configuratorAddress,
	    daoAddress,
	    daoModelAddress,
	    ecosystemModelAddress,
	    elasticModuleModelAddress,
	    governanceTokenAddress,
	    registratorAddress,
	    tokenHolderModelAddress,
	    tokenModelAddress
	  }) {
	    super(sdk);
	    this.id = (daoAddress || AddressZero).toLowerCase();
	    cache[this.id] = {
	      balanceModelAddress,
	      balanceMultipliersModelAddress,
	      configuratorAddress,
	      daoAddress,
	      daoModelAddress,
	      ecosystemModelAddress,
	      elasticModuleModelAddress,
	      governanceTokenAddress,
	      registratorAddress,
	      tokenHolderModelAddress,
	      tokenModelAddress
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$1
	    });
	    return sdk.contract({
	      abi: EcosystemContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, daoAddress) {
	    validateIsAddress$1(daoAddress, {
	      prefix: prefix$1
	    });
	    const ecosystemModel = await this.contract(sdk, sdk.env.elasticDAO.ecosystemModelAddress);
	    const {
	      balanceModelAddress,
	      balanceMultipliersModelAddress,
	      configuratorAddress,
	      daoModelAddress,
	      ecosystemModelAddress,
	      elasticModuleModelAddress,
	      governanceTokenAddress,
	      registratorAddress,
	      tokenHolderModelAddress,
	      tokenModelAddress
	    } = await ecosystemModel.deserialize(daoAddress);
	    return new Ecosystem(sdk, {
	      balanceModelAddress,
	      balanceMultipliersModelAddress,
	      configuratorAddress,
	      daoAddress,
	      daoModelAddress,
	      ecosystemModelAddress,
	      elasticModuleModelAddress,
	      governanceTokenAddress,
	      registratorAddress,
	      tokenHolderModelAddress,
	      tokenModelAddress
	    });
	  } // Getters


	  get address() {
	    return this.sdk.env.elasticDAO.ecosystemModelAddress;
	  }

	  get balanceModelAddress() {
	    return cache[this.id].balanceModelAddress;
	  }

	  get balanceMultipliersModelAddress() {
	    return cache[this.id].balanceMultipliersModelAddress;
	  }

	  get configuratorAddress() {
	    return cache[this.id].configuratorAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get daoAddress() {
	    return cache[this.id].daoAddress;
	  }

	  get daoModelAddress() {
	    return cache[this.id].daoModelAddress;
	  }

	  get ecosystemModelAddress() {
	    return cache[this.id].ecosystemModelAddress;
	  }

	  get elasticModuleModelAddress() {
	    return cache[this.id].elasticModuleModelAddress;
	  }

	  get governanceTokenAddress() {
	    return cache[this.id].governanceTokenAddress;
	  }

	  get registratorAddress() {
	    return cache[this.id].registratorAddress;
	  }

	  get tokenHolderModelAddress() {
	    return cache[this.id].tokenHolderModelAddress;
	  }

	  get tokenModelAddress() {
	    return cache[this.id].tokenModelAddress;
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.daoAddress);
	  }

	  toObject() {
	    const {
	      id
	    } = this;
	    return this.sanitize({ ...cache[id],
	      id
	    });
	  }

	}

	var _format$1 = "hh-sol-artifact-1";
	var contractName$1 = "Token";
	var sourceName$1 = "src/models/Token.sol";
	var abi$1 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_uuid",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "_ecosystem",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_uuid",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_uuid",
					type: "address"
				}
			],
			name: "incrementCounter",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "record",
					type: "tuple"
				},
				{
					internalType: "uint256",
					name: "numberOfTokenHolders",
					type: "uint256"
				}
			],
			name: "updateNumberOfTokenHolders",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$1 = "";
	var deployedBytecode$1 = "";
	var linkReferences$1 = {
	};
	var deployedLinkReferences$1 = {
	};
	var TokenContract = {
		_format: _format$1,
		contractName: contractName$1,
		sourceName: sourceName$1,
		abi: abi$1,
		bytecode: bytecode$1,
		deployedBytecode: deployedBytecode$1,
		linkReferences: linkReferences$1,
		deployedLinkReferences: deployedLinkReferences$1
	};

	const cache$1 = {};
	const prefix$2 = '@elastic-dao/sdk - Token';
	const isToken = thing => thing && typeof thing === 'object' && thing instanceof Token;
	const validateIsToken = thing => {
	  const message = 'not a Token';
	  validate$1(isToken(thing), {
	    message,
	    prefix: prefix$2
	  });
	};
	class Token extends ElasticModel {
	  constructor(sdk, {
	    capitalDelta,
	    counter,
	    ecosystem,
	    elasticity,
	    k,
	    lambda,
	    m,
	    maxLambdaPurchase,
	    name,
	    numberOfTokenHolders,
	    symbol,
	    uuid
	  }) {
	    super(sdk);
	    this.id = uuid.toLowerCase();
	    cache$1[this.id] = {
	      capitalDelta,
	      counter,
	      ecosystem,
	      elasticity,
	      k,
	      lambda,
	      m,
	      maxLambdaPurchase,
	      name,
	      numberOfTokenHolders,
	      symbol,
	      uuid
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$2
	    });
	    return sdk.contract({
	      abi: TokenContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, uuid, ecosystem) {
	    validateIsAddress$1(uuid, {
	      prefix: prefix$2
	    });
	    validateIsEcosystem(ecosystem);
	    const tokenModel = await this.contract(sdk, ecosystem.tokenModelAddress);
	    const {
	      capitalDelta,
	      counter,
	      elasticity,
	      k,
	      lambda,
	      m,
	      maxLambdaPurchase,
	      name,
	      numberOfTokenHolders,
	      symbol
	    } = await tokenModel.deserialize(uuid, ecosystem.toObject(false));
	    return new Token(sdk, {
	      capitalDelta,
	      counter,
	      ecosystem,
	      elasticity,
	      k,
	      lambda,
	      m,
	      maxLambdaPurchase,
	      name,
	      numberOfTokenHolders,
	      symbol,
	      uuid
	    });
	  } // Getters


	  get address() {
	    return this.ecosystem.tokenModelAddress;
	  }

	  get capitalDelta() {
	    return this.toBigNumber(cache$1[this.id].capitalDelta, 18);
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get counter() {
	    return this.toNumber(cache$1[this.id].counter);
	  }

	  get ecosystem() {
	    return cache$1[this.id].ecosystem;
	  }

	  get elasticity() {
	    return this.toBigNumber(cache$1[this.id].elasticity, 18);
	  }

	  get k() {
	    return this.toBigNumber(cache$1[this.id].k, 18);
	  }

	  get lambda() {
	    return this.toBigNumber(cache$1[this.id].lambda, 18);
	  }

	  get m() {
	    return this.toBigNumber(cache$1[this.id].m, 18);
	  }

	  get maxLambdaPurchase() {
	    return this.toBigNumber(cache$1[this.id].maxLambdaPurchase, 18);
	  }

	  get name() {
	    return cache$1[this.id].name;
	  }

	  get numberOfTokenHolders() {
	    return this.toNumber(cache$1[this.id].numberOfTokenHolders);
	  }

	  get symbol() {
	    return cache$1[this.id].symbol;
	  }

	  get uuid() {
	    return cache$1[this.id].uuid;
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.uuid, this.ecosystem);
	  }

	  toObject(includeNested = true) {
	    const {
	      ecosystem,
	      id
	    } = this;
	    const obj = { ...cache$1[id],
	      id,
	      ecosystem: ecosystem.toObject(false)
	    };

	    if (includeNested === false) {
	      delete obj.ecosystem;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$2 = "hh-sol-artifact-1";
	var contractName$2 = "TokenHolder";
	var sourceName$2 = "src/models/TokenHolder.sol";
	var abi$2 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_account",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "_ecosystem",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "_token",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "account",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "string",
									name: "symbol",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "eByl",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "elasticity",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "k",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "m",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxLambdaPurchase",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "numberOfTokenHolders",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct Token.Instance",
							name: "token",
							type: "tuple"
						}
					],
					internalType: "struct TokenHolder.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_account",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "_ecosystem",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "_token",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "account",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "string",
									name: "symbol",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "eByl",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "elasticity",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "k",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "m",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxLambdaPurchase",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "numberOfTokenHolders",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct Token.Instance",
							name: "token",
							type: "tuple"
						}
					],
					internalType: "struct TokenHolder.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$2 = "0x608060405234801561001057600080fd5b50610a3f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631d4cf55c146100465780638133b1681461006f578063b1a771eb14610084575b600080fd5b6100596100543660046105e5565b6100a4565b60405161006691906108ca565b60405180910390f35b61008261007d366004610644565b6100bb565b005b6100976100923660046105e5565b610172565b60405161006691906108d5565b60006100b184848461020c565b90505b9392505050565b60808101515181516040516100f8926100d8929091602001610891565b604051602081830303815290604052805190602001208260200151610243565b608081015151815160405161013592610115929091602001610859565b604051602081830303815290604052805190602001208260400151610243565b608081015151815160405161016f92610152929091602001610821565b604051602081830303815290604052805190602001206001610255565b50565b61017a61029f565b6001600160a01b0384168152606081018390526080810182905261019f84848461020c565b156100b45760808101515181516040516101dc926101c1929091602001610891565b60405160208183030381529060405280519060200120610275565b6020808301919091526080820151518251604051610200936101c193929101610859565b60408201529392505050565b60006100b1826000015185604051602001610228929190610821565b6040516020818303038152906040528051906020012061028a565b60009182526005602052604090912055565b600091825260016020526040909120805460ff1916911515919091179055565b6000818152600560205260409020545b919050565b60009081526001602052604090205460ff1690565b6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016102d06102e2565b81526020016102dd61033e565b905290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b60405180610180016040528060006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016102dd6102e2565b80356001600160a01b038116811461028557600080fd5b600082601f8301126103cf578081fd5b813567ffffffffffffffff8111156103e357fe5b6103f6601f8201601f19166020016109e5565b915080825283602082850101111561040d57600080fd5b8060208401602084013760009082016020015292915050565b6000610160808385031215610439578182fd5b610442816109e5565b91505061044e826103a8565b815261045c602083016103a8565b602082015261046d604083016103a8565b604082015261047e606083016103a8565b606082015261048f608083016103a8565b60808201526104a060a083016103a8565b60a08201526104b160c083016103a8565b60c08201526104c260e083016103a8565b60e08201526101006104d58184016103a8565b908201526101206104e78382016103a8565b908201526101406104f98382016103a8565b9082015292915050565b60006102c08284031215610515578081fd5b6105206101806109e5565b905061052b826103a8565b8152602082013567ffffffffffffffff8082111561054857600080fd5b610554858386016103bf565b6020840152604084013591508082111561056d57600080fd5b5061057a848285016103bf565b604083015250606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101606104f984828501610426565b60008060006101a084860312156105fa578283fd5b610603846103a8565b92506106128560208601610426565b915061018084013567ffffffffffffffff81111561062e578182fd5b61063a86828701610503565b9150509250925092565b600060208284031215610655578081fd5b813567ffffffffffffffff8082111561066c578283fd5b908301906101e08286031215610680578283fd5b60405160a08101818110838211171561069557fe5b6040526106a1836103a8565b815260208301356020820152604083013560408201526106c48660608501610426565b60608201526101c0830135828111156106db578485fd5b6106e787828601610503565b60808301525095945050505050565b6001600160a01b03169052565b60008151808452815b818110156107285760208185018101518683018201520161070c565b818111156107395782602083870101525b50601f01601f19169290920160200192915050565b6107598282516106f6565b602081015161076b60208401826106f6565b50604081015161077e60408401826106f6565b50606081015161079160608401826106f6565b5060808101516107a460808401826106f6565b5060a08101516107b760a08401826106f6565b5060c08101516107ca60c08401826106f6565b5060e08101516107dd60e08401826106f6565b50610100808201516107f1828501826106f6565b505061012080820151610806828501826106f6565b50506101408082015161081b828501826106f6565b50505050565b6001600160a01b039283168152911660208201526060604082018190526006908201526565786973747360d01b608082015260a00190565b6001600160a01b03928316815291166020820152606060408201819052600690820152656c616d62646160d01b608082015260a00190565b6001600160a01b039283168152911660208201526060604082018190526007908201526631b7bab73a32b960c91b608082015260a00190565b901515815260200190565b60006020825260018060a01b03835116602083015260208301516040830152604083015160608301526060830151610910608084018261074e565b5060808301516101e080818501525061092e610200840182516106f6565b60208101516102c08061022086015261094b6104c0860183610703565b915060408301516101ff198684030161024087015261096a8382610703565b9250506060830151610260860152608083015161028086015260a08301516102a086015260c0830151818601525060e08201516102e085015261010082015161030085015261012082015161032085015261014082015161034085015261016082015191506109dd61036085018361074e565b949350505050565b60405181810167ffffffffffffffff81118282101715610a0157fe5b60405291905056fea26469706673582212203d768c6707f67c6f975467dc6206c6403dda2d99cfc3430534fa8a9211789f1b64736f6c63430007020033";
	var deployedBytecode$2 = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631d4cf55c146100465780638133b1681461006f578063b1a771eb14610084575b600080fd5b6100596100543660046105e5565b6100a4565b60405161006691906108ca565b60405180910390f35b61008261007d366004610644565b6100bb565b005b6100976100923660046105e5565b610172565b60405161006691906108d5565b60006100b184848461020c565b90505b9392505050565b60808101515181516040516100f8926100d8929091602001610891565b604051602081830303815290604052805190602001208260200151610243565b608081015151815160405161013592610115929091602001610859565b604051602081830303815290604052805190602001208260400151610243565b608081015151815160405161016f92610152929091602001610821565b604051602081830303815290604052805190602001206001610255565b50565b61017a61029f565b6001600160a01b0384168152606081018390526080810182905261019f84848461020c565b156100b45760808101515181516040516101dc926101c1929091602001610891565b60405160208183030381529060405280519060200120610275565b6020808301919091526080820151518251604051610200936101c193929101610859565b60408201529392505050565b60006100b1826000015185604051602001610228929190610821565b6040516020818303038152906040528051906020012061028a565b60009182526005602052604090912055565b600091825260016020526040909120805460ff1916911515919091179055565b6000818152600560205260409020545b919050565b60009081526001602052604090205460ff1690565b6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016102d06102e2565b81526020016102dd61033e565b905290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b60405180610180016040528060006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016102dd6102e2565b80356001600160a01b038116811461028557600080fd5b600082601f8301126103cf578081fd5b813567ffffffffffffffff8111156103e357fe5b6103f6601f8201601f19166020016109e5565b915080825283602082850101111561040d57600080fd5b8060208401602084013760009082016020015292915050565b6000610160808385031215610439578182fd5b610442816109e5565b91505061044e826103a8565b815261045c602083016103a8565b602082015261046d604083016103a8565b604082015261047e606083016103a8565b606082015261048f608083016103a8565b60808201526104a060a083016103a8565b60a08201526104b160c083016103a8565b60c08201526104c260e083016103a8565b60e08201526101006104d58184016103a8565b908201526101206104e78382016103a8565b908201526101406104f98382016103a8565b9082015292915050565b60006102c08284031215610515578081fd5b6105206101806109e5565b905061052b826103a8565b8152602082013567ffffffffffffffff8082111561054857600080fd5b610554858386016103bf565b6020840152604084013591508082111561056d57600080fd5b5061057a848285016103bf565b604083015250606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101606104f984828501610426565b60008060006101a084860312156105fa578283fd5b610603846103a8565b92506106128560208601610426565b915061018084013567ffffffffffffffff81111561062e578182fd5b61063a86828701610503565b9150509250925092565b600060208284031215610655578081fd5b813567ffffffffffffffff8082111561066c578283fd5b908301906101e08286031215610680578283fd5b60405160a08101818110838211171561069557fe5b6040526106a1836103a8565b815260208301356020820152604083013560408201526106c48660608501610426565b60608201526101c0830135828111156106db578485fd5b6106e787828601610503565b60808301525095945050505050565b6001600160a01b03169052565b60008151808452815b818110156107285760208185018101518683018201520161070c565b818111156107395782602083870101525b50601f01601f19169290920160200192915050565b6107598282516106f6565b602081015161076b60208401826106f6565b50604081015161077e60408401826106f6565b50606081015161079160608401826106f6565b5060808101516107a460808401826106f6565b5060a08101516107b760a08401826106f6565b5060c08101516107ca60c08401826106f6565b5060e08101516107dd60e08401826106f6565b50610100808201516107f1828501826106f6565b505061012080820151610806828501826106f6565b50506101408082015161081b828501826106f6565b50505050565b6001600160a01b039283168152911660208201526060604082018190526006908201526565786973747360d01b608082015260a00190565b6001600160a01b03928316815291166020820152606060408201819052600690820152656c616d62646160d01b608082015260a00190565b6001600160a01b039283168152911660208201526060604082018190526007908201526631b7bab73a32b960c91b608082015260a00190565b901515815260200190565b60006020825260018060a01b03835116602083015260208301516040830152604083015160608301526060830151610910608084018261074e565b5060808301516101e080818501525061092e610200840182516106f6565b60208101516102c08061022086015261094b6104c0860183610703565b915060408301516101ff198684030161024087015261096a8382610703565b9250506060830151610260860152608083015161028086015260a08301516102a086015260c0830151818601525060e08201516102e085015261010082015161030085015261012082015161032085015261014082015161034085015261016082015191506109dd61036085018361074e565b949350505050565b60405181810167ffffffffffffffff81118282101715610a0157fe5b60405291905056fea26469706673582212203d768c6707f67c6f975467dc6206c6403dda2d99cfc3430534fa8a9211789f1b64736f6c63430007020033";
	var linkReferences$2 = {
	};
	var deployedLinkReferences$2 = {
	};
	var TokenHolderContract = {
		_format: _format$2,
		contractName: contractName$2,
		sourceName: sourceName$2,
		abi: abi$2,
		bytecode: bytecode$2,
		deployedBytecode: deployedBytecode$2,
		linkReferences: linkReferences$2,
		deployedLinkReferences: deployedLinkReferences$2
	};

	const cache$2 = {};
	const prefix$3 = '@elastic-dao/sdk - TokenHolder';
	const isTokenHolder = thing => thing && typeof thing === 'object' && thing instanceof TokenHolder;
	const validateIsTokenHolder = thing => {
	  const message = 'not a TokenHolder';
	  validate$1(isTokenHolder(thing), {
	    message,
	    prefix: prefix$3
	  });
	};
	class TokenHolder extends ElasticModel {
	  constructor(sdk, {
	    account,
	    counter,
	    ecosystem,
	    lambda,
	    token
	  }) {
	    super(sdk);
	    this.id = `${token.uuid}|${account}`.toLowerCase();
	    cache$2[this.id] = {
	      account,
	      counter,
	      ecosystem,
	      lambda,
	      token
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$3
	    });
	    return sdk.contract({
	      abi: TokenHolderContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, uuid, ecosystem, token) {
	    validateIsAddress$1(uuid, {
	      prefix: prefix$3
	    });
	    validateIsEcosystem(ecosystem);
	    validateIsToken(token);
	    const tokenHolderModel = await this.contract(sdk, ecosystem.tokenHolderModelAddress);
	    const {
	      account,
	      counter,
	      lambda
	    } = await tokenHolderModel.deserialize(uuid, ecosystem.toObject(false), token.toObject(false));
	    return new TokenHolder(sdk, {
	      account,
	      counter,
	      ecosystem,
	      lambda,
	      token
	    });
	  } // Getters


	  get account() {
	    return cache$2[this.id].account;
	  }

	  get address() {
	    return this.ecosystem.tokenHolderModelAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get counter() {
	    return this.toNumber(cache$2[this.id].counter);
	  }

	  get ecosystem() {
	    return cache$2[this.id].ecosystem;
	  }

	  get lambda() {
	    return this.toBigNumber(cache$2[this.id].lambda, 18);
	  }

	  get token() {
	    return cache$2[this.id].token;
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.uuid, this.ecosystem, this.token);
	  }

	  toObject(includeNested = true) {
	    const {
	      ecosystem,
	      id,
	      token
	    } = this;
	    const obj = { ...cache$2[id],
	      id,
	      ecosystem: ecosystem.toObject(false),
	      token: token.toObject(false)
	    };

	    if (includeNested === false) {
	      delete obj.ecosystem;
	      delete obj.token;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$3 = "hh-sol-artifact-1";
	var contractName$3 = "Balance";
	var sourceName$3 = "src/models/Balance.sol";
	var abi$3 = [
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_blockNumber",
					type: "uint256"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "_ecosystem",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "_token",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "account",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "string",
									name: "symbol",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "eByl",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "elasticity",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "k",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "m",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxLambdaPurchase",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "numberOfTokenHolders",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct Token.Instance",
							name: "token",
							type: "tuple"
						}
					],
					internalType: "struct TokenHolder.Instance",
					name: "_tokenHolder",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "uint256",
							name: "blockNumber",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "string",
									name: "symbol",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "eByl",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "elasticity",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "k",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "m",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxLambdaPurchase",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "numberOfTokenHolders",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct Token.Instance",
							name: "token",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "account",
									type: "address"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								},
								{
									components: [
										{
											internalType: "address",
											name: "uuid",
											type: "address"
										},
										{
											internalType: "string",
											name: "name",
											type: "string"
										},
										{
											internalType: "string",
											name: "symbol",
											type: "string"
										},
										{
											internalType: "uint256",
											name: "counter",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "eByl",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "elasticity",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "k",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "lambda",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "m",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "maxLambdaPurchase",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "numberOfTokenHolders",
											type: "uint256"
										},
										{
											components: [
												{
													internalType: "address",
													name: "daoAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "balanceModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "balanceMultipliersModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "daoModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "ecosystemModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "elasticModuleModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "tokenHolderModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "tokenModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "configuratorAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "registratorAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "governanceTokenAddress",
													type: "address"
												}
											],
											internalType: "struct Ecosystem.Instance",
											name: "ecosystem",
											type: "tuple"
										}
									],
									internalType: "struct Token.Instance",
									name: "token",
									type: "tuple"
								}
							],
							internalType: "struct TokenHolder.Instance",
							name: "tokenHolder",
							type: "tuple"
						}
					],
					internalType: "struct Balance.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "account",
							type: "address"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "string",
									name: "symbol",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "eByl",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "elasticity",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "k",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "m",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxLambdaPurchase",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "numberOfTokenHolders",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct Token.Instance",
							name: "token",
							type: "tuple"
						}
					],
					internalType: "struct TokenHolder.Instance",
					name: "",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "pure",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "uint256",
							name: "blockNumber",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "string",
									name: "symbol",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "eByl",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "elasticity",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "k",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "m",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxLambdaPurchase",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "numberOfTokenHolders",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct Token.Instance",
							name: "token",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "account",
									type: "address"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								},
								{
									components: [
										{
											internalType: "address",
											name: "uuid",
											type: "address"
										},
										{
											internalType: "string",
											name: "name",
											type: "string"
										},
										{
											internalType: "string",
											name: "symbol",
											type: "string"
										},
										{
											internalType: "uint256",
											name: "counter",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "eByl",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "elasticity",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "k",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "lambda",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "m",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "maxLambdaPurchase",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "numberOfTokenHolders",
											type: "uint256"
										},
										{
											components: [
												{
													internalType: "address",
													name: "daoAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "balanceModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "balanceMultipliersModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "daoModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "ecosystemModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "elasticModuleModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "tokenHolderModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "tokenModelAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "configuratorAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "registratorAddress",
													type: "address"
												},
												{
													internalType: "address",
													name: "governanceTokenAddress",
													type: "address"
												}
											],
											internalType: "struct Ecosystem.Instance",
											name: "ecosystem",
											type: "tuple"
										}
									],
									internalType: "struct Token.Instance",
									name: "token",
									type: "tuple"
								}
							],
							internalType: "struct TokenHolder.Instance",
							name: "tokenHolder",
							type: "tuple"
						}
					],
					internalType: "struct Balance.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$3 = "";
	var deployedBytecode$3 = "";
	var linkReferences$3 = {
	};
	var deployedLinkReferences$3 = {
	};
	var BalanceContract = {
		_format: _format$3,
		contractName: contractName$3,
		sourceName: sourceName$3,
		abi: abi$3,
		bytecode: bytecode$3,
		deployedBytecode: deployedBytecode$3,
		linkReferences: linkReferences$3,
		deployedLinkReferences: deployedLinkReferences$3
	};

	const cache$3 = {};
	const prefix$4 = '@elastic-dao/sdk - models/Balance';
	const isBalance = thing => thing && typeof thing === 'object' && thing instanceof Balance;
	const validateIsBalance = thing => {
	  const message = 'not a Balance';
	  validate$1(isBalance(thing), {
	    message,
	    prefix: prefix$4
	  });
	};
	class Balance extends ElasticModel {
	  constructor(sdk, {
	    blockNumber,
	    index,
	    k,
	    lambda,
	    m,
	    ecosystem,
	    token,
	    tokenHolder
	  }) {
	    super(sdk);
	    this.id = `${token.uuid}|${tokenHolder.account}|${blockNumber}`.toLowerCase();
	    cache$3[this.id] = {
	      blockNumber,
	      index,
	      k,
	      lambda,
	      m,
	      ecosystem,
	      token,
	      tokenHolder
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$4
	    });
	    return sdk.contract({
	      abi: BalanceContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, blockNumber, ecosystem, token, tokenHolder) {
	    validateIsNumber$1(blockNumber, {
	      prefix: prefix$4
	    });
	    validateIsEcosystem(ecosystem);
	    validateIsToken(token);
	    validateIsTokenHolder(tokenHolder);
	    const balanceModel = await this.contract(sdk, ecosystem.balanceModelAddress);
	    const {
	      index,
	      k,
	      lambda,
	      m
	    } = await balanceModel.deserialize(blockNumber, ecosystem.toObject(false), token.toObject(false), tokenHolder.toObject(false));
	    return new Balance(sdk, {
	      blockNumber,
	      index,
	      k,
	      lambda,
	      m,
	      ecosystem,
	      token,
	      tokenHolder
	    });
	  } // Getters


	  get address() {
	    return this.ecosystem.balanceModelAddress;
	  }

	  get blockNumber() {
	    return this.toNumber(cache$3[this.id].blockNumber);
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get index() {
	    return this.toNumber(cache$3[this.id].index);
	  }

	  get k() {
	    return this.toBigNumber(cache$3[this.id].k, 18);
	  }

	  get lambda() {
	    return this.toBigNumber(cache$3[this.id].lambda, 18);
	  }

	  get m() {
	    return this.toBigNumber(cache$3[this.id].m, 18);
	  }

	  get ecosystem() {
	    return cache$3[this.id].ecosystem;
	  }

	  get token() {
	    return cache$3[this.id].token;
	  }

	  get tokenHolder() {
	    return cache$3[this.id].tokenHolder;
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.blockNumber, this.ecosystem, this.token, this.tokenHolder);
	  }

	  toObject(includeNested = true) {
	    const {
	      ecosystem,
	      id,
	      token,
	      tokenHolder
	    } = this;
	    const obj = { ...cache$3[id],
	      id,
	      ecosystem: ecosystem.toObject(false),
	      token: token.toObject(false),
	      tokenHolder: tokenHolder.toObject(false)
	    };

	    if (includeNested === false) {
	      delete obj.ecosystem;
	      delete obj.token;
	      delete obj.tokenHolder;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$4 = "hh-sol-artifact-1";
	var contractName$4 = "BalanceMultipliers";
	var sourceName$4 = "src/models/BalanceMultipliers.sol";
	var abi$4 = [
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_blockNumber",
					type: "uint256"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "_ecosystem",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "_token",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "uint256",
							name: "blockNumber",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "string",
									name: "symbol",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "eByl",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "elasticity",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "k",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "m",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxLambdaPurchase",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "numberOfTokenHolders",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct Token.Instance",
							name: "token",
							type: "tuple"
						}
					],
					internalType: "struct BalanceMultipliers.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "string",
							name: "symbol",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "eByl",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "elasticity",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxLambdaPurchase",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "numberOfTokenHolders",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct Token.Instance",
					name: "",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "pure",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "uint256",
							name: "blockNumber",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "k",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "m",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "string",
									name: "symbol",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "eByl",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "elasticity",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "k",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "lambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "m",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxLambdaPurchase",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "numberOfTokenHolders",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct Token.Instance",
							name: "token",
							type: "tuple"
						}
					],
					internalType: "struct BalanceMultipliers.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$4 = "0x608060405234801561001057600080fd5b50610d69806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634ce53b9f14610046578063a261a55a1461006f578063e5d378981461008f575b600080fd5b6100596100543660046108f1565b6100a4565b6040516100669190610c05565b60405180910390f35b61008261007d3660046108f1565b6100d1565b6040516100669190610bb0565b6100a261009d36600461083a565b6100da565b005b6100ac6104f6565b6100bd8483606001516000856101a3565b93845250608083019190915260a082015290565b60019392505050565b61011c8160a001516000015182602001516040516020016100fc929190610b3e565b6040516020818303038152906040528051906020012082600001516103b3565b61015e8160a0015160000151826020015160405160200161013e929190610b8a565b6040516020818303038152906040528051906020012082604001516103b3565b6101a08160a00151600001518260200151604051602001610180929190610b64565b6040516020818303038152906040528051906020012082606001516103b3565b50565b6101ab6104f6565b836101c65784815260006040820181905260608201526103ab565b83600114156103025760006101db84866103c5565b90506102128360000151826040516020016101f7929190610b3e565b604051602081830303815290604052805190602001206103fa565b80835215806102215750815186105b156102cc57836102ae578251604051610243916101f791600090602001610aba565b80835215806102525750815186105b1561026b575060006040820181905260608201526103ab565b8251604051610283916101f791600090602001610b12565b604080840191909152835190516102a3916101f791600090602001610ae6565b6060830152506103ab565b6102c486866102be87600161040f565b866101a3565b9150506103ab565b82516040516102e3916101f7918490602001610b8a565b604080840191909152835190516102a3916101f7918490602001610b64565b600061030f856002610451565b9050600061031d82866103c5565b90506103398460000151826040516020016101f7929190610b3e565b8084528710156103585761034f878387876101a3565b925050506103ab565b825187111561036d5761034f878383876101a3565b8351604051610384916101f7918490602001610b8a565b604080850191909152845190516103a3916101f7918490602001610b64565b606084015250505b949350505050565b60009182526005602052604090912055565b6000828201838110156103f35760405162461bcd60e51b81526004016103ea90610bce565b60405180910390fd5b9392505050565b6000818152600560205260409020545b919050565b60006103f383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610493565b60006103f383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506104bf565b600081848411156104b75760405162461bcd60e51b81526004016103ea9190610bbb565b505050900390565b600081836104e05760405162461bcd60e51b81526004016103ea9190610bbb565b5060008385816104ec57fe5b0495945050505050565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001610525610537565b8152602001610532610593565b905290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b60405180610180016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610532610537565b80356001600160a01b038116811461040a57600080fd5b600082601f830112610624578081fd5b813567ffffffffffffffff81111561063857fe5b61064b601f8201601f1916602001610d0f565b915080825283602082850101111561066257600080fd5b8060208401602084013760009082016020015292915050565b600061016080838503121561068e578182fd5b61069781610d0f565b9150506106a3826105fd565b81526106b1602083016105fd565b60208201526106c2604083016105fd565b60408201526106d3606083016105fd565b60608201526106e4608083016105fd565b60808201526106f560a083016105fd565b60a082015261070660c083016105fd565b60c082015261071760e083016105fd565b60e082015261010061072a8184016105fd565b9082015261012061073c8382016105fd565b9082015261014061074e8382016105fd565b9082015292915050565b60006102c0828403121561076a578081fd5b610775610180610d0f565b9050610780826105fd565b8152602082013567ffffffffffffffff8082111561079d57600080fd5b6107a985838601610614565b602084015260408401359150808211156107c257600080fd5b506107cf84828501610614565b604083015250606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016061074e8482850161067b565b60006020828403121561084b578081fd5b813567ffffffffffffffff80821115610862578283fd5b908301906102008286031215610876578283fd5b60405160c08101818110838211171561088b57fe5b8060405250823581526020830135602082015260408301356040820152606083013560608201526108bf866080850161067b565b60808201526101e0830135828111156108d6578485fd5b6108e287828601610758565b60a08301525095945050505050565b60008060006101a08486031215610906578182fd5b83359250610917856020860161067b565b915061018084013567ffffffffffffffff811115610933578182fd5b61093f86828701610758565b9150509250925092565b6001600160a01b03169052565b60008151808452815b8181101561097b5760208185018101518683018201520161095f565b8181111561098c5782602083870101525b50601f01601f19169290920160200192915050565b600b81526a313637b1b5a73ab6b132b960a91b602082015260400190565b60018152606d60f81b602082015260400190565b60018152606b60f81b602082015260400190565b6109f2828251610949565b6020810151610a046020840182610949565b506040810151610a176040840182610949565b506060810151610a2a6060840182610949565b506080810151610a3d6080840182610949565b5060a0810151610a5060a0840182610949565b5060c0810151610a6360c0840182610949565b5060e0810151610a7660e0840182610949565b5061010080820151610a8a82850182610949565b505061012080820151610a9f82850182610949565b505061014080820151610ab482850182610949565b50505050565b6001600160a01b038316815260ff821660208201526060604082018190526000906103ab9083016109a1565b6001600160a01b038316815260ff821660208201526060604082018190526000906103ab9083016109bf565b6001600160a01b038316815260ff821660208201526060604082018190526000906103ab9083016109d3565b600060018060a01b0384168252826020830152606060408301526103ab606083016109a1565b600060018060a01b0384168252826020830152606060408301526103ab606083016109bf565b600060018060a01b0384168252826020830152606060408301526103ab606083016109d3565b901515815260200190565b6000602082526103f36020830184610956565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b600060208252825160208301526020830151604083015260408301516060830152606083015160808301526080830151610c4260a08401826109e7565b5060a0830151610200808185015250610c6061022084018251610949565b60208101516102c080610240860152610c7d6104e0860183610956565b9150604083015161021f1986840301610260870152610c9c8382610956565b925050606083015161028086015260808301516102a086015260a0830151818601525060c08201516102e085015260e082015161030085015261010082015161032085015261012082015161034085015261014082015161036085015261016082015191506103ab6103808501836109e7565b60405181810167ffffffffffffffff81118282101715610d2b57fe5b60405291905056fea2646970667358221220997a8e927518e1612a5d3c331d7d2782effdc70cc3367af168f400a73907d89d64736f6c63430007020033";
	var deployedBytecode$4 = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634ce53b9f14610046578063a261a55a1461006f578063e5d378981461008f575b600080fd5b6100596100543660046108f1565b6100a4565b6040516100669190610c05565b60405180910390f35b61008261007d3660046108f1565b6100d1565b6040516100669190610bb0565b6100a261009d36600461083a565b6100da565b005b6100ac6104f6565b6100bd8483606001516000856101a3565b93845250608083019190915260a082015290565b60019392505050565b61011c8160a001516000015182602001516040516020016100fc929190610b3e565b6040516020818303038152906040528051906020012082600001516103b3565b61015e8160a0015160000151826020015160405160200161013e929190610b8a565b6040516020818303038152906040528051906020012082604001516103b3565b6101a08160a00151600001518260200151604051602001610180929190610b64565b6040516020818303038152906040528051906020012082606001516103b3565b50565b6101ab6104f6565b836101c65784815260006040820181905260608201526103ab565b83600114156103025760006101db84866103c5565b90506102128360000151826040516020016101f7929190610b3e565b604051602081830303815290604052805190602001206103fa565b80835215806102215750815186105b156102cc57836102ae578251604051610243916101f791600090602001610aba565b80835215806102525750815186105b1561026b575060006040820181905260608201526103ab565b8251604051610283916101f791600090602001610b12565b604080840191909152835190516102a3916101f791600090602001610ae6565b6060830152506103ab565b6102c486866102be87600161040f565b866101a3565b9150506103ab565b82516040516102e3916101f7918490602001610b8a565b604080840191909152835190516102a3916101f7918490602001610b64565b600061030f856002610451565b9050600061031d82866103c5565b90506103398460000151826040516020016101f7929190610b3e565b8084528710156103585761034f878387876101a3565b925050506103ab565b825187111561036d5761034f878383876101a3565b8351604051610384916101f7918490602001610b8a565b604080850191909152845190516103a3916101f7918490602001610b64565b606084015250505b949350505050565b60009182526005602052604090912055565b6000828201838110156103f35760405162461bcd60e51b81526004016103ea90610bce565b60405180910390fd5b9392505050565b6000818152600560205260409020545b919050565b60006103f383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610493565b60006103f383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506104bf565b600081848411156104b75760405162461bcd60e51b81526004016103ea9190610bbb565b505050900390565b600081836104e05760405162461bcd60e51b81526004016103ea9190610bbb565b5060008385816104ec57fe5b0495945050505050565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001610525610537565b8152602001610532610593565b905290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b60405180610180016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610532610537565b80356001600160a01b038116811461040a57600080fd5b600082601f830112610624578081fd5b813567ffffffffffffffff81111561063857fe5b61064b601f8201601f1916602001610d0f565b915080825283602082850101111561066257600080fd5b8060208401602084013760009082016020015292915050565b600061016080838503121561068e578182fd5b61069781610d0f565b9150506106a3826105fd565b81526106b1602083016105fd565b60208201526106c2604083016105fd565b60408201526106d3606083016105fd565b60608201526106e4608083016105fd565b60808201526106f560a083016105fd565b60a082015261070660c083016105fd565b60c082015261071760e083016105fd565b60e082015261010061072a8184016105fd565b9082015261012061073c8382016105fd565b9082015261014061074e8382016105fd565b9082015292915050565b60006102c0828403121561076a578081fd5b610775610180610d0f565b9050610780826105fd565b8152602082013567ffffffffffffffff8082111561079d57600080fd5b6107a985838601610614565b602084015260408401359150808211156107c257600080fd5b506107cf84828501610614565b604083015250606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016061074e8482850161067b565b60006020828403121561084b578081fd5b813567ffffffffffffffff80821115610862578283fd5b908301906102008286031215610876578283fd5b60405160c08101818110838211171561088b57fe5b8060405250823581526020830135602082015260408301356040820152606083013560608201526108bf866080850161067b565b60808201526101e0830135828111156108d6578485fd5b6108e287828601610758565b60a08301525095945050505050565b60008060006101a08486031215610906578182fd5b83359250610917856020860161067b565b915061018084013567ffffffffffffffff811115610933578182fd5b61093f86828701610758565b9150509250925092565b6001600160a01b03169052565b60008151808452815b8181101561097b5760208185018101518683018201520161095f565b8181111561098c5782602083870101525b50601f01601f19169290920160200192915050565b600b81526a313637b1b5a73ab6b132b960a91b602082015260400190565b60018152606d60f81b602082015260400190565b60018152606b60f81b602082015260400190565b6109f2828251610949565b6020810151610a046020840182610949565b506040810151610a176040840182610949565b506060810151610a2a6060840182610949565b506080810151610a3d6080840182610949565b5060a0810151610a5060a0840182610949565b5060c0810151610a6360c0840182610949565b5060e0810151610a7660e0840182610949565b5061010080820151610a8a82850182610949565b505061012080820151610a9f82850182610949565b505061014080820151610ab482850182610949565b50505050565b6001600160a01b038316815260ff821660208201526060604082018190526000906103ab9083016109a1565b6001600160a01b038316815260ff821660208201526060604082018190526000906103ab9083016109bf565b6001600160a01b038316815260ff821660208201526060604082018190526000906103ab9083016109d3565b600060018060a01b0384168252826020830152606060408301526103ab606083016109a1565b600060018060a01b0384168252826020830152606060408301526103ab606083016109bf565b600060018060a01b0384168252826020830152606060408301526103ab606083016109d3565b901515815260200190565b6000602082526103f36020830184610956565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b600060208252825160208301526020830151604083015260408301516060830152606083015160808301526080830151610c4260a08401826109e7565b5060a0830151610200808185015250610c6061022084018251610949565b60208101516102c080610240860152610c7d6104e0860183610956565b9150604083015161021f1986840301610260870152610c9c8382610956565b925050606083015161028086015260808301516102a086015260a0830151818601525060c08201516102e085015260e082015161030085015261010082015161032085015261012082015161034085015261014082015161036085015261016082015191506103ab6103808501836109e7565b60405181810167ffffffffffffffff81118282101715610d2b57fe5b60405291905056fea2646970667358221220997a8e927518e1612a5d3c331d7d2782effdc70cc3367af168f400a73907d89d64736f6c63430007020033";
	var linkReferences$4 = {
	};
	var deployedLinkReferences$4 = {
	};
	var BalanceMultipliersContract = {
		_format: _format$4,
		contractName: contractName$4,
		sourceName: sourceName$4,
		abi: abi$4,
		bytecode: bytecode$4,
		deployedBytecode: deployedBytecode$4,
		linkReferences: linkReferences$4,
		deployedLinkReferences: deployedLinkReferences$4
	};

	const cache$4 = {};
	const prefix$5 = '@elastic-dao/sdk - BalanceMultipliers';
	const isBalanceMultipliers = thing => thing && typeof thing === 'object' && thing instanceof BalanceMultipliers;
	const validateIsBalanceMultipliers = thing => {
	  const message = 'not a BalanceMultipliers';
	  validate$1(isBalanceMultipliers(thing), {
	    message,
	    prefix: prefix$5
	  });
	};
	class BalanceMultipliers extends ElasticModel {
	  constructor(sdk, {
	    blockNumber,
	    index,
	    k,
	    m,
	    ecosystem,
	    token
	  }) {
	    super(sdk);
	    this.id = `${token.uuid}|${blockNumber}`.toLowerCase();
	    cache$4[this.id] = {
	      blockNumber,
	      index,
	      k,
	      m,
	      ecosystem,
	      token
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$5
	    });
	    return sdk.contract({
	      abi: BalanceMultipliersContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, blockNumber, ecosystem, token) {
	    validateIsNumber$1(blockNumber, {
	      prefix: prefix$5
	    });
	    validateIsEcosystem(ecosystem);
	    validateIsToken(token);
	    const balanceMultipliersModel = await this.contract(sdk, ecosystem.balanceMultipliersModelAddress);
	    const {
	      index,
	      k,
	      m
	    } = await balanceMultipliersModel.deserialize(blockNumber, ecosystem.toObject(false), token.toObject(false));
	    return new BalanceMultipliers(sdk, {
	      blockNumber,
	      index,
	      k,
	      m,
	      ecosystem,
	      token
	    });
	  } // Getters


	  get address() {
	    return this.ecosystem.balanceMultipliersModelAddress;
	  }

	  get blockNumber() {
	    return this.toNumber(cache$4[this.id].blockNumber);
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get index() {
	    return this.toNumber(cache$4[this.id].index);
	  }

	  get k() {
	    return this.toBigNumber(cache$4[this.id].k, 18);
	  }

	  get m() {
	    return this.toBigNumber(cache$4[this.id].m, 18);
	  }

	  get ecosystem() {
	    return cache$4[this.id].ecosystem;
	  }

	  get token() {
	    return cache$4[this.id].token;
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.blockNumber, this.ecosystem, this.token);
	  }

	  toObject(includeNested = true) {
	    const {
	      ecosystem,
	      id,
	      token
	    } = this;
	    const obj = { ...cache$4[id],
	      id,
	      ecosystem: ecosystem.toObject(false),
	      token: token.toObject(false)
	    };

	    if (includeNested === false) {
	      delete obj.ecosystem;
	      delete obj.token;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$5 = "hh-sol-artifact-1";
	var contractName$5 = "DAO";
	var sourceName$5 = "src/models/DAO.sol";
	var abi$5 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_uuid",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "_ecosystem",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "address[]",
							name: "summoners",
							type: "address[]"
						},
						{
							internalType: "bool",
							name: "summoned",
							type: "bool"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "numberOfSummoners",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct DAO.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_uuid",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "address[]",
							name: "summoners",
							type: "address[]"
						},
						{
							internalType: "bool",
							name: "summoned",
							type: "bool"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "numberOfSummoners",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct DAO.Instance",
					name: "_dao",
					type: "tuple"
				},
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				}
			],
			name: "getSummoner",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "address[]",
							name: "summoners",
							type: "address[]"
						},
						{
							internalType: "bool",
							name: "summoned",
							type: "bool"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "numberOfSummoners",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct DAO.Instance",
					name: "_dao",
					type: "tuple"
				},
				{
					internalType: "address",
					name: "_summonerAddress",
					type: "address"
				}
			],
			name: "isSummoner",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "address[]",
							name: "summoners",
							type: "address[]"
						},
						{
							internalType: "bool",
							name: "summoned",
							type: "bool"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "numberOfSummoners",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct DAO.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$5 = "0x608060405234801561001057600080fd5b50610e64806100206000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c80626cfdda1461005b578063587ce3b1146100845780637fc975f314610099578063cc469ca7146100ac578063fb10b0c5146100cc575b600080fd5b61006e6100693660046109c3565b6100ec565b60405161007b9190610cd5565b60405180910390f35b610097610092366004610988565b61012c565b005b61006e6100a7366004610954565b6102af565b6100bf6100ba366004610a06565b6102ba565b60405161007b9190610b7a565b6100df6100da366004610954565b6102f1565b60405161007b9190610d4e565b6000610123836000015183604051602001610108929190610c9b565b604051602081830303815290604052805190602001206103a5565b90505b92915050565b80516040516101619161014191602001610bfd565b6040516020818303038152906040528051906020012082606001516103bd565b80516040516101969161017691602001610bc0565b6040516020818303038152906040528051906020012082608001516103e1565b80516040516101cb916101ab91602001610c2d565b6040516020818303038152906040528051906020012082604001516103f3565b806080015181602001515114156102975760005b81608001518110156102955761023982600001518360200151838151811061020357fe5b602002602001015160405160200161021c929190610c9b565b6040516020818303038152906040528051906020012060016103f3565b815160405161028391610250918490602001610c61565b604051602081830303815290604052805190602001208360200151838151811061027657fe5b6020026020010151610413565b61028e816001610441565b90506101df565b505b80516040516102ac9161021c91602001610b8e565b50565b60006101238361046f565b60006101238360000151836040516020016102d6929190610c61565b60405160208183030381529060405280519060200120610485565b6102f9610580565b6001600160a01b038316815260a081018290526103158361046f565b15610126576103498360405160200161032e9190610bfd565b604051602081830303815290604052805190602001206104a0565b606082015260405161037e90610363908590602001610bc0565b6040516020818303038152906040528051906020012061056e565b608082015260405161039890610108908590602001610c2d565b1515604082015292915050565b60008181526001602052604090205460ff165b919050565b600082815260046020908152604090912082516103dc928401906105c6565b505050565b60009182526005602052604090912055565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000828201838110156101235760405162461bcd60e51b815260040161046690610ce0565b60405180910390fd5b6000610126826040516020016101089190610b8e565b6000908152602081905260409020546001600160a01b031690565b60608160001a60f81b6001600160f81b0319166104cf5760405162461bcd60e51b815260040161046690610d17565b60008281526004602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156105625780601f1061053757610100808354040283529160200191610562565b820191906000526020600020905b81548152906001019060200180831161054557829003601f168201915b50505050509050919050565b60009081526005602052604090205490565b6040518060c0016040528060006001600160a01b031681526020016060815260200160001515815260200160608152602001600081526020016105c1610644565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061060757805160ff1916838001178555610634565b82800160010185558215610634579182015b82811115610634578251825591602001919060010190610619565b506106409291506106a0565b5090565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b5b8082111561064057600081556001016106a1565b80356001600160a01b03811681146103b857600080fd5b600082601f8301126106dc578081fd5b813567ffffffffffffffff8111156106f057fe5b6020808202610700828201610e0a565b8381529350818401858301828701840188101561071c57600080fd5b600092505b8483101561074657610732816106b5565b825260019290920191908301908301610721565b505050505092915050565b803580151581146103b857600080fd5b600082601f830112610771578081fd5b813567ffffffffffffffff81111561078557fe5b610798601f8201601f1916602001610e0a565b91508082528360208285010111156107af57600080fd5b8060208401602084013760009082016020015292915050565b600061020082840312156107da578081fd5b6107e460c0610e0a565b90506107ef826106b5565b8152602082013567ffffffffffffffff8082111561080c57600080fd5b610818858386016106cc565b602084015261082960408501610751565b6040840152606084013591508082111561084257600080fd5b5061084f84828501610761565b6060830152506080820135608082015261086c8360a08401610877565b60a082015292915050565b600061016080838503121561088a578182fd5b61089381610e0a565b91505061089f826106b5565b81526108ad602083016106b5565b60208201526108be604083016106b5565b60408201526108cf606083016106b5565b60608201526108e0608083016106b5565b60808201526108f160a083016106b5565b60a082015261090260c083016106b5565b60c082015261091360e083016106b5565b60e08201526101006109268184016106b5565b908201526101206109388382016106b5565b9082015261014061094a8382016106b5565b9082015292915050565b6000806101808385031215610967578182fd5b610970836106b5565b915061097f8460208501610877565b90509250929050565b600060208284031215610999578081fd5b813567ffffffffffffffff8111156109af578182fd5b6109bb848285016107c8565b949350505050565b600080604083850312156109d5578182fd5b823567ffffffffffffffff8111156109eb578283fd5b6109f7858286016107c8565b92505061097f602084016106b5565b60008060408385031215610a18578182fd5b823567ffffffffffffffff811115610a2e578283fd5b610a3a858286016107c8565b95602094909401359450505050565b6001600160a01b03169052565b15159052565b60008151808452815b81811015610a8157602081850181015186830182015201610a65565b81811115610a925782602083870101525b50601f01601f19169290920160200192915050565b610ab2828251610a49565b6020810151610ac46020840182610a49565b506040810151610ad76040840182610a49565b506060810151610aea6060840182610a49565b506080810151610afd6080840182610a49565b5060a0810151610b1060a0840182610a49565b5060c0810151610b2360c0840182610a49565b5060e0810151610b3660e0840182610a49565b5061010080820151610b4a82850182610a49565b505061012080820151610b5f82850182610a49565b505061014080820151610b7482850182610a49565b50505050565b6001600160a01b0391909116815260200190565b6001600160a01b039190911681526040602082018190526006908201526565786973747360d01b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706e756d6265724f6653756d6d6f6e65727360781b606082015260800190565b6001600160a01b03919091168152604060208201819052600490820152636e616d6560e01b606082015260800190565b6001600160a01b03919091168152604060208201819052600890820152671cdd5b5b5bdb995960c21b606082015260800190565b6001600160a01b039290921682526060602083018190526009908301526873756d6d6f6e65727360b81b6080830152604082015260a00190565b6001600160a01b0392831681526060602082018190526008908201526739bab6b6b7b732b960c11b60808201529116604082015260a00190565b901515815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526018908201527f456c617374696344414f3a205a65726f20416464726573730000000000000000604082015260600190565b602080825282516001600160a01b03908116838301528382015161020060408501528051610220850181905260009392918301919084906102408701905b80831015610dae57845184168252938501936001929092019190850190610d8c565b5060408801519450610dc36060880186610a56565b6060880151878203601f190160808901529450610de08186610a5c565b945050505050608084015160a084015260a0840151610e0260c0850182610aa7565b509392505050565b60405181810167ffffffffffffffff81118282101715610e2657fe5b60405291905056fea26469706673582212206078461e7830e9f5ada0778d9f79cab3d0edb7100c3d314f40c99710378bd13964736f6c63430007020033";
	var deployedBytecode$5 = "0x608060405234801561001057600080fd5b50600436106100565760003560e01c80626cfdda1461005b578063587ce3b1146100845780637fc975f314610099578063cc469ca7146100ac578063fb10b0c5146100cc575b600080fd5b61006e6100693660046109c3565b6100ec565b60405161007b9190610cd5565b60405180910390f35b610097610092366004610988565b61012c565b005b61006e6100a7366004610954565b6102af565b6100bf6100ba366004610a06565b6102ba565b60405161007b9190610b7a565b6100df6100da366004610954565b6102f1565b60405161007b9190610d4e565b6000610123836000015183604051602001610108929190610c9b565b604051602081830303815290604052805190602001206103a5565b90505b92915050565b80516040516101619161014191602001610bfd565b6040516020818303038152906040528051906020012082606001516103bd565b80516040516101969161017691602001610bc0565b6040516020818303038152906040528051906020012082608001516103e1565b80516040516101cb916101ab91602001610c2d565b6040516020818303038152906040528051906020012082604001516103f3565b806080015181602001515114156102975760005b81608001518110156102955761023982600001518360200151838151811061020357fe5b602002602001015160405160200161021c929190610c9b565b6040516020818303038152906040528051906020012060016103f3565b815160405161028391610250918490602001610c61565b604051602081830303815290604052805190602001208360200151838151811061027657fe5b6020026020010151610413565b61028e816001610441565b90506101df565b505b80516040516102ac9161021c91602001610b8e565b50565b60006101238361046f565b60006101238360000151836040516020016102d6929190610c61565b60405160208183030381529060405280519060200120610485565b6102f9610580565b6001600160a01b038316815260a081018290526103158361046f565b15610126576103498360405160200161032e9190610bfd565b604051602081830303815290604052805190602001206104a0565b606082015260405161037e90610363908590602001610bc0565b6040516020818303038152906040528051906020012061056e565b608082015260405161039890610108908590602001610c2d565b1515604082015292915050565b60008181526001602052604090205460ff165b919050565b600082815260046020908152604090912082516103dc928401906105c6565b505050565b60009182526005602052604090912055565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000828201838110156101235760405162461bcd60e51b815260040161046690610ce0565b60405180910390fd5b6000610126826040516020016101089190610b8e565b6000908152602081905260409020546001600160a01b031690565b60608160001a60f81b6001600160f81b0319166104cf5760405162461bcd60e51b815260040161046690610d17565b60008281526004602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156105625780601f1061053757610100808354040283529160200191610562565b820191906000526020600020905b81548152906001019060200180831161054557829003601f168201915b50505050509050919050565b60009081526005602052604090205490565b6040518060c0016040528060006001600160a01b031681526020016060815260200160001515815260200160608152602001600081526020016105c1610644565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061060757805160ff1916838001178555610634565b82800160010185558215610634579182015b82811115610634578251825591602001919060010190610619565b506106409291506106a0565b5090565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b5b8082111561064057600081556001016106a1565b80356001600160a01b03811681146103b857600080fd5b600082601f8301126106dc578081fd5b813567ffffffffffffffff8111156106f057fe5b6020808202610700828201610e0a565b8381529350818401858301828701840188101561071c57600080fd5b600092505b8483101561074657610732816106b5565b825260019290920191908301908301610721565b505050505092915050565b803580151581146103b857600080fd5b600082601f830112610771578081fd5b813567ffffffffffffffff81111561078557fe5b610798601f8201601f1916602001610e0a565b91508082528360208285010111156107af57600080fd5b8060208401602084013760009082016020015292915050565b600061020082840312156107da578081fd5b6107e460c0610e0a565b90506107ef826106b5565b8152602082013567ffffffffffffffff8082111561080c57600080fd5b610818858386016106cc565b602084015261082960408501610751565b6040840152606084013591508082111561084257600080fd5b5061084f84828501610761565b6060830152506080820135608082015261086c8360a08401610877565b60a082015292915050565b600061016080838503121561088a578182fd5b61089381610e0a565b91505061089f826106b5565b81526108ad602083016106b5565b60208201526108be604083016106b5565b60408201526108cf606083016106b5565b60608201526108e0608083016106b5565b60808201526108f160a083016106b5565b60a082015261090260c083016106b5565b60c082015261091360e083016106b5565b60e08201526101006109268184016106b5565b908201526101206109388382016106b5565b9082015261014061094a8382016106b5565b9082015292915050565b6000806101808385031215610967578182fd5b610970836106b5565b915061097f8460208501610877565b90509250929050565b600060208284031215610999578081fd5b813567ffffffffffffffff8111156109af578182fd5b6109bb848285016107c8565b949350505050565b600080604083850312156109d5578182fd5b823567ffffffffffffffff8111156109eb578283fd5b6109f7858286016107c8565b92505061097f602084016106b5565b60008060408385031215610a18578182fd5b823567ffffffffffffffff811115610a2e578283fd5b610a3a858286016107c8565b95602094909401359450505050565b6001600160a01b03169052565b15159052565b60008151808452815b81811015610a8157602081850181015186830182015201610a65565b81811115610a925782602083870101525b50601f01601f19169290920160200192915050565b610ab2828251610a49565b6020810151610ac46020840182610a49565b506040810151610ad76040840182610a49565b506060810151610aea6060840182610a49565b506080810151610afd6080840182610a49565b5060a0810151610b1060a0840182610a49565b5060c0810151610b2360c0840182610a49565b5060e0810151610b3660e0840182610a49565b5061010080820151610b4a82850182610a49565b505061012080820151610b5f82850182610a49565b505061014080820151610b7482850182610a49565b50505050565b6001600160a01b0391909116815260200190565b6001600160a01b039190911681526040602082018190526006908201526565786973747360d01b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706e756d6265724f6653756d6d6f6e65727360781b606082015260800190565b6001600160a01b03919091168152604060208201819052600490820152636e616d6560e01b606082015260800190565b6001600160a01b03919091168152604060208201819052600890820152671cdd5b5b5bdb995960c21b606082015260800190565b6001600160a01b039290921682526060602083018190526009908301526873756d6d6f6e65727360b81b6080830152604082015260a00190565b6001600160a01b0392831681526060602082018190526008908201526739bab6b6b7b732b960c11b60808201529116604082015260a00190565b901515815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526018908201527f456c617374696344414f3a205a65726f20416464726573730000000000000000604082015260600190565b602080825282516001600160a01b03908116838301528382015161020060408501528051610220850181905260009392918301919084906102408701905b80831015610dae57845184168252938501936001929092019190850190610d8c565b5060408801519450610dc36060880186610a56565b6060880151878203601f190160808901529450610de08186610a5c565b945050505050608084015160a084015260a0840151610e0260c0850182610aa7565b509392505050565b60405181810167ffffffffffffffff81118282101715610e2657fe5b60405291905056fea26469706673582212206078461e7830e9f5ada0778d9f79cab3d0edb7100c3d314f40c99710378bd13964736f6c63430007020033";
	var linkReferences$5 = {
	};
	var deployedLinkReferences$5 = {
	};
	var DAOContract = {
		_format: _format$5,
		contractName: contractName$5,
		sourceName: sourceName$5,
		abi: abi$5,
		bytecode: bytecode$5,
		deployedBytecode: deployedBytecode$5,
		linkReferences: linkReferences$5,
		deployedLinkReferences: deployedLinkReferences$5
	};

	var _format$6 = "hh-sol-artifact-1";
	var contractName$6 = "ElasticDAO";
	var sourceName$6 = "src/core/ElasticDAO.sol";
	var abi$6 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_ecosystemModelAddress",
					type: "address"
				},
				{
					internalType: "address[]",
					name: "_summoners",
					type: "address[]"
				},
				{
					internalType: "string",
					name: "_name",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_numberOfSummoners",
					type: "uint256"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "tokenAddress",
					type: "address"
				}
			],
			name: "ElasticGovernanceTokenDeployed",
			type: "event"
		},
		{
			stateMutability: "payable",
			type: "fallback"
		},
		{
			inputs: [
			],
			name: "getDAO",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "address[]",
							name: "summoners",
							type: "address[]"
						},
						{
							internalType: "bool",
							name: "summoned",
							type: "bool"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "numberOfSummoners",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct DAO.Instance",
					name: "",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getEcosystem",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "daoAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "balanceMultipliersModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "daoModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "ecosystemModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "elasticModuleModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenHolderModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "tokenModelAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "configuratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "registratorAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "governanceTokenAddress",
							type: "address"
						}
					],
					internalType: "struct Ecosystem.Instance",
					name: "",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_moduleAddress",
					type: "address"
				},
				{
					internalType: "string",
					name: "_name",
					type: "string"
				}
			],
			name: "initializeModule",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_name",
					type: "string"
				},
				{
					internalType: "string",
					name: "_symbol",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_eByl",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_elasticity",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_k",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_maxLambdaPurchase",
					type: "uint256"
				}
			],
			name: "initializeToken",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_deltaLambda",
					type: "uint256"
				}
			],
			name: "join",
			outputs: [
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "seedSummoning",
			outputs: [
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_deltaLambda",
					type: "uint256"
				}
			],
			name: "summon",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "summoners",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			stateMutability: "payable",
			type: "receive"
		}
	];
	var bytecode$6 = "0x60806040523480156200001157600080fd5b506040516200284d3803806200284d83398101604081905262000034916200053c565b600080546001600160a01b0386166001600160a01b03199182161790915560018054909116331790556200006762000238565b60405163332a4d0960e01b81526001600160a01b0386169063332a4d09906200009690600090600401620007b7565b6101606040518083038186803b158015620000b057600080fd5b505afa158015620000c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000eb91906200069b565b84519091506200010390600290602087019062000294565b506101008101516200011462000238565b6040516316c5ac2560e11b81526001600160a01b03831690632d8b584a90620001429086906004016200085e565b61016060405180830381600087803b1580156200015e57600080fd5b505af115801562000173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019991906200069b565b6040516312e9f95760e31b81529091506001600160a01b0383169063974fcab890620001d0908990899089908790600401620007cb565b600060405180830381600087803b158015620001eb57600080fd5b505af115801562000200573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200022a9190810190620005be565b5050505050505050620008c8565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b828054828255906000526020600020908101928215620002ec579160200282015b82811115620002ec57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002b5565b50620002fa929150620002fe565b5090565b5b80821115620002fa5780546001600160a01b0319168155600101620002ff565b80516001600160a01b03811681146200033757600080fd5b919050565b600082601f8301126200034d578081fd5b81516001600160401b038111156200036157fe5b60208082026200037382820162000875565b838152935081840185830182870184018810156200039057600080fd5b600092505b84831015620003be57620003a9816200031f565b82526001929092019190830190830162000395565b505050505092915050565b805180151581146200033757600080fd5b600082601f830112620003eb578081fd5b81516001600160401b03811115620003ff57fe5b62000414601f8201601f191660200162000875565b91508082528360208285010111156200042c57600080fd5b6200043f81602084016020860162000899565b5092915050565b60006101608083850312156200045a578182fd5b620004658162000875565b91505062000473826200031f565b815262000483602083016200031f565b602082015262000496604083016200031f565b6040820152620004a9606083016200031f565b6060820152620004bc608083016200031f565b6080820152620004cf60a083016200031f565b60a0820152620004e260c083016200031f565b60c0820152620004f560e083016200031f565b60e08201526101006200050a8184016200031f565b908201526101206200051e8382016200031f565b90820152610140620005328382016200031f565b9082015292915050565b6000806000806080858703121562000552578384fd5b6200055d856200031f565b60208601519094506001600160401b03808211156200057a578485fd5b62000588888389016200033c565b945060408701519150808211156200059e578384fd5b50620005ad87828801620003da565b606096909601519497939650505050565b600060208284031215620005d0578081fd5b81516001600160401b0380821115620005e7578283fd5b908301906102008286031215620005fc578283fd5b6200060860c062000875565b62000613836200031f565b815260208301518281111562000627578485fd5b62000635878286016200033c565b6020830152506200064960408401620003c9565b604082015260608301518281111562000660578485fd5b6200066e87828601620003da565b606083015250608083015160808201526200068d8660a0850162000446565b60a082015295945050505050565b60006101608284031215620006ae578081fd5b620006ba838362000446565b9392505050565b6001600160a01b03169052565b620006db828251620006c1565b6020810151620006ef6020840182620006c1565b506040810151620007046040840182620006c1565b506060810151620007196060840182620006c1565b5060808101516200072e6080840182620006c1565b5060a08101516200074360a0840182620006c1565b5060c08101516200075860c0840182620006c1565b5060e08101516200076d60e0840182620006c1565b50610100808201516200078382850182620006c1565b5050610120808201516200079a82850182620006c1565b505061014080820151620007b182850182620006c1565b50505050565b6001600160a01b0391909116815260200190565b6101c080825285519082018190526000906101e0830190602090818901845b82811015620008115781516001600160a01b031685529383019390830190600101620007ea565b5050508382038185015286518083526200083181838501848b0162000899565b60408501879052601f01601f191691909101019050620008556060830184620006ce565b95945050505050565b61016081016200086f8284620006ce565b92915050565b6040518181016001600160401b03811182821017156200089157fe5b604052919050565b60005b83811015620008b65781810151838201526020016200089c565b83811115620007b15750506000910152565b611f7580620008d86000396000f3fe60806040526004361061007f5760003560e01c80631fb460891161004e5780631fb46089146100fb578063985da72614610103578063a0f2c9771461012e578063d38b576d1461015057610086565b80630181bb0b14610088578063035d9f2a146100a857806303ca8c09146100c8578063049878f3146100e857610086565b3661008657005b005b34801561009457600080fd5b506100866100a3366004611517565b61017d565b3480156100b457600080fd5b506100866100c33660046117f7565b61023e565b3480156100d457600080fd5b506100866100e336600461157f565b6106a6565b6100866100f63660046117f7565b6107f5565b610086610a5f565b34801561010f57600080fd5b50610118610d69565b6040516101259190611d81565b60405180910390f35b34801561013a57600080fd5b50610143610d7e565b6040516101259190611de0565b34801561015c57600080fd5b5061017061016b3660046117f7565b610d8e565b60405161012591906119e9565b6101856111d0565b61018d610db5565b6040810151909150156101bb5760405162461bcd60e51b81526004016101b290611ad4565b60405180910390fd5b6101c3611216565b6101cb610e5c565b6101208101516040516331081b8760e01b8152919250906001600160a01b038216906331081b879061020590889088908790600401611a34565b600060405180830381600087803b15801561021f57600080fd5b505af1158015610233573d6000803e3d6000fd5b505050505050505050565b6102466111d0565b61024e610db5565b6040810151909150156102735760405162461bcd60e51b81526004016101b290611ad4565b61027b611216565b610283610e5c565b60608101519091506102936111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c5906102c190309087906004016119fd565b60006040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103159190810190611603565b90506000826001600160a01b0316626cfdda83336040518363ffffffff1660e01b8152600401610346929190611d94565b60206040518083038186803b15801561035e57600080fd5b505afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190611565565b9050806103b55760405162461bcd60e51b81526004016101b290611b18565b600047116103d55760405162461bcd60e51b81526004016101b290611d24565b6103dd611216565b6103e5610e5c565b60608101519091506103f56111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c59061042390309087906004016119fd565b60006040518083038186803b15801561043b57600080fd5b505afa15801561044f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104779190810190611603565b9050610481611272565b60e084015161014085015160405163fb10b0c560e01b81526001600160a01b039092169163fb10b0c5916104b99188906004016119fd565b60006040518083038186803b1580156104d157600080fd5b505afa1580156104e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050d91908101906116ec565b805190915060005b836080015181101561063157816001600160a01b031663528c198a866001600160a01b031663cc469ca787856040518363ffffffff1660e01b815260040161055e929190611dbe565b60206040518083038186803b15801561057657600080fd5b505afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae91906114fb565b8e6040518363ffffffff1660e01b81526004016105cc929190611a1b565b602060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e9190611565565b5061062a816001610ee5565b9050610515565b5060016040808501919091525163587ce3b160e01b81526001600160a01b0385169063587ce3b190610667908690600401611d81565b600060405180830381600087803b15801561068157600080fd5b505af1158015610695573d6000803e3d6000fd5b505050505050505050505050505050565b6106ae6111d0565b6106b6610db5565b6040810151909150156106db5760405162461bcd60e51b81526004016101b290611ad4565b6001546001600160a01b031633146107055760405162461bcd60e51b81526004016101b290611cd2565b61070d611216565b610715610e5c565b905061071f611272565b8161010001516001600160a01b0316638891ba638a8a8a8a8a8a896040518863ffffffff1660e01b815260040161075c9796959493929190611a84565b600060405180830381600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b291908101906116ec565b80516040519192506001600160a01b0316907fad65bbe394ae719938a7445c7588b2cdb455ea64f1364115b1e073e31bb1af9b90600090a2505050505050505050565b6107fd6111d0565b610805610db5565b905080604001516108285760405162461bcd60e51b81526004016101b290611bda565b610830611272565b610838610f13565b905080610120015183111561085f5760405162461bcd60e51b81526004016101b290611b86565b60008160000151905060006108e6344703836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a957600080fd5b505afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e1919061180f565b610fb8565b9050600061090986838660c001518760a001518860e00151896101000151610fc4565b905034811461092a5760405162461bcd60e51b81526004016101b290611c0f565b600061093a878660e00151610ee5565b90506000610952828760e0015188610100015161101e565b905061095c611216565b610964610e5c565b60e081015161010089018490526040516295bfb960e61b8152919250906001600160a01b0382169063256fee40906109a0908b90600401611def565b600060405180830381600087803b1580156109ba57600080fd5b505af11580156109ce573d6000803e3d6000fd5b50506040516329460cc560e11b81526001600160a01b038a16925063528c198a9150610a009033908e90600401611a1b565b602060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190611565565b5050505050505050505050565b610a676111d0565b610a6f610db5565b604081015190915015610a945760405162461bcd60e51b81526004016101b290611ad4565b610a9c611216565b610aa4610e5c565b6060810151909150610ab46111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c590610ae290309087906004016119fd565b60006040518083038186803b158015610afa57600080fd5b505afa158015610b0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b369190810190611603565b90506000826001600160a01b0316626cfdda83336040518363ffffffff1660e01b8152600401610b67929190611d94565b60206040518083038186803b158015610b7f57600080fd5b505afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190611565565b905080610bd65760405162461bcd60e51b81526004016101b290611b18565b610bde611216565b610be6610e5c565b90506000610bf2610e5c565b60e00151610140830151604051637fc975f360e01b81526001600160a01b0390921691637fc975f391610c299186906004016119fd565b60206040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190611565565b905080610c985760405162461bcd60e51b81526004016101b290611c85565b610ca0611272565b610ca8610f13565b905060003490506000610cbf82846080015161103d565b90506000610cd7828560c0015186610100015161106d565b84516040516329460cc560e11b81529192506001600160a01b03169063528c198a90610d099033908690600401611a1b565b602060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5b9190611565565b505050505050505050505050565b610d716111d0565b610d79610db5565b905090565b610d86611216565b610d79610e5c565b60028181548110610d9b57fe5b6000918252602090912001546001600160a01b0316905081565b610dbd6111d0565b610dc5611216565b610dcd610e5c565b606081015160405163fb10b0c560e01b81529192506001600160a01b03169063fb10b0c590610e0290309085906004016119fd565b60006040518083038186803b158015610e1a57600080fd5b505afa158015610e2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e569190810190611603565b91505090565b610e64611216565b60005460405163332a4d0960e01b81526001600160a01b039091169063332a4d0990610e949030906004016119e9565b6101606040518083038186803b158015610ead57600080fd5b505afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7991906116d0565b600082820183811015610f0a5760405162461bcd60e51b81526004016101b290611b4f565b90505b92915050565b610f1b611272565b610f23611216565b610f2b610e5c565b90508060e001516001600160a01b031663fb10b0c5826101400151836040518363ffffffff1660e01b8152600401610f649291906119fd565b60006040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e5691908101906116ec565b6000610f0a838361103d565b600080610fd18885610ee5565b9050611012610fe08888611078565b610ffe61100384610ffe610ff5878b8b61101e565b610ffe8c61109e565b611078565b61100d8888611078565b6110bd565b98975050505050505050565b600061103361102d858561103d565b83611078565b90505b9392505050565b60008161105e61105585670de0b6b3a76400006110ff565b60028504610ee5565b8161106557fe5b049392505050565b600061103361102d85855b6000670de0b6b3a764000061105e61109085856110ff565b6706f05b59d3b20000610ee5565b60006110b5826110b0600a6012611139565b610ee5565b90505b919050565b6000610f0a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111a4565b60008261110e57506000610f0d565b8282028284828161111b57fe5b0414610f0a5760405162461bcd60e51b81526004016101b290611c44565b60008161114857506001610f0d565b8160011415611158575081610f0d565b8215801561116557508115155b1561117257506000610f0d565b8260015b8381101561119c5761118882866110ff565b9150611195816001610ee5565b9050611176565b509050610f0d565b600081848411156111c85760405162461bcd60e51b81526004016101b29190611a71565b505050900390565b6040518060c0016040528060006001600160a01b03168152602001606081526020016000151581526020016060815260200160008152602001611211611216565b905290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b60405180610180016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611211611216565b80516110b881611f27565b600082601f8301126112f7578081fd5b815167ffffffffffffffff81111561130b57fe5b602080820261131b828201611eb5565b8381529350818401858301828701840188101561133757600080fd5b600092505b8483101561136357805161134f81611f27565b82526001929092019190830190830161133c565b505050505092915050565b805180151581146110b857600080fd5b600082601f83011261138e578081fd5b81356113a161139c82611ed9565b611eb5565b91508082528360208285010111156113b857600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126113e1578081fd5b81516113ef61139c82611ed9565b915080825283602082850101111561140657600080fd5b611417816020840160208601611efb565b5092915050565b6000610160808385031215611431578182fd5b61143a81611eb5565b915050611446826112dc565b8152611454602083016112dc565b6020820152611465604083016112dc565b6040820152611476606083016112dc565b6060820152611487608083016112dc565b608082015261149860a083016112dc565b60a08201526114a960c083016112dc565b60c08201526114ba60e083016112dc565b60e08201526101006114cd8184016112dc565b908201526101206114df8382016112dc565b908201526101406114f18382016112dc565b9082015292915050565b60006020828403121561150c578081fd5b8151610f0a81611f27565b60008060408385031215611529578081fd5b823561153481611f27565b9150602083013567ffffffffffffffff81111561154f578182fd5b61155b8582860161137e565b9150509250929050565b600060208284031215611576578081fd5b610f0a8261136e565b60008060008060008060c08789031215611597578182fd5b863567ffffffffffffffff808211156115ae578384fd5b6115ba8a838b0161137e565b975060208901359150808211156115cf578384fd5b506115dc89828a0161137e565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b600060208284031215611614578081fd5b815167ffffffffffffffff8082111561162b578283fd5b90830190610200828603121561163f578283fd5b61164960c0611eb5565b611652836112dc565b8152602083015182811115611665578485fd5b611671878286016112e7565b6020830152506116836040840161136e565b6040820152606083015182811115611699578485fd5b6116a5878286016113d1565b606083015250608083015160808201526116c28660a0850161141e565b60a082015295945050505050565b600061016082840312156116e2578081fd5b610f0a838361141e565b6000602082840312156116fd578081fd5b815167ffffffffffffffff80821115611714578283fd5b908301906102c08286031215611728578283fd5b611733610180611eb5565b61173c836112dc565b815260208301518281111561174f578485fd5b61175b878286016113d1565b602083015250604083015182811115611772578485fd5b61177e878286016113d1565b604083015250606083810151908201526080808401519082015260a0808401519082015260c0808401519082015260e0808401519082015261010080840151908201526101208084015190820152610140808401519082015261016091506117e88683850161141e565b91810191909152949350505050565b600060208284031215611808578081fd5b5035919050565b600060208284031215611820578081fd5b5051919050565b6001600160a01b03169052565b15159052565b60008151808452611852816020860160208601611efb565b601f01601f19169290920160200192915050565b80516001600160a01b039081168352602080830151610200828601819052815190860181905260009361022087019392830192909185905b808210156118c05784518416865294820194938201936001919091019061189e565b505050505060408301516118d76040860182611834565b50606083015184820360608601526118ef828261183a565b9150506080830151608085015260a083015161190e60a0860182611916565b509392505050565b611921828251611827565b60208101516119336020840182611827565b5060408101516119466040840182611827565b5060608101516119596060840182611827565b50608081015161196c6080840182611827565b5060a081015161197f60a0840182611827565b5060c081015161199260c0840182611827565b5060e08101516119a560e0840182611827565b50610100808201516119b982850182611827565b5050610120808201516119ce82850182611827565b5050610140808201516119e382850182611827565b50505050565b6001600160a01b0391909116815260200190565b6001600160a01b038316815261018081016110366020830184611916565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03841681526101a060208201819052600090611a598382018661183a565b915050611a696040830184611916565b949350505050565b600060208252610f0a602083018461183a565b6000610220808352611a988184018b61183a565b90508281036020840152611aac818a61183a565b9150508660408301528560608301528460808301528360a083015261101260c0830184611916565b60208082526024908201527f456c617374696344414f3a2044414f206d757374206e6f742062652073756d6d6040820152631bdb995960e21b606082015260800190565b6020808252601a908201527f456c617374696344414f3a204f6e6c792073756d6d6f6e657273000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f456c617374696344414f3a2043616e6e6f742070757263686173652074686174604082015273206d616e7920736861726573206174206f6e636560601b606082015260800190565b6020808252818101527f456c617374696344414f3a2044414f206d7573742062652073756d6d6f6e6564604082015260600190565b6020808252818101527f456c617374696344414f3a20496e636f72726563742045544820616d6f756e74604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602d908201527f456c617374696344414f3a20506c656173652063616c6c20696e697469616c6960408201526c1e99551bdad95b88199a5c9cdd609a1b606082015260800190565b60208082526032908201527f456c617374696344414f3a204f6e6c79206465706c6f7965722063616e20696e60408201527134ba34b0b634bd32903a3432902a37b5b2b760711b606082015260800190565b60208082526039908201527f456c617374696344414f3a20506c6561736520736565642044414f207769746860408201527f2045544820746f20736574204554483a45475420726174696f00000000000000606082015260800190565b600060208252610f0a6020830184611866565b600060408252611da76040830185611866565b905060018060a01b03831660208301529392505050565b600060408252611dd16040830185611866565b90508260208301529392505050565b6101608101610f0d8284611916565b600060208252611e03602083018451611827565b60208301516102c06040840152611e1e6102e084018261183a565b90506040840151601f19848303016060850152611e3b828261183a565b91505060608401516080840152608084015160a084015260a084015160c084015260c084015160e084015260e084015161010081818601528086015191505061012081818601528086015191505061014081818601528086015191505061016081818601528086015191505061190e610180850182611916565b60405181810167ffffffffffffffff81118282101715611ed157fe5b604052919050565b600067ffffffffffffffff821115611eed57fe5b50601f01601f191660200190565b60005b83811015611f16578181015183820152602001611efe565b838111156119e35750506000910152565b6001600160a01b0381168114611f3c57600080fd5b5056fea2646970667358221220f060723535f8a28bd788874bb45eb8f63bc270a7b75bf938bfee9b37a76681e664736f6c63430007020033";
	var deployedBytecode$6 = "0x60806040526004361061007f5760003560e01c80631fb460891161004e5780631fb46089146100fb578063985da72614610103578063a0f2c9771461012e578063d38b576d1461015057610086565b80630181bb0b14610088578063035d9f2a146100a857806303ca8c09146100c8578063049878f3146100e857610086565b3661008657005b005b34801561009457600080fd5b506100866100a3366004611517565b61017d565b3480156100b457600080fd5b506100866100c33660046117f7565b61023e565b3480156100d457600080fd5b506100866100e336600461157f565b6106a6565b6100866100f63660046117f7565b6107f5565b610086610a5f565b34801561010f57600080fd5b50610118610d69565b6040516101259190611d81565b60405180910390f35b34801561013a57600080fd5b50610143610d7e565b6040516101259190611de0565b34801561015c57600080fd5b5061017061016b3660046117f7565b610d8e565b60405161012591906119e9565b6101856111d0565b61018d610db5565b6040810151909150156101bb5760405162461bcd60e51b81526004016101b290611ad4565b60405180910390fd5b6101c3611216565b6101cb610e5c565b6101208101516040516331081b8760e01b8152919250906001600160a01b038216906331081b879061020590889088908790600401611a34565b600060405180830381600087803b15801561021f57600080fd5b505af1158015610233573d6000803e3d6000fd5b505050505050505050565b6102466111d0565b61024e610db5565b6040810151909150156102735760405162461bcd60e51b81526004016101b290611ad4565b61027b611216565b610283610e5c565b60608101519091506102936111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c5906102c190309087906004016119fd565b60006040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103159190810190611603565b90506000826001600160a01b0316626cfdda83336040518363ffffffff1660e01b8152600401610346929190611d94565b60206040518083038186803b15801561035e57600080fd5b505afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190611565565b9050806103b55760405162461bcd60e51b81526004016101b290611b18565b600047116103d55760405162461bcd60e51b81526004016101b290611d24565b6103dd611216565b6103e5610e5c565b60608101519091506103f56111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c59061042390309087906004016119fd565b60006040518083038186803b15801561043b57600080fd5b505afa15801561044f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104779190810190611603565b9050610481611272565b60e084015161014085015160405163fb10b0c560e01b81526001600160a01b039092169163fb10b0c5916104b99188906004016119fd565b60006040518083038186803b1580156104d157600080fd5b505afa1580156104e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050d91908101906116ec565b805190915060005b836080015181101561063157816001600160a01b031663528c198a866001600160a01b031663cc469ca787856040518363ffffffff1660e01b815260040161055e929190611dbe565b60206040518083038186803b15801561057657600080fd5b505afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae91906114fb565b8e6040518363ffffffff1660e01b81526004016105cc929190611a1b565b602060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e9190611565565b5061062a816001610ee5565b9050610515565b5060016040808501919091525163587ce3b160e01b81526001600160a01b0385169063587ce3b190610667908690600401611d81565b600060405180830381600087803b15801561068157600080fd5b505af1158015610695573d6000803e3d6000fd5b505050505050505050505050505050565b6106ae6111d0565b6106b6610db5565b6040810151909150156106db5760405162461bcd60e51b81526004016101b290611ad4565b6001546001600160a01b031633146107055760405162461bcd60e51b81526004016101b290611cd2565b61070d611216565b610715610e5c565b905061071f611272565b8161010001516001600160a01b0316638891ba638a8a8a8a8a8a896040518863ffffffff1660e01b815260040161075c9796959493929190611a84565b600060405180830381600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b291908101906116ec565b80516040519192506001600160a01b0316907fad65bbe394ae719938a7445c7588b2cdb455ea64f1364115b1e073e31bb1af9b90600090a2505050505050505050565b6107fd6111d0565b610805610db5565b905080604001516108285760405162461bcd60e51b81526004016101b290611bda565b610830611272565b610838610f13565b905080610120015183111561085f5760405162461bcd60e51b81526004016101b290611b86565b60008160000151905060006108e6344703836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a957600080fd5b505afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e1919061180f565b610fb8565b9050600061090986838660c001518760a001518860e00151896101000151610fc4565b905034811461092a5760405162461bcd60e51b81526004016101b290611c0f565b600061093a878660e00151610ee5565b90506000610952828760e0015188610100015161101e565b905061095c611216565b610964610e5c565b60e081015161010089018490526040516295bfb960e61b8152919250906001600160a01b0382169063256fee40906109a0908b90600401611def565b600060405180830381600087803b1580156109ba57600080fd5b505af11580156109ce573d6000803e3d6000fd5b50506040516329460cc560e11b81526001600160a01b038a16925063528c198a9150610a009033908e90600401611a1b565b602060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190611565565b5050505050505050505050565b610a676111d0565b610a6f610db5565b604081015190915015610a945760405162461bcd60e51b81526004016101b290611ad4565b610a9c611216565b610aa4610e5c565b6060810151909150610ab46111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c590610ae290309087906004016119fd565b60006040518083038186803b158015610afa57600080fd5b505afa158015610b0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b369190810190611603565b90506000826001600160a01b0316626cfdda83336040518363ffffffff1660e01b8152600401610b67929190611d94565b60206040518083038186803b158015610b7f57600080fd5b505afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190611565565b905080610bd65760405162461bcd60e51b81526004016101b290611b18565b610bde611216565b610be6610e5c565b90506000610bf2610e5c565b60e00151610140830151604051637fc975f360e01b81526001600160a01b0390921691637fc975f391610c299186906004016119fd565b60206040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190611565565b905080610c985760405162461bcd60e51b81526004016101b290611c85565b610ca0611272565b610ca8610f13565b905060003490506000610cbf82846080015161103d565b90506000610cd7828560c0015186610100015161106d565b84516040516329460cc560e11b81529192506001600160a01b03169063528c198a90610d099033908690600401611a1b565b602060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5b9190611565565b505050505050505050505050565b610d716111d0565b610d79610db5565b905090565b610d86611216565b610d79610e5c565b60028181548110610d9b57fe5b6000918252602090912001546001600160a01b0316905081565b610dbd6111d0565b610dc5611216565b610dcd610e5c565b606081015160405163fb10b0c560e01b81529192506001600160a01b03169063fb10b0c590610e0290309085906004016119fd565b60006040518083038186803b158015610e1a57600080fd5b505afa158015610e2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e569190810190611603565b91505090565b610e64611216565b60005460405163332a4d0960e01b81526001600160a01b039091169063332a4d0990610e949030906004016119e9565b6101606040518083038186803b158015610ead57600080fd5b505afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7991906116d0565b600082820183811015610f0a5760405162461bcd60e51b81526004016101b290611b4f565b90505b92915050565b610f1b611272565b610f23611216565b610f2b610e5c565b90508060e001516001600160a01b031663fb10b0c5826101400151836040518363ffffffff1660e01b8152600401610f649291906119fd565b60006040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e5691908101906116ec565b6000610f0a838361103d565b600080610fd18885610ee5565b9050611012610fe08888611078565b610ffe61100384610ffe610ff5878b8b61101e565b610ffe8c61109e565b611078565b61100d8888611078565b6110bd565b98975050505050505050565b600061103361102d858561103d565b83611078565b90505b9392505050565b60008161105e61105585670de0b6b3a76400006110ff565b60028504610ee5565b8161106557fe5b049392505050565b600061103361102d85855b6000670de0b6b3a764000061105e61109085856110ff565b6706f05b59d3b20000610ee5565b60006110b5826110b0600a6012611139565b610ee5565b90505b919050565b6000610f0a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111a4565b60008261110e57506000610f0d565b8282028284828161111b57fe5b0414610f0a5760405162461bcd60e51b81526004016101b290611c44565b60008161114857506001610f0d565b8160011415611158575081610f0d565b8215801561116557508115155b1561117257506000610f0d565b8260015b8381101561119c5761118882866110ff565b9150611195816001610ee5565b9050611176565b509050610f0d565b600081848411156111c85760405162461bcd60e51b81526004016101b29190611a71565b505050900390565b6040518060c0016040528060006001600160a01b03168152602001606081526020016000151581526020016060815260200160008152602001611211611216565b905290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b60405180610180016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611211611216565b80516110b881611f27565b600082601f8301126112f7578081fd5b815167ffffffffffffffff81111561130b57fe5b602080820261131b828201611eb5565b8381529350818401858301828701840188101561133757600080fd5b600092505b8483101561136357805161134f81611f27565b82526001929092019190830190830161133c565b505050505092915050565b805180151581146110b857600080fd5b600082601f83011261138e578081fd5b81356113a161139c82611ed9565b611eb5565b91508082528360208285010111156113b857600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126113e1578081fd5b81516113ef61139c82611ed9565b915080825283602082850101111561140657600080fd5b611417816020840160208601611efb565b5092915050565b6000610160808385031215611431578182fd5b61143a81611eb5565b915050611446826112dc565b8152611454602083016112dc565b6020820152611465604083016112dc565b6040820152611476606083016112dc565b6060820152611487608083016112dc565b608082015261149860a083016112dc565b60a08201526114a960c083016112dc565b60c08201526114ba60e083016112dc565b60e08201526101006114cd8184016112dc565b908201526101206114df8382016112dc565b908201526101406114f18382016112dc565b9082015292915050565b60006020828403121561150c578081fd5b8151610f0a81611f27565b60008060408385031215611529578081fd5b823561153481611f27565b9150602083013567ffffffffffffffff81111561154f578182fd5b61155b8582860161137e565b9150509250929050565b600060208284031215611576578081fd5b610f0a8261136e565b60008060008060008060c08789031215611597578182fd5b863567ffffffffffffffff808211156115ae578384fd5b6115ba8a838b0161137e565b975060208901359150808211156115cf578384fd5b506115dc89828a0161137e565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b600060208284031215611614578081fd5b815167ffffffffffffffff8082111561162b578283fd5b90830190610200828603121561163f578283fd5b61164960c0611eb5565b611652836112dc565b8152602083015182811115611665578485fd5b611671878286016112e7565b6020830152506116836040840161136e565b6040820152606083015182811115611699578485fd5b6116a5878286016113d1565b606083015250608083015160808201526116c28660a0850161141e565b60a082015295945050505050565b600061016082840312156116e2578081fd5b610f0a838361141e565b6000602082840312156116fd578081fd5b815167ffffffffffffffff80821115611714578283fd5b908301906102c08286031215611728578283fd5b611733610180611eb5565b61173c836112dc565b815260208301518281111561174f578485fd5b61175b878286016113d1565b602083015250604083015182811115611772578485fd5b61177e878286016113d1565b604083015250606083810151908201526080808401519082015260a0808401519082015260c0808401519082015260e0808401519082015261010080840151908201526101208084015190820152610140808401519082015261016091506117e88683850161141e565b91810191909152949350505050565b600060208284031215611808578081fd5b5035919050565b600060208284031215611820578081fd5b5051919050565b6001600160a01b03169052565b15159052565b60008151808452611852816020860160208601611efb565b601f01601f19169290920160200192915050565b80516001600160a01b039081168352602080830151610200828601819052815190860181905260009361022087019392830192909185905b808210156118c05784518416865294820194938201936001919091019061189e565b505050505060408301516118d76040860182611834565b50606083015184820360608601526118ef828261183a565b9150506080830151608085015260a083015161190e60a0860182611916565b509392505050565b611921828251611827565b60208101516119336020840182611827565b5060408101516119466040840182611827565b5060608101516119596060840182611827565b50608081015161196c6080840182611827565b5060a081015161197f60a0840182611827565b5060c081015161199260c0840182611827565b5060e08101516119a560e0840182611827565b50610100808201516119b982850182611827565b5050610120808201516119ce82850182611827565b5050610140808201516119e382850182611827565b50505050565b6001600160a01b0391909116815260200190565b6001600160a01b038316815261018081016110366020830184611916565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03841681526101a060208201819052600090611a598382018661183a565b915050611a696040830184611916565b949350505050565b600060208252610f0a602083018461183a565b6000610220808352611a988184018b61183a565b90508281036020840152611aac818a61183a565b9150508660408301528560608301528460808301528360a083015261101260c0830184611916565b60208082526024908201527f456c617374696344414f3a2044414f206d757374206e6f742062652073756d6d6040820152631bdb995960e21b606082015260800190565b6020808252601a908201527f456c617374696344414f3a204f6e6c792073756d6d6f6e657273000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f456c617374696344414f3a2043616e6e6f742070757263686173652074686174604082015273206d616e7920736861726573206174206f6e636560601b606082015260800190565b6020808252818101527f456c617374696344414f3a2044414f206d7573742062652073756d6d6f6e6564604082015260600190565b6020808252818101527f456c617374696344414f3a20496e636f72726563742045544820616d6f756e74604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602d908201527f456c617374696344414f3a20506c656173652063616c6c20696e697469616c6960408201526c1e99551bdad95b88199a5c9cdd609a1b606082015260800190565b60208082526032908201527f456c617374696344414f3a204f6e6c79206465706c6f7965722063616e20696e60408201527134ba34b0b634bd32903a3432902a37b5b2b760711b606082015260800190565b60208082526039908201527f456c617374696344414f3a20506c6561736520736565642044414f207769746860408201527f2045544820746f20736574204554483a45475420726174696f00000000000000606082015260800190565b600060208252610f0a6020830184611866565b600060408252611da76040830185611866565b905060018060a01b03831660208301529392505050565b600060408252611dd16040830185611866565b90508260208301529392505050565b6101608101610f0d8284611916565b600060208252611e03602083018451611827565b60208301516102c06040840152611e1e6102e084018261183a565b90506040840151601f19848303016060850152611e3b828261183a565b91505060608401516080840152608084015160a084015260a084015160c084015260c084015160e084015260e084015161010081818601528086015191505061012081818601528086015191505061014081818601528086015191505061016081818601528086015191505061190e610180850182611916565b60405181810167ffffffffffffffff81118282101715611ed157fe5b604052919050565b600067ffffffffffffffff821115611eed57fe5b50601f01601f191660200190565b60005b83811015611f16578181015183820152602001611efe565b838111156119e35750506000910152565b6001600160a01b0381168114611f3c57600080fd5b5056fea2646970667358221220f060723535f8a28bd788874bb45eb8f63bc270a7b75bf938bfee9b37a76681e664736f6c63430007020033";
	var linkReferences$6 = {
	};
	var deployedLinkReferences$6 = {
	};
	var ElasticDAOContract = {
		_format: _format$6,
		contractName: contractName$6,
		sourceName: sourceName$6,
		abi: abi$6,
		bytecode: bytecode$6,
		deployedBytecode: deployedBytecode$6,
		linkReferences: linkReferences$6,
		deployedLinkReferences: deployedLinkReferences$6
	};

	const onlyAfterSummoning = 'DAO must be summoned';
	const onlyBeforeSummoning = 'DAO must not be summoned';
	const prefix$6 = '@elastic-dao/sdk - ElasticDAO';
	const valueGreaterThanZero = 'a value greater than 0 must be provided';
	class ElasticDAO extends Base {
	  constructor(dao) {
	    super(dao.sdk);
	    this.dao = dao;
	  }

	  static contract(sdk, address) {
	    return sdk.contract({
	      abi: ElasticDAOContract.abi,
	      address
	    });
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.dao.uuid);
	  }

	  async getDAO() {
	    return this.dao.refresh();
	  }

	  async getEcosystem() {
	    return this.dao.ecosystem.refresh();
	  }

	  async initializeModule(address, name, overrides = {}) {
	    this.onlyBeforeSummoning();
	    const elasticDAO = await this.contract();
	    await elasticDAO.initializeModule(address, name, this.sanitizeOverrides(overrides));
	    return true;
	  }

	  async join(deltaLambda, overrides = {}) {
	    this.onlyAfterSummoning();
	    const elasticDAO = await this.contract();
	    await elasticDAO.join(this.toEthersBigNumber(deltaLambda, 18), this.sanitizeOverrides(overrides));
	    return true;
	  }

	  onlyAfterSummoning() {
	    if (!this.dao.summoned) {
	      throw new Error(`${prefix$6}: ${onlyAfterSummoning}`);
	    }
	  }

	  onlyBeforeSummoning() {
	    if (this.dao.summoned) {
	      throw new Error(`${prefix$6}: ${onlyBeforeSummoning}`);
	    }
	  }

	  async seedSummoning(overrides = {}) {
	    this.onlyBeforeSummoning();
	    const elasticDAO = await this.contract();

	    if (overrides.value && BigNumber(overrides.value).isGreaterThan(0)) {
	      return elasticDAO.seedSummoning(this.sanitizeOverrides(overrides));
	    }

	    throw new Error(`${prefix$6}: ${valueGreaterThanZero}`);
	  }

	  async summon(deltaLambda, overrides = {}) {
	    this.onlyBeforeSummoning();
	    const elasticDAO = await this.contract();
	    return elasticDAO.summon(this.toEthersBigNumber(deltaLambda, 18), this.sanitizeOverrides(overrides));
	  }

	  async summoners() {
	    const elasticDAO = await this.contract();
	    console.log('summoners', this.dao, this.dao.numberOfSummoners);
	    return Promise.all(upTo(this.dao.numberOfSummoners).map(i => elasticDAO.summoners(i)));
	  }

	}

	const cache$5 = {};
	const prefix$7 = '@elastic-dao/sdk - DAO';
	const isDAO = thing => thing && typeof thing === 'object' && thing instanceof DAO;
	const validateIsDAO = thing => {
	  const message = 'not a DAO';
	  validate$1(isDAO(thing), {
	    message,
	    prefix: prefix$7
	  });
	};
	class DAO extends ElasticModel {
	  constructor(sdk, {
	    ecosystem,
	    name,
	    numberOfSummoners,
	    summoned,
	    uuid
	  }) {
	    super(sdk);
	    this.id = uuid.toLowerCase();
	    cache$5[this.id] = {
	      ecosystem,
	      name,
	      numberOfSummoners,
	      summoned,
	      uuid
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$7
	    });
	    return sdk.contract({
	      abi: DAOContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, uuid, _ecosystem) {
	    validateIsAddress$1(uuid, {
	      prefix: prefix$7
	    });
	    let ecosystem = _ecosystem;

	    if (!isEcosystem(ecosystem)) {
	      ecosystem = await Ecosystem.deserialize(sdk, uuid);
	    }

	    const daoModel = await this.contract(sdk, ecosystem.daoModelAddress);
	    const {
	      name,
	      numberOfSummoners,
	      summoned
	    } = await daoModel.deserialize(uuid, ecosystem.toObject(false));
	    return new DAO(sdk, {
	      ecosystem,
	      name,
	      numberOfSummoners,
	      summoned,
	      uuid
	    });
	  } // Getters


	  get address() {
	    return this.ecosystem.daoModelAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get ecosystem() {
	    return cache$5[this.id].ecosystem;
	  }

	  get elasticDAO() {
	    return new ElasticDAO(this);
	  }

	  get name() {
	    return cache$5[this.id].name;
	  }

	  get numberOfSummoners() {
	    return this.toNumber(cache$5[this.id].numberOfSummoners);
	  }

	  get summoned() {
	    return cache$5[this.id].summoned;
	  }

	  get uuid() {
	    return cache$5[this.id].uuid;
	  } // Instance functions


	  async ethBalance() {
	    return this.toBigNumber(await this.sdk.provider.getBalance(this.uuid), 18);
	  }

	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.uuid, this.ecosystem);
	  }

	  async summoners() {
	    return this.elasticDAO.summoners();
	  }

	  async token() {
	    return Token.deserialize(this.sdk, this.ecosystem.governanceTokenAddress, this.ecosystem);
	  }

	  toObject(includeNested = true) {
	    const {
	      ecosystem,
	      id
	    } = this;
	    const obj = { ...cache$5[id],
	      id,
	      ecosystem: ecosystem.toObject(false),
	      summoners: []
	    };

	    if (includeNested === false) {
	      delete obj.ecosystem;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$7 = "hh-sol-artifact-1";
	var contractName$7 = "ElasticDAOFactory";
	var sourceName$7 = "src/core/ElasticDAOFactory.sol";
	var abi$7 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_ecosystemModelAddress",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "daoAddress",
					type: "address"
				}
			],
			name: "DAODeployed",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "feeReceiver",
					type: "address"
				}
			],
			name: "FeeAddressUpdated",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "address",
					name: "treasuryAddress",
					type: "address"
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "amount",
					type: "uint256"
				}
			],
			name: "FeesCollected",
			type: "event"
		},
		{
			stateMutability: "payable",
			type: "fallback"
		},
		{
			inputs: [
			],
			name: "collectFees",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address[]",
					name: "_summoners",
					type: "address[]"
				},
				{
					internalType: "string",
					name: "_nameOfDAO",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_numberOfSummoners",
					type: "uint256"
				},
				{
					internalType: "string",
					name: "_nameOfToken",
					type: "string"
				},
				{
					internalType: "string",
					name: "_symbol",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_eByl",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_elasticity",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_k",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_maxLambdaPurchase",
					type: "uint256"
				}
			],
			name: "deployDAOAndToken",
			outputs: [
			],
			stateMutability: "payable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			name: "deployedDAOAddresses",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "deployedDAOCount",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_feeReceiver",
					type: "address"
				}
			],
			name: "updateFeeAddress",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			stateMutability: "payable",
			type: "receive"
		}
	];
	var bytecode$7 = "0x6080604052600060035534801561001557600080fd5b506040516130af3803806130af83398101604081905261003491610059565b600080546001600160a01b0319166001600160a01b0392909216919091179055610087565b60006020828403121561006a578081fd5b81516001600160a01b0381168114610080578182fd5b9392505050565b613019806100966000396000f3fe608060405260043610620000555760003560e01c806357b3d0ec146200005f578063822fc6161462000076578063bbcaac3814620000a6578063c465b10514620000cb578063c879657214620000ff576200005d565b366200005d57005b005b6200005d62000070366004620004ef565b62000117565b3480156200008357600080fd5b506200008e62000275565b6040516200009d919062000768565b60405180910390f35b348015620000b357600080fd5b506200005d620000c5366004620004d2565b6200027b565b348015620000d857600080fd5b50620000f0620000ea366004620005d3565b620002c5565b6040516200009d91906200063a565b3480156200010c57600080fd5b506200005d620002ed565b600080546040516001600160a01b03909116908b908b908b906200013b90620003ad565b6200014a94939291906200064e565b604051809103906000f08015801562000167573d6000803e3d6000fd5b506040516303ca8c0960e01b81529091506001600160a01b038216906303ca8c0990620001a3908a908a908a908a908a908a90600401620006e2565b600060405180830381600087803b158015620001be57600080fd5b505af1158015620001d3573d6000803e3d6000fd5b505060028054600180820183556000929092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b038616179055600354620002329350915062000375565b6003556040516001600160a01b038216907f1cb5b7f48694f77209ac2e140151cda89a929b850874f26d327e8638e9fa65e090600090a250505050505050505050565b60035481565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f446e39bcf1b47cfadfaa23442cb4b34682cfe6bd9220da084894e3b1f834e4f390600090a250565b60028181548110620002d357fe5b6000918252602090912001546001600160a01b0316905081565b60015460405147916001600160a01b03169082156108fc029083906000818181858888f1935050505015801562000328573d6000803e3d6000fd5b506001546040517f9dc46f23cfb5ddcad0ae7ea2be38d47fec07bb9382ec7e564efc69e036dd66ce916200036a916001600160a01b03909116908490620006c9565b60405180910390a150565b600082820183811015620003a65760405162461bcd60e51b81526004016200039d9062000731565b60405180910390fd5b9392505050565b61284d806200079783390190565b80356001600160a01b0381168114620003d357600080fd5b919050565b600082601f830112620003e9578081fd5b813567ffffffffffffffff811115620003fe57fe5b60208082026200041082820162000771565b838152935081840185830182870184018810156200042d57600080fd5b600092505b848310156200045b576200044681620003bb565b82526001929092019190830190830162000432565b505050505092915050565b600082601f83011262000477578081fd5b813567ffffffffffffffff8111156200048c57fe5b620004a1601f8201601f191660200162000771565b9150808252836020828501011115620004b957600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215620004e4578081fd5b620003a682620003bb565b60008060008060008060008060006101208a8c0312156200050e578485fd5b893567ffffffffffffffff8082111562000526578687fd5b620005348d838e01620003d8565b9a5060208c01359150808211156200054a578687fd5b620005588d838e0162000466565b995060408c0135985060608c013591508082111562000575578687fd5b620005838d838e0162000466565b975060808c013591508082111562000599578687fd5b50620005a88c828d0162000466565b999c989b50969995989760a0870135975060c08701359660e081013596506101000135945092505050565b600060208284031215620005e5578081fd5b5035919050565b60008151808452815b818110156200061357602081850181015186830182015201620005f5565b81811115620006255782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b818110156200069e5785518516835294830194918301916001016200067e565b50508581036040870152620006b48189620005ec565b94505050505082606083015295945050505050565b6001600160a01b03929092168252602082015260400190565b600060c08252620006f760c0830189620005ec565b82810360208401526200070b8189620005ec565b9150508560408301528460608301528360808301528260a0830152979650505050505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff811182821017156200078e57fe5b60405291905056fe60806040523480156200001157600080fd5b506040516200284d3803806200284d83398101604081905262000034916200053c565b600080546001600160a01b0386166001600160a01b03199182161790915560018054909116331790556200006762000238565b60405163332a4d0960e01b81526001600160a01b0386169063332a4d09906200009690600090600401620007b7565b6101606040518083038186803b158015620000b057600080fd5b505afa158015620000c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000eb91906200069b565b84519091506200010390600290602087019062000294565b506101008101516200011462000238565b6040516316c5ac2560e11b81526001600160a01b03831690632d8b584a90620001429086906004016200085e565b61016060405180830381600087803b1580156200015e57600080fd5b505af115801562000173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019991906200069b565b6040516312e9f95760e31b81529091506001600160a01b0383169063974fcab890620001d0908990899089908790600401620007cb565b600060405180830381600087803b158015620001eb57600080fd5b505af115801562000200573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200022a9190810190620005be565b5050505050505050620008c8565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b828054828255906000526020600020908101928215620002ec579160200282015b82811115620002ec57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002b5565b50620002fa929150620002fe565b5090565b5b80821115620002fa5780546001600160a01b0319168155600101620002ff565b80516001600160a01b03811681146200033757600080fd5b919050565b600082601f8301126200034d578081fd5b81516001600160401b038111156200036157fe5b60208082026200037382820162000875565b838152935081840185830182870184018810156200039057600080fd5b600092505b84831015620003be57620003a9816200031f565b82526001929092019190830190830162000395565b505050505092915050565b805180151581146200033757600080fd5b600082601f830112620003eb578081fd5b81516001600160401b03811115620003ff57fe5b62000414601f8201601f191660200162000875565b91508082528360208285010111156200042c57600080fd5b6200043f81602084016020860162000899565b5092915050565b60006101608083850312156200045a578182fd5b620004658162000875565b91505062000473826200031f565b815262000483602083016200031f565b602082015262000496604083016200031f565b6040820152620004a9606083016200031f565b6060820152620004bc608083016200031f565b6080820152620004cf60a083016200031f565b60a0820152620004e260c083016200031f565b60c0820152620004f560e083016200031f565b60e08201526101006200050a8184016200031f565b908201526101206200051e8382016200031f565b90820152610140620005328382016200031f565b9082015292915050565b6000806000806080858703121562000552578384fd5b6200055d856200031f565b60208601519094506001600160401b03808211156200057a578485fd5b62000588888389016200033c565b945060408701519150808211156200059e578384fd5b50620005ad87828801620003da565b606096909601519497939650505050565b600060208284031215620005d0578081fd5b81516001600160401b0380821115620005e7578283fd5b908301906102008286031215620005fc578283fd5b6200060860c062000875565b62000613836200031f565b815260208301518281111562000627578485fd5b62000635878286016200033c565b6020830152506200064960408401620003c9565b604082015260608301518281111562000660578485fd5b6200066e87828601620003da565b606083015250608083015160808201526200068d8660a0850162000446565b60a082015295945050505050565b60006101608284031215620006ae578081fd5b620006ba838362000446565b9392505050565b6001600160a01b03169052565b620006db828251620006c1565b6020810151620006ef6020840182620006c1565b506040810151620007046040840182620006c1565b506060810151620007196060840182620006c1565b5060808101516200072e6080840182620006c1565b5060a08101516200074360a0840182620006c1565b5060c08101516200075860c0840182620006c1565b5060e08101516200076d60e0840182620006c1565b50610100808201516200078382850182620006c1565b5050610120808201516200079a82850182620006c1565b505061014080820151620007b182850182620006c1565b50505050565b6001600160a01b0391909116815260200190565b6101c080825285519082018190526000906101e0830190602090818901845b82811015620008115781516001600160a01b031685529383019390830190600101620007ea565b5050508382038185015286518083526200083181838501848b0162000899565b60408501879052601f01601f191691909101019050620008556060830184620006ce565b95945050505050565b61016081016200086f8284620006ce565b92915050565b6040518181016001600160401b03811182821017156200089157fe5b604052919050565b60005b83811015620008b65781810151838201526020016200089c565b83811115620007b15750506000910152565b611f7580620008d86000396000f3fe60806040526004361061007f5760003560e01c80631fb460891161004e5780631fb46089146100fb578063985da72614610103578063a0f2c9771461012e578063d38b576d1461015057610086565b80630181bb0b14610088578063035d9f2a146100a857806303ca8c09146100c8578063049878f3146100e857610086565b3661008657005b005b34801561009457600080fd5b506100866100a3366004611517565b61017d565b3480156100b457600080fd5b506100866100c33660046117f7565b61023e565b3480156100d457600080fd5b506100866100e336600461157f565b6106a6565b6100866100f63660046117f7565b6107f5565b610086610a5f565b34801561010f57600080fd5b50610118610d69565b6040516101259190611d81565b60405180910390f35b34801561013a57600080fd5b50610143610d7e565b6040516101259190611de0565b34801561015c57600080fd5b5061017061016b3660046117f7565b610d8e565b60405161012591906119e9565b6101856111d0565b61018d610db5565b6040810151909150156101bb5760405162461bcd60e51b81526004016101b290611ad4565b60405180910390fd5b6101c3611216565b6101cb610e5c565b6101208101516040516331081b8760e01b8152919250906001600160a01b038216906331081b879061020590889088908790600401611a34565b600060405180830381600087803b15801561021f57600080fd5b505af1158015610233573d6000803e3d6000fd5b505050505050505050565b6102466111d0565b61024e610db5565b6040810151909150156102735760405162461bcd60e51b81526004016101b290611ad4565b61027b611216565b610283610e5c565b60608101519091506102936111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c5906102c190309087906004016119fd565b60006040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103159190810190611603565b90506000826001600160a01b0316626cfdda83336040518363ffffffff1660e01b8152600401610346929190611d94565b60206040518083038186803b15801561035e57600080fd5b505afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190611565565b9050806103b55760405162461bcd60e51b81526004016101b290611b18565b600047116103d55760405162461bcd60e51b81526004016101b290611d24565b6103dd611216565b6103e5610e5c565b60608101519091506103f56111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c59061042390309087906004016119fd565b60006040518083038186803b15801561043b57600080fd5b505afa15801561044f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104779190810190611603565b9050610481611272565b60e084015161014085015160405163fb10b0c560e01b81526001600160a01b039092169163fb10b0c5916104b99188906004016119fd565b60006040518083038186803b1580156104d157600080fd5b505afa1580156104e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050d91908101906116ec565b805190915060005b836080015181101561063157816001600160a01b031663528c198a866001600160a01b031663cc469ca787856040518363ffffffff1660e01b815260040161055e929190611dbe565b60206040518083038186803b15801561057657600080fd5b505afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae91906114fb565b8e6040518363ffffffff1660e01b81526004016105cc929190611a1b565b602060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e9190611565565b5061062a816001610ee5565b9050610515565b5060016040808501919091525163587ce3b160e01b81526001600160a01b0385169063587ce3b190610667908690600401611d81565b600060405180830381600087803b15801561068157600080fd5b505af1158015610695573d6000803e3d6000fd5b505050505050505050505050505050565b6106ae6111d0565b6106b6610db5565b6040810151909150156106db5760405162461bcd60e51b81526004016101b290611ad4565b6001546001600160a01b031633146107055760405162461bcd60e51b81526004016101b290611cd2565b61070d611216565b610715610e5c565b905061071f611272565b8161010001516001600160a01b0316638891ba638a8a8a8a8a8a896040518863ffffffff1660e01b815260040161075c9796959493929190611a84565b600060405180830381600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b291908101906116ec565b80516040519192506001600160a01b0316907fad65bbe394ae719938a7445c7588b2cdb455ea64f1364115b1e073e31bb1af9b90600090a2505050505050505050565b6107fd6111d0565b610805610db5565b905080604001516108285760405162461bcd60e51b81526004016101b290611bda565b610830611272565b610838610f13565b905080610120015183111561085f5760405162461bcd60e51b81526004016101b290611b86565b60008160000151905060006108e6344703836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a957600080fd5b505afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e1919061180f565b610fb8565b9050600061090986838660c001518760a001518860e00151896101000151610fc4565b905034811461092a5760405162461bcd60e51b81526004016101b290611c0f565b600061093a878660e00151610ee5565b90506000610952828760e0015188610100015161101e565b905061095c611216565b610964610e5c565b60e081015161010089018490526040516295bfb960e61b8152919250906001600160a01b0382169063256fee40906109a0908b90600401611def565b600060405180830381600087803b1580156109ba57600080fd5b505af11580156109ce573d6000803e3d6000fd5b50506040516329460cc560e11b81526001600160a01b038a16925063528c198a9150610a009033908e90600401611a1b565b602060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190611565565b5050505050505050505050565b610a676111d0565b610a6f610db5565b604081015190915015610a945760405162461bcd60e51b81526004016101b290611ad4565b610a9c611216565b610aa4610e5c565b6060810151909150610ab46111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c590610ae290309087906004016119fd565b60006040518083038186803b158015610afa57600080fd5b505afa158015610b0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b369190810190611603565b90506000826001600160a01b0316626cfdda83336040518363ffffffff1660e01b8152600401610b67929190611d94565b60206040518083038186803b158015610b7f57600080fd5b505afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190611565565b905080610bd65760405162461bcd60e51b81526004016101b290611b18565b610bde611216565b610be6610e5c565b90506000610bf2610e5c565b60e00151610140830151604051637fc975f360e01b81526001600160a01b0390921691637fc975f391610c299186906004016119fd565b60206040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190611565565b905080610c985760405162461bcd60e51b81526004016101b290611c85565b610ca0611272565b610ca8610f13565b905060003490506000610cbf82846080015161103d565b90506000610cd7828560c0015186610100015161106d565b84516040516329460cc560e11b81529192506001600160a01b03169063528c198a90610d099033908690600401611a1b565b602060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5b9190611565565b505050505050505050505050565b610d716111d0565b610d79610db5565b905090565b610d86611216565b610d79610e5c565b60028181548110610d9b57fe5b6000918252602090912001546001600160a01b0316905081565b610dbd6111d0565b610dc5611216565b610dcd610e5c565b606081015160405163fb10b0c560e01b81529192506001600160a01b03169063fb10b0c590610e0290309085906004016119fd565b60006040518083038186803b158015610e1a57600080fd5b505afa158015610e2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e569190810190611603565b91505090565b610e64611216565b60005460405163332a4d0960e01b81526001600160a01b039091169063332a4d0990610e949030906004016119e9565b6101606040518083038186803b158015610ead57600080fd5b505afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7991906116d0565b600082820183811015610f0a5760405162461bcd60e51b81526004016101b290611b4f565b90505b92915050565b610f1b611272565b610f23611216565b610f2b610e5c565b90508060e001516001600160a01b031663fb10b0c5826101400151836040518363ffffffff1660e01b8152600401610f649291906119fd565b60006040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e5691908101906116ec565b6000610f0a838361103d565b600080610fd18885610ee5565b9050611012610fe08888611078565b610ffe61100384610ffe610ff5878b8b61101e565b610ffe8c61109e565b611078565b61100d8888611078565b6110bd565b98975050505050505050565b600061103361102d858561103d565b83611078565b90505b9392505050565b60008161105e61105585670de0b6b3a76400006110ff565b60028504610ee5565b8161106557fe5b049392505050565b600061103361102d85855b6000670de0b6b3a764000061105e61109085856110ff565b6706f05b59d3b20000610ee5565b60006110b5826110b0600a6012611139565b610ee5565b90505b919050565b6000610f0a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111a4565b60008261110e57506000610f0d565b8282028284828161111b57fe5b0414610f0a5760405162461bcd60e51b81526004016101b290611c44565b60008161114857506001610f0d565b8160011415611158575081610f0d565b8215801561116557508115155b1561117257506000610f0d565b8260015b8381101561119c5761118882866110ff565b9150611195816001610ee5565b9050611176565b509050610f0d565b600081848411156111c85760405162461bcd60e51b81526004016101b29190611a71565b505050900390565b6040518060c0016040528060006001600160a01b03168152602001606081526020016000151581526020016060815260200160008152602001611211611216565b905290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b60405180610180016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611211611216565b80516110b881611f27565b600082601f8301126112f7578081fd5b815167ffffffffffffffff81111561130b57fe5b602080820261131b828201611eb5565b8381529350818401858301828701840188101561133757600080fd5b600092505b8483101561136357805161134f81611f27565b82526001929092019190830190830161133c565b505050505092915050565b805180151581146110b857600080fd5b600082601f83011261138e578081fd5b81356113a161139c82611ed9565b611eb5565b91508082528360208285010111156113b857600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126113e1578081fd5b81516113ef61139c82611ed9565b915080825283602082850101111561140657600080fd5b611417816020840160208601611efb565b5092915050565b6000610160808385031215611431578182fd5b61143a81611eb5565b915050611446826112dc565b8152611454602083016112dc565b6020820152611465604083016112dc565b6040820152611476606083016112dc565b6060820152611487608083016112dc565b608082015261149860a083016112dc565b60a08201526114a960c083016112dc565b60c08201526114ba60e083016112dc565b60e08201526101006114cd8184016112dc565b908201526101206114df8382016112dc565b908201526101406114f18382016112dc565b9082015292915050565b60006020828403121561150c578081fd5b8151610f0a81611f27565b60008060408385031215611529578081fd5b823561153481611f27565b9150602083013567ffffffffffffffff81111561154f578182fd5b61155b8582860161137e565b9150509250929050565b600060208284031215611576578081fd5b610f0a8261136e565b60008060008060008060c08789031215611597578182fd5b863567ffffffffffffffff808211156115ae578384fd5b6115ba8a838b0161137e565b975060208901359150808211156115cf578384fd5b506115dc89828a0161137e565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b600060208284031215611614578081fd5b815167ffffffffffffffff8082111561162b578283fd5b90830190610200828603121561163f578283fd5b61164960c0611eb5565b611652836112dc565b8152602083015182811115611665578485fd5b611671878286016112e7565b6020830152506116836040840161136e565b6040820152606083015182811115611699578485fd5b6116a5878286016113d1565b606083015250608083015160808201526116c28660a0850161141e565b60a082015295945050505050565b600061016082840312156116e2578081fd5b610f0a838361141e565b6000602082840312156116fd578081fd5b815167ffffffffffffffff80821115611714578283fd5b908301906102c08286031215611728578283fd5b611733610180611eb5565b61173c836112dc565b815260208301518281111561174f578485fd5b61175b878286016113d1565b602083015250604083015182811115611772578485fd5b61177e878286016113d1565b604083015250606083810151908201526080808401519082015260a0808401519082015260c0808401519082015260e0808401519082015261010080840151908201526101208084015190820152610140808401519082015261016091506117e88683850161141e565b91810191909152949350505050565b600060208284031215611808578081fd5b5035919050565b600060208284031215611820578081fd5b5051919050565b6001600160a01b03169052565b15159052565b60008151808452611852816020860160208601611efb565b601f01601f19169290920160200192915050565b80516001600160a01b039081168352602080830151610200828601819052815190860181905260009361022087019392830192909185905b808210156118c05784518416865294820194938201936001919091019061189e565b505050505060408301516118d76040860182611834565b50606083015184820360608601526118ef828261183a565b9150506080830151608085015260a083015161190e60a0860182611916565b509392505050565b611921828251611827565b60208101516119336020840182611827565b5060408101516119466040840182611827565b5060608101516119596060840182611827565b50608081015161196c6080840182611827565b5060a081015161197f60a0840182611827565b5060c081015161199260c0840182611827565b5060e08101516119a560e0840182611827565b50610100808201516119b982850182611827565b5050610120808201516119ce82850182611827565b5050610140808201516119e382850182611827565b50505050565b6001600160a01b0391909116815260200190565b6001600160a01b038316815261018081016110366020830184611916565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03841681526101a060208201819052600090611a598382018661183a565b915050611a696040830184611916565b949350505050565b600060208252610f0a602083018461183a565b6000610220808352611a988184018b61183a565b90508281036020840152611aac818a61183a565b9150508660408301528560608301528460808301528360a083015261101260c0830184611916565b60208082526024908201527f456c617374696344414f3a2044414f206d757374206e6f742062652073756d6d6040820152631bdb995960e21b606082015260800190565b6020808252601a908201527f456c617374696344414f3a204f6e6c792073756d6d6f6e657273000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f456c617374696344414f3a2043616e6e6f742070757263686173652074686174604082015273206d616e7920736861726573206174206f6e636560601b606082015260800190565b6020808252818101527f456c617374696344414f3a2044414f206d7573742062652073756d6d6f6e6564604082015260600190565b6020808252818101527f456c617374696344414f3a20496e636f72726563742045544820616d6f756e74604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602d908201527f456c617374696344414f3a20506c656173652063616c6c20696e697469616c6960408201526c1e99551bdad95b88199a5c9cdd609a1b606082015260800190565b60208082526032908201527f456c617374696344414f3a204f6e6c79206465706c6f7965722063616e20696e60408201527134ba34b0b634bd32903a3432902a37b5b2b760711b606082015260800190565b60208082526039908201527f456c617374696344414f3a20506c6561736520736565642044414f207769746860408201527f2045544820746f20736574204554483a45475420726174696f00000000000000606082015260800190565b600060208252610f0a6020830184611866565b600060408252611da76040830185611866565b905060018060a01b03831660208301529392505050565b600060408252611dd16040830185611866565b90508260208301529392505050565b6101608101610f0d8284611916565b600060208252611e03602083018451611827565b60208301516102c06040840152611e1e6102e084018261183a565b90506040840151601f19848303016060850152611e3b828261183a565b91505060608401516080840152608084015160a084015260a084015160c084015260c084015160e084015260e084015161010081818601528086015191505061012081818601528086015191505061014081818601528086015191505061016081818601528086015191505061190e610180850182611916565b60405181810167ffffffffffffffff81118282101715611ed157fe5b604052919050565b600067ffffffffffffffff821115611eed57fe5b50601f01601f191660200190565b60005b83811015611f16578181015183820152602001611efe565b838111156119e35750506000910152565b6001600160a01b0381168114611f3c57600080fd5b5056fea2646970667358221220f060723535f8a28bd788874bb45eb8f63bc270a7b75bf938bfee9b37a76681e664736f6c63430007020033a264697066735822122085788a8f30cae47aaaed51ebdc5f2f72f309b89644b7200cf5cc50c75b7e012364736f6c63430007020033";
	var deployedBytecode$7 = "0x608060405260043610620000555760003560e01c806357b3d0ec146200005f578063822fc6161462000076578063bbcaac3814620000a6578063c465b10514620000cb578063c879657214620000ff576200005d565b366200005d57005b005b6200005d62000070366004620004ef565b62000117565b3480156200008357600080fd5b506200008e62000275565b6040516200009d919062000768565b60405180910390f35b348015620000b357600080fd5b506200005d620000c5366004620004d2565b6200027b565b348015620000d857600080fd5b50620000f0620000ea366004620005d3565b620002c5565b6040516200009d91906200063a565b3480156200010c57600080fd5b506200005d620002ed565b600080546040516001600160a01b03909116908b908b908b906200013b90620003ad565b6200014a94939291906200064e565b604051809103906000f08015801562000167573d6000803e3d6000fd5b506040516303ca8c0960e01b81529091506001600160a01b038216906303ca8c0990620001a3908a908a908a908a908a908a90600401620006e2565b600060405180830381600087803b158015620001be57600080fd5b505af1158015620001d3573d6000803e3d6000fd5b505060028054600180820183556000929092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b038616179055600354620002329350915062000375565b6003556040516001600160a01b038216907f1cb5b7f48694f77209ac2e140151cda89a929b850874f26d327e8638e9fa65e090600090a250505050505050505050565b60035481565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f446e39bcf1b47cfadfaa23442cb4b34682cfe6bd9220da084894e3b1f834e4f390600090a250565b60028181548110620002d357fe5b6000918252602090912001546001600160a01b0316905081565b60015460405147916001600160a01b03169082156108fc029083906000818181858888f1935050505015801562000328573d6000803e3d6000fd5b506001546040517f9dc46f23cfb5ddcad0ae7ea2be38d47fec07bb9382ec7e564efc69e036dd66ce916200036a916001600160a01b03909116908490620006c9565b60405180910390a150565b600082820183811015620003a65760405162461bcd60e51b81526004016200039d9062000731565b60405180910390fd5b9392505050565b61284d806200079783390190565b80356001600160a01b0381168114620003d357600080fd5b919050565b600082601f830112620003e9578081fd5b813567ffffffffffffffff811115620003fe57fe5b60208082026200041082820162000771565b838152935081840185830182870184018810156200042d57600080fd5b600092505b848310156200045b576200044681620003bb565b82526001929092019190830190830162000432565b505050505092915050565b600082601f83011262000477578081fd5b813567ffffffffffffffff8111156200048c57fe5b620004a1601f8201601f191660200162000771565b9150808252836020828501011115620004b957600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215620004e4578081fd5b620003a682620003bb565b60008060008060008060008060006101208a8c0312156200050e578485fd5b893567ffffffffffffffff8082111562000526578687fd5b620005348d838e01620003d8565b9a5060208c01359150808211156200054a578687fd5b620005588d838e0162000466565b995060408c0135985060608c013591508082111562000575578687fd5b620005838d838e0162000466565b975060808c013591508082111562000599578687fd5b50620005a88c828d0162000466565b999c989b50969995989760a0870135975060c08701359660e081013596506101000135945092505050565b600060208284031215620005e5578081fd5b5035919050565b60008151808452815b818110156200061357602081850181015186830182015201620005f5565b81811115620006255782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b818110156200069e5785518516835294830194918301916001016200067e565b50508581036040870152620006b48189620005ec565b94505050505082606083015295945050505050565b6001600160a01b03929092168252602082015260400190565b600060c08252620006f760c0830189620005ec565b82810360208401526200070b8189620005ec565b9150508560408301528460608301528360808301528260a0830152979650505050505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff811182821017156200078e57fe5b60405291905056fe60806040523480156200001157600080fd5b506040516200284d3803806200284d83398101604081905262000034916200053c565b600080546001600160a01b0386166001600160a01b03199182161790915560018054909116331790556200006762000238565b60405163332a4d0960e01b81526001600160a01b0386169063332a4d09906200009690600090600401620007b7565b6101606040518083038186803b158015620000b057600080fd5b505afa158015620000c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000eb91906200069b565b84519091506200010390600290602087019062000294565b506101008101516200011462000238565b6040516316c5ac2560e11b81526001600160a01b03831690632d8b584a90620001429086906004016200085e565b61016060405180830381600087803b1580156200015e57600080fd5b505af115801562000173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019991906200069b565b6040516312e9f95760e31b81529091506001600160a01b0383169063974fcab890620001d0908990899089908790600401620007cb565b600060405180830381600087803b158015620001eb57600080fd5b505af115801562000200573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200022a9190810190620005be565b5050505050505050620008c8565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b828054828255906000526020600020908101928215620002ec579160200282015b82811115620002ec57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002b5565b50620002fa929150620002fe565b5090565b5b80821115620002fa5780546001600160a01b0319168155600101620002ff565b80516001600160a01b03811681146200033757600080fd5b919050565b600082601f8301126200034d578081fd5b81516001600160401b038111156200036157fe5b60208082026200037382820162000875565b838152935081840185830182870184018810156200039057600080fd5b600092505b84831015620003be57620003a9816200031f565b82526001929092019190830190830162000395565b505050505092915050565b805180151581146200033757600080fd5b600082601f830112620003eb578081fd5b81516001600160401b03811115620003ff57fe5b62000414601f8201601f191660200162000875565b91508082528360208285010111156200042c57600080fd5b6200043f81602084016020860162000899565b5092915050565b60006101608083850312156200045a578182fd5b620004658162000875565b91505062000473826200031f565b815262000483602083016200031f565b602082015262000496604083016200031f565b6040820152620004a9606083016200031f565b6060820152620004bc608083016200031f565b6080820152620004cf60a083016200031f565b60a0820152620004e260c083016200031f565b60c0820152620004f560e083016200031f565b60e08201526101006200050a8184016200031f565b908201526101206200051e8382016200031f565b90820152610140620005328382016200031f565b9082015292915050565b6000806000806080858703121562000552578384fd5b6200055d856200031f565b60208601519094506001600160401b03808211156200057a578485fd5b62000588888389016200033c565b945060408701519150808211156200059e578384fd5b50620005ad87828801620003da565b606096909601519497939650505050565b600060208284031215620005d0578081fd5b81516001600160401b0380821115620005e7578283fd5b908301906102008286031215620005fc578283fd5b6200060860c062000875565b62000613836200031f565b815260208301518281111562000627578485fd5b62000635878286016200033c565b6020830152506200064960408401620003c9565b604082015260608301518281111562000660578485fd5b6200066e87828601620003da565b606083015250608083015160808201526200068d8660a0850162000446565b60a082015295945050505050565b60006101608284031215620006ae578081fd5b620006ba838362000446565b9392505050565b6001600160a01b03169052565b620006db828251620006c1565b6020810151620006ef6020840182620006c1565b506040810151620007046040840182620006c1565b506060810151620007196060840182620006c1565b5060808101516200072e6080840182620006c1565b5060a08101516200074360a0840182620006c1565b5060c08101516200075860c0840182620006c1565b5060e08101516200076d60e0840182620006c1565b50610100808201516200078382850182620006c1565b5050610120808201516200079a82850182620006c1565b505061014080820151620007b182850182620006c1565b50505050565b6001600160a01b0391909116815260200190565b6101c080825285519082018190526000906101e0830190602090818901845b82811015620008115781516001600160a01b031685529383019390830190600101620007ea565b5050508382038185015286518083526200083181838501848b0162000899565b60408501879052601f01601f191691909101019050620008556060830184620006ce565b95945050505050565b61016081016200086f8284620006ce565b92915050565b6040518181016001600160401b03811182821017156200089157fe5b604052919050565b60005b83811015620008b65781810151838201526020016200089c565b83811115620007b15750506000910152565b611f7580620008d86000396000f3fe60806040526004361061007f5760003560e01c80631fb460891161004e5780631fb46089146100fb578063985da72614610103578063a0f2c9771461012e578063d38b576d1461015057610086565b80630181bb0b14610088578063035d9f2a146100a857806303ca8c09146100c8578063049878f3146100e857610086565b3661008657005b005b34801561009457600080fd5b506100866100a3366004611517565b61017d565b3480156100b457600080fd5b506100866100c33660046117f7565b61023e565b3480156100d457600080fd5b506100866100e336600461157f565b6106a6565b6100866100f63660046117f7565b6107f5565b610086610a5f565b34801561010f57600080fd5b50610118610d69565b6040516101259190611d81565b60405180910390f35b34801561013a57600080fd5b50610143610d7e565b6040516101259190611de0565b34801561015c57600080fd5b5061017061016b3660046117f7565b610d8e565b60405161012591906119e9565b6101856111d0565b61018d610db5565b6040810151909150156101bb5760405162461bcd60e51b81526004016101b290611ad4565b60405180910390fd5b6101c3611216565b6101cb610e5c565b6101208101516040516331081b8760e01b8152919250906001600160a01b038216906331081b879061020590889088908790600401611a34565b600060405180830381600087803b15801561021f57600080fd5b505af1158015610233573d6000803e3d6000fd5b505050505050505050565b6102466111d0565b61024e610db5565b6040810151909150156102735760405162461bcd60e51b81526004016101b290611ad4565b61027b611216565b610283610e5c565b60608101519091506102936111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c5906102c190309087906004016119fd565b60006040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103159190810190611603565b90506000826001600160a01b0316626cfdda83336040518363ffffffff1660e01b8152600401610346929190611d94565b60206040518083038186803b15801561035e57600080fd5b505afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190611565565b9050806103b55760405162461bcd60e51b81526004016101b290611b18565b600047116103d55760405162461bcd60e51b81526004016101b290611d24565b6103dd611216565b6103e5610e5c565b60608101519091506103f56111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c59061042390309087906004016119fd565b60006040518083038186803b15801561043b57600080fd5b505afa15801561044f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104779190810190611603565b9050610481611272565b60e084015161014085015160405163fb10b0c560e01b81526001600160a01b039092169163fb10b0c5916104b99188906004016119fd565b60006040518083038186803b1580156104d157600080fd5b505afa1580156104e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050d91908101906116ec565b805190915060005b836080015181101561063157816001600160a01b031663528c198a866001600160a01b031663cc469ca787856040518363ffffffff1660e01b815260040161055e929190611dbe565b60206040518083038186803b15801561057657600080fd5b505afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae91906114fb565b8e6040518363ffffffff1660e01b81526004016105cc929190611a1b565b602060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e9190611565565b5061062a816001610ee5565b9050610515565b5060016040808501919091525163587ce3b160e01b81526001600160a01b0385169063587ce3b190610667908690600401611d81565b600060405180830381600087803b15801561068157600080fd5b505af1158015610695573d6000803e3d6000fd5b505050505050505050505050505050565b6106ae6111d0565b6106b6610db5565b6040810151909150156106db5760405162461bcd60e51b81526004016101b290611ad4565b6001546001600160a01b031633146107055760405162461bcd60e51b81526004016101b290611cd2565b61070d611216565b610715610e5c565b905061071f611272565b8161010001516001600160a01b0316638891ba638a8a8a8a8a8a896040518863ffffffff1660e01b815260040161075c9796959493929190611a84565b600060405180830381600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b291908101906116ec565b80516040519192506001600160a01b0316907fad65bbe394ae719938a7445c7588b2cdb455ea64f1364115b1e073e31bb1af9b90600090a2505050505050505050565b6107fd6111d0565b610805610db5565b905080604001516108285760405162461bcd60e51b81526004016101b290611bda565b610830611272565b610838610f13565b905080610120015183111561085f5760405162461bcd60e51b81526004016101b290611b86565b60008160000151905060006108e6344703836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a957600080fd5b505afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e1919061180f565b610fb8565b9050600061090986838660c001518760a001518860e00151896101000151610fc4565b905034811461092a5760405162461bcd60e51b81526004016101b290611c0f565b600061093a878660e00151610ee5565b90506000610952828760e0015188610100015161101e565b905061095c611216565b610964610e5c565b60e081015161010089018490526040516295bfb960e61b8152919250906001600160a01b0382169063256fee40906109a0908b90600401611def565b600060405180830381600087803b1580156109ba57600080fd5b505af11580156109ce573d6000803e3d6000fd5b50506040516329460cc560e11b81526001600160a01b038a16925063528c198a9150610a009033908e90600401611a1b565b602060405180830381600087803b158015610a1a57600080fd5b505af1158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190611565565b5050505050505050505050565b610a676111d0565b610a6f610db5565b604081015190915015610a945760405162461bcd60e51b81526004016101b290611ad4565b610a9c611216565b610aa4610e5c565b6060810151909150610ab46111d0565b60405163fb10b0c560e01b81526001600160a01b0383169063fb10b0c590610ae290309087906004016119fd565b60006040518083038186803b158015610afa57600080fd5b505afa158015610b0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b369190810190611603565b90506000826001600160a01b0316626cfdda83336040518363ffffffff1660e01b8152600401610b67929190611d94565b60206040518083038186803b158015610b7f57600080fd5b505afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190611565565b905080610bd65760405162461bcd60e51b81526004016101b290611b18565b610bde611216565b610be6610e5c565b90506000610bf2610e5c565b60e00151610140830151604051637fc975f360e01b81526001600160a01b0390921691637fc975f391610c299186906004016119fd565b60206040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190611565565b905080610c985760405162461bcd60e51b81526004016101b290611c85565b610ca0611272565b610ca8610f13565b905060003490506000610cbf82846080015161103d565b90506000610cd7828560c0015186610100015161106d565b84516040516329460cc560e11b81529192506001600160a01b03169063528c198a90610d099033908690600401611a1b565b602060405180830381600087803b158015610d2357600080fd5b505af1158015610d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5b9190611565565b505050505050505050505050565b610d716111d0565b610d79610db5565b905090565b610d86611216565b610d79610e5c565b60028181548110610d9b57fe5b6000918252602090912001546001600160a01b0316905081565b610dbd6111d0565b610dc5611216565b610dcd610e5c565b606081015160405163fb10b0c560e01b81529192506001600160a01b03169063fb10b0c590610e0290309085906004016119fd565b60006040518083038186803b158015610e1a57600080fd5b505afa158015610e2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e569190810190611603565b91505090565b610e64611216565b60005460405163332a4d0960e01b81526001600160a01b039091169063332a4d0990610e949030906004016119e9565b6101606040518083038186803b158015610ead57600080fd5b505afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7991906116d0565b600082820183811015610f0a5760405162461bcd60e51b81526004016101b290611b4f565b90505b92915050565b610f1b611272565b610f23611216565b610f2b610e5c565b90508060e001516001600160a01b031663fb10b0c5826101400151836040518363ffffffff1660e01b8152600401610f649291906119fd565b60006040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e5691908101906116ec565b6000610f0a838361103d565b600080610fd18885610ee5565b9050611012610fe08888611078565b610ffe61100384610ffe610ff5878b8b61101e565b610ffe8c61109e565b611078565b61100d8888611078565b6110bd565b98975050505050505050565b600061103361102d858561103d565b83611078565b90505b9392505050565b60008161105e61105585670de0b6b3a76400006110ff565b60028504610ee5565b8161106557fe5b049392505050565b600061103361102d85855b6000670de0b6b3a764000061105e61109085856110ff565b6706f05b59d3b20000610ee5565b60006110b5826110b0600a6012611139565b610ee5565b90505b919050565b6000610f0a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111a4565b60008261110e57506000610f0d565b8282028284828161111b57fe5b0414610f0a5760405162461bcd60e51b81526004016101b290611c44565b60008161114857506001610f0d565b8160011415611158575081610f0d565b8215801561116557508115155b1561117257506000610f0d565b8260015b8381101561119c5761118882866110ff565b9150611195816001610ee5565b9050611176565b509050610f0d565b600081848411156111c85760405162461bcd60e51b81526004016101b29190611a71565b505050900390565b6040518060c0016040528060006001600160a01b03168152602001606081526020016000151581526020016060815260200160008152602001611211611216565b905290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b60405180610180016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611211611216565b80516110b881611f27565b600082601f8301126112f7578081fd5b815167ffffffffffffffff81111561130b57fe5b602080820261131b828201611eb5565b8381529350818401858301828701840188101561133757600080fd5b600092505b8483101561136357805161134f81611f27565b82526001929092019190830190830161133c565b505050505092915050565b805180151581146110b857600080fd5b600082601f83011261138e578081fd5b81356113a161139c82611ed9565b611eb5565b91508082528360208285010111156113b857600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126113e1578081fd5b81516113ef61139c82611ed9565b915080825283602082850101111561140657600080fd5b611417816020840160208601611efb565b5092915050565b6000610160808385031215611431578182fd5b61143a81611eb5565b915050611446826112dc565b8152611454602083016112dc565b6020820152611465604083016112dc565b6040820152611476606083016112dc565b6060820152611487608083016112dc565b608082015261149860a083016112dc565b60a08201526114a960c083016112dc565b60c08201526114ba60e083016112dc565b60e08201526101006114cd8184016112dc565b908201526101206114df8382016112dc565b908201526101406114f18382016112dc565b9082015292915050565b60006020828403121561150c578081fd5b8151610f0a81611f27565b60008060408385031215611529578081fd5b823561153481611f27565b9150602083013567ffffffffffffffff81111561154f578182fd5b61155b8582860161137e565b9150509250929050565b600060208284031215611576578081fd5b610f0a8261136e565b60008060008060008060c08789031215611597578182fd5b863567ffffffffffffffff808211156115ae578384fd5b6115ba8a838b0161137e565b975060208901359150808211156115cf578384fd5b506115dc89828a0161137e565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b600060208284031215611614578081fd5b815167ffffffffffffffff8082111561162b578283fd5b90830190610200828603121561163f578283fd5b61164960c0611eb5565b611652836112dc565b8152602083015182811115611665578485fd5b611671878286016112e7565b6020830152506116836040840161136e565b6040820152606083015182811115611699578485fd5b6116a5878286016113d1565b606083015250608083015160808201526116c28660a0850161141e565b60a082015295945050505050565b600061016082840312156116e2578081fd5b610f0a838361141e565b6000602082840312156116fd578081fd5b815167ffffffffffffffff80821115611714578283fd5b908301906102c08286031215611728578283fd5b611733610180611eb5565b61173c836112dc565b815260208301518281111561174f578485fd5b61175b878286016113d1565b602083015250604083015182811115611772578485fd5b61177e878286016113d1565b604083015250606083810151908201526080808401519082015260a0808401519082015260c0808401519082015260e0808401519082015261010080840151908201526101208084015190820152610140808401519082015261016091506117e88683850161141e565b91810191909152949350505050565b600060208284031215611808578081fd5b5035919050565b600060208284031215611820578081fd5b5051919050565b6001600160a01b03169052565b15159052565b60008151808452611852816020860160208601611efb565b601f01601f19169290920160200192915050565b80516001600160a01b039081168352602080830151610200828601819052815190860181905260009361022087019392830192909185905b808210156118c05784518416865294820194938201936001919091019061189e565b505050505060408301516118d76040860182611834565b50606083015184820360608601526118ef828261183a565b9150506080830151608085015260a083015161190e60a0860182611916565b509392505050565b611921828251611827565b60208101516119336020840182611827565b5060408101516119466040840182611827565b5060608101516119596060840182611827565b50608081015161196c6080840182611827565b5060a081015161197f60a0840182611827565b5060c081015161199260c0840182611827565b5060e08101516119a560e0840182611827565b50610100808201516119b982850182611827565b5050610120808201516119ce82850182611827565b5050610140808201516119e382850182611827565b50505050565b6001600160a01b0391909116815260200190565b6001600160a01b038316815261018081016110366020830184611916565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03841681526101a060208201819052600090611a598382018661183a565b915050611a696040830184611916565b949350505050565b600060208252610f0a602083018461183a565b6000610220808352611a988184018b61183a565b90508281036020840152611aac818a61183a565b9150508660408301528560608301528460808301528360a083015261101260c0830184611916565b60208082526024908201527f456c617374696344414f3a2044414f206d757374206e6f742062652073756d6d6040820152631bdb995960e21b606082015260800190565b6020808252601a908201527f456c617374696344414f3a204f6e6c792073756d6d6f6e657273000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f456c617374696344414f3a2043616e6e6f742070757263686173652074686174604082015273206d616e7920736861726573206174206f6e636560601b606082015260800190565b6020808252818101527f456c617374696344414f3a2044414f206d7573742062652073756d6d6f6e6564604082015260600190565b6020808252818101527f456c617374696344414f3a20496e636f72726563742045544820616d6f756e74604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602d908201527f456c617374696344414f3a20506c656173652063616c6c20696e697469616c6960408201526c1e99551bdad95b88199a5c9cdd609a1b606082015260800190565b60208082526032908201527f456c617374696344414f3a204f6e6c79206465706c6f7965722063616e20696e60408201527134ba34b0b634bd32903a3432902a37b5b2b760711b606082015260800190565b60208082526039908201527f456c617374696344414f3a20506c6561736520736565642044414f207769746860408201527f2045544820746f20736574204554483a45475420726174696f00000000000000606082015260800190565b600060208252610f0a6020830184611866565b600060408252611da76040830185611866565b905060018060a01b03831660208301529392505050565b600060408252611dd16040830185611866565b90508260208301529392505050565b6101608101610f0d8284611916565b600060208252611e03602083018451611827565b60208301516102c06040840152611e1e6102e084018261183a565b90506040840151601f19848303016060850152611e3b828261183a565b91505060608401516080840152608084015160a084015260a084015160c084015260c084015160e084015260e084015161010081818601528086015191505061012081818601528086015191505061014081818601528086015191505061016081818601528086015191505061190e610180850182611916565b60405181810167ffffffffffffffff81118282101715611ed157fe5b604052919050565b600067ffffffffffffffff821115611eed57fe5b50601f01601f191660200190565b60005b83811015611f16578181015183820152602001611efe565b838111156119e35750506000910152565b6001600160a01b0381168114611f3c57600080fd5b5056fea2646970667358221220f060723535f8a28bd788874bb45eb8f63bc270a7b75bf938bfee9b37a76681e664736f6c63430007020033a264697066735822122085788a8f30cae47aaaed51ebdc5f2f72f309b89644b7200cf5cc50c75b7e012364736f6c63430007020033";
	var linkReferences$7 = {
	};
	var deployedLinkReferences$7 = {
	};
	var ElasticDAOFactoryContract = {
		_format: _format$7,
		contractName: contractName$7,
		sourceName: sourceName$7,
		abi: abi$7,
		bytecode: bytecode$7,
		deployedBytecode: deployedBytecode$7,
		linkReferences: linkReferences$7,
		deployedLinkReferences: deployedLinkReferences$7
	};

	class ElasticDAOFactory extends Base {
	  static contract(sdk, address) {
	    return sdk.contract({
	      abi: ElasticDAOFactoryContract.abi,
	      address
	    });
	  }

	  get address() {
	    return this.sdk.env.elasticDAO.factoryAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  async deployDAOAndToken(summoners, nameOfDAO, numberOfSummoners, nameOfToken, symbol, capitalDelta, elasticity, k, maxLambdaPurchase, overrides = {}) {
	    const payload = [summoners, nameOfDAO, numberOfSummoners, nameOfToken, symbol, this.toEthersBigNumber(capitalDelta, 18), this.toEthersBigNumber(elasticity, 18), this.toEthersBigNumber(k, 18), this.toEthersBigNumber(maxLambdaPurchase, 18)];
	    const factory = await this.contract;
	    const daoDeployedFilter = factory.filters.DAODeployed();
	    const daoDeployedFilterPromise = new Promise(async (resolve, reject) => {
	      let tx = {};

	      const handler = ({
	        transactionHash,
	        topics
	      }) => {
	        if (transactionHash === tx.hash) {
	          this.sdk.provider.off(daoDeployedFilter, handler);
	          resolve(`0x${topics[1].substring(26)}`);
	        }
	      };

	      this.sdk.provider.on(daoDeployedFilter, handler);
	      tx = await factory.deployDAOAndToken(...payload, this.sanitizeOverrides({ ...overrides,
	        value: this.sdk.env.fees.deploy
	      }));
	      await tx.wait(2);
	      reject();
	    });
	    return DAO.deserialize(this.sdk, await daoDeployedFilterPromise);
	  }

	  async deployedDAOAddresses() {
	    const factory = await this.contract();
	    const deployedDAOCount = await factory.deployedDAOCount();
	    const promises = upTo(deployedDAOCount.toNumber()).map(i => factory.deployedDAOAddresses(i));
	    return Promise.all(promises);
	  }

	}

	var _format$8 = "hh-sol-artifact-1";
	var contractName$8 = "ElasticModule";
	var sourceName$8 = "src/models/ElasticModule.sol";
	var abi$8 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_uuid",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "address[]",
							name: "summoners",
							type: "address[]"
						},
						{
							internalType: "bool",
							name: "summoned",
							type: "bool"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "numberOfSummoners",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct DAO.Instance",
					name: "_dao",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "address[]",
									name: "summoners",
									type: "address[]"
								},
								{
									internalType: "bool",
									name: "summoned",
									type: "bool"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "numberOfSummoners",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct DAO.Instance",
							name: "dao",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct ElasticModule.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_name",
					type: "string"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "address[]",
							name: "summoners",
							type: "address[]"
						},
						{
							internalType: "bool",
							name: "summoned",
							type: "bool"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "numberOfSummoners",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct DAO.Instance",
					name: "_dao",
					type: "tuple"
				}
			],
			name: "deserializeByName",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "address[]",
									name: "summoners",
									type: "address[]"
								},
								{
									internalType: "bool",
									name: "summoned",
									type: "bool"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "numberOfSummoners",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct DAO.Instance",
							name: "dao",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct ElasticModule.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_uuid",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "address[]",
							name: "summoners",
							type: "address[]"
						},
						{
							internalType: "bool",
							name: "summoned",
							type: "bool"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "numberOfSummoners",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct DAO.Instance",
					name: "_dao",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "uuid",
							type: "address"
						},
						{
							internalType: "string",
							name: "name",
							type: "string"
						},
						{
							components: [
								{
									internalType: "address",
									name: "uuid",
									type: "address"
								},
								{
									internalType: "address[]",
									name: "summoners",
									type: "address[]"
								},
								{
									internalType: "bool",
									name: "summoned",
									type: "bool"
								},
								{
									internalType: "string",
									name: "name",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "numberOfSummoners",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "daoAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "balanceMultipliersModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "daoModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "ecosystemModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "elasticModuleModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenHolderModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "tokenModelAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "configuratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "registratorAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "governanceTokenAddress",
											type: "address"
										}
									],
									internalType: "struct Ecosystem.Instance",
									name: "ecosystem",
									type: "tuple"
								}
							],
							internalType: "struct DAO.Instance",
							name: "dao",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "daoAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "balanceMultipliersModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "daoModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "ecosystemModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "elasticModuleModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenHolderModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "tokenModelAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "configuratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "registratorAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "governanceTokenAddress",
									type: "address"
								}
							],
							internalType: "struct Ecosystem.Instance",
							name: "ecosystem",
							type: "tuple"
						}
					],
					internalType: "struct ElasticModule.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$8 = "0x608060405234801561001057600080fd5b50610c94806100206000396000f3fe608060405234801561001057600080fd5b506004361061004b5760003560e01c80626a35dd146100505780632485d7dd1461006557806374184a351461008e578063bedcdb4a146100a1575b600080fd5b61006361005e36600461088c565b6100c1565b005b610078610073366004610835565b61017b565b6040516100859190610b3d565b60405180910390f35b61007861009c3660046107e9565b6101d3565b6100b46100af3660046107e9565b61022b565b6040516100859190610afb565b61010381604001516000015182602001516040516020016100e3929190610acf565b60405160208183030381529060405280519060200120826000015161023e565b604080820151518251915161013f9261011f9291602001610a7d565b60405160208183030381529060405280519060200120826020015161026c565b60408082015151825191516101789261015b9291602001610a97565b604051602081830303815290604052805190602001206001610290565b50565b6101836103ec565b81516040516101b59161019a918690602001610acf565b604051602081830303815290604052805190602001206102b0565b6001600160a01b031681526040810191909152602081019190915290565b6101db6103ec565b6001600160a01b038316808252604080830184905283519051610220926102059291602001610a7d565b604051602081830303815290604052805190602001206102ce565b602082015292915050565b600061023783836103a5565b9392505050565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000828152600460209081526040909120825161028b9284019061041e565b505050565b600091825260016020526040909120805460ff1916911515919091179055565b6000818152602081905260409020546001600160a01b03165b919050565b60608160001a60f81b6001600160f81b0319166103065760405162461bcd60e51b81526004016102fd90610b06565b60405180910390fd5b60008281526004602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156103995780601f1061036e57610100808354040283529160200191610399565b820191906000526020600020905b81548152906001019060200180831161037c57829003601f168201915b50505050509050919050565b60006102378260000151846040516020016103c1929190610a97565b6040516020818303038152906040528051906020012060009081526001602052604090205460ff1690565b60408051608081018252600081526060602082015290810161040c61049c565b81526020016104196104d9565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061045f57805160ff191683800117855561048c565b8280016001018555821561048c579182015b8281111561048c578251825591602001919060010190610471565b50610498929150610535565b5090565b6040518060c0016040528060006001600160a01b031681526020016060815260200160001515815260200160608152602001600081526020016104195b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b5b808211156104985760008155600101610536565b80356001600160a01b03811681146102c957600080fd5b600082601f830112610571578081fd5b813567ffffffffffffffff81111561058557fe5b6020808202610595828201610c3a565b838152935081840185830182870184018810156105b157600080fd5b600092505b848310156105db576105c78161054a565b8252600192909201919083019083016105b6565b505050505092915050565b803580151581146102c957600080fd5b600082601f830112610606578081fd5b813567ffffffffffffffff81111561061a57fe5b61062d601f8201601f1916602001610c3a565b915080825283602082850101111561064457600080fd5b8060208401602084013760009082016020015292915050565b6000610200828403121561066f578081fd5b61067960c0610c3a565b90506106848261054a565b8152602082013567ffffffffffffffff808211156106a157600080fd5b6106ad85838601610561565b60208401526106be604085016105e6565b604084015260608401359150808211156106d757600080fd5b506106e4848285016105f6565b606083015250608082013560808201526107018360a0840161070c565b60a082015292915050565b600061016080838503121561071f578182fd5b61072881610c3a565b9150506107348261054a565b81526107426020830161054a565b60208201526107536040830161054a565b60408201526107646060830161054a565b60608201526107756080830161054a565b608082015261078660a0830161054a565b60a082015261079760c0830161054a565b60c08201526107a860e0830161054a565b60e08201526101006107bb81840161054a565b908201526101206107cd83820161054a565b908201526101406107df83820161054a565b9082015292915050565b600080604083850312156107fb578182fd5b6108048361054a565b9150602083013567ffffffffffffffff81111561081f578182fd5b61082b8582860161065d565b9150509250929050565b60008060408385031215610847578182fd5b823567ffffffffffffffff8082111561085e578384fd5b61086a868387016105f6565b9350602085013591508082111561087f578283fd5b5061082b8582860161065d565b60006020828403121561089d578081fd5b813567ffffffffffffffff808211156108b4578283fd5b908301906101c082860312156108c8578283fd5b6040516080810181811083821117156108dd57fe5b6040526108e98361054a565b81526020830135828111156108fc578485fd5b610908878286016105f6565b60208301525060408301358281111561091f578485fd5b61092b8782860161065d565b60408301525061093e866060850161070c565b606082015295945050505050565b6001600160a01b03169052565b15159052565b60008151808452815b8181101561098457602081850181015186830182015201610968565b818111156109955782602083870101525b50601f01601f19169290920160200192915050565b6109b582825161094c565b60208101516109c7602084018261094c565b5060408101516109da604084018261094c565b5060608101516109ed606084018261094c565b506080810151610a00608084018261094c565b5060a0810151610a1360a084018261094c565b5060c0810151610a2660c084018261094c565b5060e0810151610a3960e084018261094c565b5061010080820151610a4d8285018261094c565b505061012080820151610a628285018261094c565b505061014080820151610a778285018261094c565b50505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039283168152911660208201526060604082018190526006908201526565786973747360d01b608082015260a00190565b6001600160a01b0383168152604060208201819052600090610af39083018461095f565b949350505050565b901515815260200190565b60208082526018908201527f456c617374696344414f3a205a65726f20416464726573730000000000000000604082015260600190565b6000602080835260018060a01b038085511682850152818501516101c06040860152610b6d6101e086018261095f565b6040870151868203601f19016060880152805184168252848101516102008684018190528151908401819052929350909161022084019186019087905b80821015610bcc57825187168452928701929187019160019190910190610baa565b50505060408201519450610be36040840186610959565b606082015194508281036060840152610bfc818661095f565b9450506080810151608083015260a0810151925050610c1e60a08201836109aa565b50506060840151610c3260808501826109aa565b509392505050565b60405181810167ffffffffffffffff81118282101715610c5657fe5b60405291905056fea2646970667358221220ad602776bb1a866490faad6eabebb443a81c5f560d5b2293969cb4945ab37dce64736f6c63430007020033";
	var deployedBytecode$8 = "0x608060405234801561001057600080fd5b506004361061004b5760003560e01c80626a35dd146100505780632485d7dd1461006557806374184a351461008e578063bedcdb4a146100a1575b600080fd5b61006361005e36600461088c565b6100c1565b005b610078610073366004610835565b61017b565b6040516100859190610b3d565b60405180910390f35b61007861009c3660046107e9565b6101d3565b6100b46100af3660046107e9565b61022b565b6040516100859190610afb565b61010381604001516000015182602001516040516020016100e3929190610acf565b60405160208183030381529060405280519060200120826000015161023e565b604080820151518251915161013f9261011f9291602001610a7d565b60405160208183030381529060405280519060200120826020015161026c565b60408082015151825191516101789261015b9291602001610a97565b604051602081830303815290604052805190602001206001610290565b50565b6101836103ec565b81516040516101b59161019a918690602001610acf565b604051602081830303815290604052805190602001206102b0565b6001600160a01b031681526040810191909152602081019190915290565b6101db6103ec565b6001600160a01b038316808252604080830184905283519051610220926102059291602001610a7d565b604051602081830303815290604052805190602001206102ce565b602082015292915050565b600061023783836103a5565b9392505050565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000828152600460209081526040909120825161028b9284019061041e565b505050565b600091825260016020526040909120805460ff1916911515919091179055565b6000818152602081905260409020546001600160a01b03165b919050565b60608160001a60f81b6001600160f81b0319166103065760405162461bcd60e51b81526004016102fd90610b06565b60405180910390fd5b60008281526004602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156103995780601f1061036e57610100808354040283529160200191610399565b820191906000526020600020905b81548152906001019060200180831161037c57829003601f168201915b50505050509050919050565b60006102378260000151846040516020016103c1929190610a97565b6040516020818303038152906040528051906020012060009081526001602052604090205460ff1690565b60408051608081018252600081526060602082015290810161040c61049c565b81526020016104196104d9565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061045f57805160ff191683800117855561048c565b8280016001018555821561048c579182015b8281111561048c578251825591602001919060010190610471565b50610498929150610535565b5090565b6040518060c0016040528060006001600160a01b031681526020016060815260200160001515815260200160608152602001600081526020016104195b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b5b808211156104985760008155600101610536565b80356001600160a01b03811681146102c957600080fd5b600082601f830112610571578081fd5b813567ffffffffffffffff81111561058557fe5b6020808202610595828201610c3a565b838152935081840185830182870184018810156105b157600080fd5b600092505b848310156105db576105c78161054a565b8252600192909201919083019083016105b6565b505050505092915050565b803580151581146102c957600080fd5b600082601f830112610606578081fd5b813567ffffffffffffffff81111561061a57fe5b61062d601f8201601f1916602001610c3a565b915080825283602082850101111561064457600080fd5b8060208401602084013760009082016020015292915050565b6000610200828403121561066f578081fd5b61067960c0610c3a565b90506106848261054a565b8152602082013567ffffffffffffffff808211156106a157600080fd5b6106ad85838601610561565b60208401526106be604085016105e6565b604084015260608401359150808211156106d757600080fd5b506106e4848285016105f6565b606083015250608082013560808201526107018360a0840161070c565b60a082015292915050565b600061016080838503121561071f578182fd5b61072881610c3a565b9150506107348261054a565b81526107426020830161054a565b60208201526107536040830161054a565b60408201526107646060830161054a565b60608201526107756080830161054a565b608082015261078660a0830161054a565b60a082015261079760c0830161054a565b60c08201526107a860e0830161054a565b60e08201526101006107bb81840161054a565b908201526101206107cd83820161054a565b908201526101406107df83820161054a565b9082015292915050565b600080604083850312156107fb578182fd5b6108048361054a565b9150602083013567ffffffffffffffff81111561081f578182fd5b61082b8582860161065d565b9150509250929050565b60008060408385031215610847578182fd5b823567ffffffffffffffff8082111561085e578384fd5b61086a868387016105f6565b9350602085013591508082111561087f578283fd5b5061082b8582860161065d565b60006020828403121561089d578081fd5b813567ffffffffffffffff808211156108b4578283fd5b908301906101c082860312156108c8578283fd5b6040516080810181811083821117156108dd57fe5b6040526108e98361054a565b81526020830135828111156108fc578485fd5b610908878286016105f6565b60208301525060408301358281111561091f578485fd5b61092b8782860161065d565b60408301525061093e866060850161070c565b606082015295945050505050565b6001600160a01b03169052565b15159052565b60008151808452815b8181101561098457602081850181015186830182015201610968565b818111156109955782602083870101525b50601f01601f19169290920160200192915050565b6109b582825161094c565b60208101516109c7602084018261094c565b5060408101516109da604084018261094c565b5060608101516109ed606084018261094c565b506080810151610a00608084018261094c565b5060a0810151610a1360a084018261094c565b5060c0810151610a2660c084018261094c565b5060e0810151610a3960e084018261094c565b5061010080820151610a4d8285018261094c565b505061012080820151610a628285018261094c565b505061014080820151610a778285018261094c565b50505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039283168152911660208201526060604082018190526006908201526565786973747360d01b608082015260a00190565b6001600160a01b0383168152604060208201819052600090610af39083018461095f565b949350505050565b901515815260200190565b60208082526018908201527f456c617374696344414f3a205a65726f20416464726573730000000000000000604082015260600190565b6000602080835260018060a01b038085511682850152818501516101c06040860152610b6d6101e086018261095f565b6040870151868203601f19016060880152805184168252848101516102008684018190528151908401819052929350909161022084019186019087905b80821015610bcc57825187168452928701929187019160019190910190610baa565b50505060408201519450610be36040840186610959565b606082015194508281036060840152610bfc818661095f565b9450506080810151608083015260a0810151925050610c1e60a08201836109aa565b50506060840151610c3260808501826109aa565b509392505050565b60405181810167ffffffffffffffff81118282101715610c5657fe5b60405291905056fea2646970667358221220ad602776bb1a866490faad6eabebb443a81c5f560d5b2293969cb4945ab37dce64736f6c63430007020033";
	var linkReferences$8 = {
	};
	var deployedLinkReferences$8 = {
	};
	var ElasticModuleContract = {
		_format: _format$8,
		contractName: contractName$8,
		sourceName: sourceName$8,
		abi: abi$8,
		bytecode: bytecode$8,
		deployedBytecode: deployedBytecode$8,
		linkReferences: linkReferences$8,
		deployedLinkReferences: deployedLinkReferences$8
	};

	const cache$6 = {};
	const prefix$8 = '@elastic-dao/sdk - ElasticModule';
	const isElasticModule = thing => thing && typeof thing === 'object' && thing instanceof ElasticModule;
	const validateIsElasticModule = thing => {
	  const message = 'not an ElasticModule';
	  validate$1(isElasticModule(thing), {
	    message,
	    prefix: prefix$8
	  });
	};
	class ElasticModule extends ElasticModel {
	  constructor(sdk, {
	    dao,
	    ecosystem,
	    name,
	    uuid
	  }) {
	    super(sdk);
	    this.id = `${dao.uuid}|${uuid}`.toLowerCase();
	    cache$6[this.id] = {
	      dao,
	      ecosystem,
	      name,
	      uuid
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$8
	    });
	    return sdk.contract({
	      abi: ElasticModuleContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, uuid, dao) {
	    validateIsAddress$1(uuid, {
	      prefix: prefix$8
	    });
	    validateIsDAO(dao);
	    const {
	      ecosystem
	    } = dao;
	    const elasticModuleModel = await this.contract(sdk, ecosystem.elasticModuleModelAddress);
	    const {
	      name
	    } = await elasticModuleModel.deserialize(uuid, ecosystem.toObject(false));
	    return new ElasticModule(sdk, {
	      dao,
	      ecosystem,
	      name,
	      uuid
	    });
	  }

	  static async deserializeByName(sdk, name, dao) {
	    validateIsDAO(dao);
	    const {
	      ecosystem
	    } = dao;
	    const elasticModuleModel = await this.contract(sdk, ecosystem.elasticModuleModelAddress);
	    const {
	      uuid
	    } = await elasticModuleModel.deserializeByName(name, { ...dao.toObject(false),
	      ecosystem: ecosystem.toObject(false)
	    });
	    return new ElasticModule(sdk, {
	      dao,
	      ecosystem,
	      name,
	      uuid
	    });
	  } // Getters


	  get address() {
	    return this.ecosystem.elasticModuleModelAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get dao() {
	    return cache$6[this.id].summoned;
	  }

	  get ecosystem() {
	    return cache$6[this.id].ecosystem;
	  }

	  get name() {
	    return cache$6[this.id].name;
	  }

	  get uuid() {
	    return cache$6[this.id].uuid;
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.uuid, this.dao);
	  }

	  toObject(includeNested = true) {
	    const {
	      dao,
	      ecosystem,
	      id
	    } = this;
	    const obj = { ...cache$6[id],
	      id,
	      dao: dao.toObject(false),
	      ecosystem: ecosystem.toObject(false)
	    };

	    if (!includeNested) {
	      delete obj.dao;
	      delete obj.ecosystem;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$9 = "hh-sol-artifact-1";
	var contractName$9 = "InformationalVoteManager";
	var sourceName$9 = "src/modules/InformationalVote/Manager.sol";
	var abi$9 = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_ballotModelAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_settingsModelAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_voteModelAddress",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "CreateVote",
			type: "event"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				},
				{
					internalType: "address[]",
					name: "_addressesToPenalize",
					type: "address[]"
				}
			],
			name: "applyPenalty",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "ballotModelAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_yna",
					type: "uint256"
				}
			],
			name: "castBallot",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "string",
					name: "_proposal",
					type: "string"
				},
				{
					internalType: "uint256",
					name: "_endOnBlock",
					type: "uint256"
				}
			],
			name: "createVote",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getSettings",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct InformationalVoteSettings.Instance",
					name: "",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_votingTokenAddress",
					type: "address"
				},
				{
					internalType: "bool",
					name: "_hasPenalty",
					type: "bool"
				},
				{
					internalType: "uint256[10]",
					name: "_settings",
					type: "uint256[10]"
				}
			],
			name: "initialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "initialized",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "settingsModelAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "voteModelAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		}
	];
	var bytecode$9 = "0x60806040523480156200001157600080fd5b506040516200219f3803806200219f83398101604081905262000034916200009d565b600080546001600160a01b039485166001600160a01b0319918216179091556002805460018054958716959093169490941790915592166001600160a81b0319909116179055620000e6565b80516001600160a01b03811681146200009857600080fd5b919050565b600080600060608486031215620000b2578283fd5b620000bd8462000080565b9250620000cd6020850162000080565b9150620000dd6040850162000080565b90509250925092565b6120a980620000f66000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063478eadbe11610066578063478eadbe146100fe578063743812131461011357806385b4bb531461011b578063d6055ae814610130578063e1faaae81461014357610093565b8063083964b1146100985780630c09135b146100ad578063158ef93e146100c05780634541c853146100de575b600080fd5b6100ab6100a63660046117f7565b61014b565b005b6100ab6100bb366004611743565b610615565b6100c861099a565b6040516100d59190611ab1565b60405180910390f35b6100f16100ec366004611505565b6109aa565b6040516100d59190611fb9565b610106610c95565b6040516100d59190611a49565b610106610ca4565b610123610cb3565b6040516100d59190611f97565b6100ab61013e36600461143f565b610cc8565b610106610e27565b610153611169565b61015b610e36565b90506101678382610ebf565b61018c5760405162461bcd60e51b815260040161018390611ef6565b60405180910390fd5b6101946111ec565b61019e8483610f4b565b60a0810151909150156101c35760405162461bcd60e51b815260040161018390611acf565b80608001516101e45760405162461bcd60e51b815260040161018390611c61565b6101ed81610fd9565b6102095760405162461bcd60e51b815260040161018390611c61565b600383106102295760405162461bcd60e51b815260040161018390611d60565b6020810151604051633e174aaf60e01b81526000906001600160a01b03831690633e174aaf9061025d903390600401611a49565b60206040518083038186803b15801561027557600080fd5b505afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad919061172b565b61028084015160405163046deee960e01b81529192506000916001600160a01b0385169163046deee9916102e5913391600401611a5d565b60206040518083038186803b1580156102fd57600080fd5b505afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610335919061172b565b905081811015610343578091505b8184610160015110156103595783610160015191505b856103785761036d846102a0015183611062565b6102a08501526103af565b856001141561039b57610390846101e0015183611062565b6101e08501526103af565b6103a98460e0015183611062565b60e08501525b60006103d26103c8866102a00151876101e00151611062565b8660e00151611062565b90506000846001600160a01b03166378b61f226040518163ffffffff1660e01b815260040160206040518083038186803b15801561040f57600080fd5b505afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610447919061172b565b9050600061045a82886102200151611087565b905080831061046b57600160608801525b600061047c83896101000151611087565b905080841061048d57600160a08901525b6104956112b9565b338152608081018a905260a081018990526040808201889052606082018c9052600054905163ccaf715d60e01b81526001600160a01b039091169063ccaf715d906104e4908490600401611f2d565b600060405180830381600087803b1580156104fe57600080fd5b505af1158015610512573d6000803e3d6000fd5b50506002546040516368f0460f60e01b81526001600160a01b0390911692506368f0460f9150610546908c90600401611fa6565b600060405180830381600087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b50505050876001600160a01b031663528c198a336105978a8d6102600151611087565b6040518363ffffffff1660e01b81526004016105b4929190611a5d565b602060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060691906114e9565b50505050505050505050505050565b61061d611169565b610625610e36565b90506106318382610ebf565b61064d5760405162461bcd60e51b815260040161018390611ef6565b6106556111ec565b61065f8483610f4b565b60a0810151909150156106845760405162461bcd60e51b815260040161018390611dcd565b6080810151156106a65760405162461bcd60e51b815260040161018390611eab565b6060810151156106c85760405162461bcd60e51b815260040161018390611bb8565b80604001516106e95760405162461bcd60e51b815260040161018390611d1b565b6000805460208301516001600160a01b03909116915b855181101561099157826001600160a01b031663e2ff8d6687838151811061072357fe5b602002602001015187876040518463ffffffff1660e01b815260040161074b93929190611a76565b60206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b91906114e9565b61097f576107a76112b9565b8682815181106107b357fe5b6020908102919091018101516001600160a01b0390811683526080830188905260a0830187905260019183019190915287516000916108819190861690633e174aaf908b908790811061080257fe5b60200260200101516040518263ffffffff1660e01b81526004016108269190611a49565b60206040518083038186803b15801561083e57600080fd5b505afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610876919061172b565b876102000151611087565b60408084018290525163ccaf715d60e01b81529091506001600160a01b0386169063ccaf715d906108b6908590600401611f2d565b600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b50505050836001600160a01b031663ee7a7c0489858151811061090357fe5b6020026020010151836040518363ffffffff1660e01b8152600401610929929190611a5d565b602060405180830381600087803b15801561094357600080fd5b505af1158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b91906114e9565b5050505b61098a816001611062565b90506106ff565b50505050505050565b600254600160a01b900460ff1681565b600254600090600160a01b900460ff166109d65760405162461bcd60e51b815260040161018390611b2c565b6109de611169565b6109e6610e36565b6020810151610140820151604051633e174aaf60e01b815292935090916001600160a01b03831690633e174aaf90610a22903390600401611a49565b60206040518083038186803b158015610a3a57600080fd5b505afa158015610a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a72919061172b565b1015610a905760405162461bcd60e51b815260040161018390611c15565b8160e00151610a9f85436110bc565b1015610abd5760405162461bcd60e51b815260040161018390611e5d565b6002546001600160a01b0316610ad16111ec565b6102c08101849052338152604080850151151581830152600060608301819052600160808085019190915260a080850183905260c08086018c905260e08601849052610100860184905261012086018b9052918801516101408601528701516101608086019190915290870151610180808601919091526101e08501839052908701516102008501528601516102208401526101a0860151610260840152436102808401526020808701516001600160a01b03908116918501919091526102a084019190915290516368f0460f60e01b8152908316906368f0460f90610bbb908490600401611fa6565b600060405180830381600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505060015460405163e5910ae760e01b81526001600160a01b03909116925063e5910ae79150610c1d903090600401611a49565b600060405180830381600087803b158015610c3757600080fd5b505af1158015610c4b573d6000803e3d6000fd5b505050507f460e77e3c8455201c4722742a8a654c959331ac344ab1b2ecefdb2b500f129c8816101400151604051610c839190611fb9565b60405180910390a15050505092915050565b6001546001600160a01b031681565b6000546001600160a01b031681565b610cbb611169565b610cc3610e36565b905090565b600254600160a01b900460ff1615610cf25760405162461bcd60e51b815260040161018390611cbe565b6001546001600160a01b0316610d06611169565b3081526001600160a01b038516602082015283151560408201528260006020020151606082015260006080820152826001602002015160a0820152826002602002015160c0820152826003602002015160e08201528260046020020151610100820152826005602002015161012082015282600660200201516101408201528260076020020151610160820152826008602002015161018082015282600960200201516101a082015260405163e416649960e01b81526001600160a01b0383169063e416649990610ddb908490600401611f97565b600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b50506002805460ff60a01b1916600160a01b17905550505050505050565b6002546001600160a01b031681565b610e3e611169565b60015460405163332a4d0960e01b81526001600160a01b039091169063332a4d0990610e6e903090600401611a49565b6101c06040518083038186803b158015610e8757600080fd5b505afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190611581565b600254604051634a52ae5960e01b81526000916001600160a01b031690634a52ae5990610ef29086908690600401611fc2565b60206040518083038186803b158015610f0a57600080fd5b505afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4291906114e9565b90505b92915050565b610f536111ec565b600254604051631d97355360e21b81526001600160a01b039091169063765cd54c90610f859086908690600401611fc2565b60006040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f42919081019061159d565b6000438261012001511161105957600060808301526002546040516368f0460f60e01b81526001600160a01b03909116906368f0460f9061101e908590600401611fa6565b600060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b505050506000905061105d565b5060015b919050565b600082820183811015610f425760405162461bcd60e51b815260040161018390611b81565b6000670de0b6b3a76400006110ad61109f85856110fe565b6706f05b59d3b20000611062565b816110b457fe5b049392505050565b6000610f4283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611138565b60008261110d57506000610f45565b8282028284828161111a57fe5b0414610f425760405162461bcd60e51b815260040161018390611e1c565b6000818484111561115c5760405162461bcd60e51b81526004016101839190611abc565b50508183035b9392505050565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806102e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600015158152602001600015158152602001600015158152602001600015158152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016112b4611169565b905290565b6040518060c0016040528060006001600160a01b0316815260200160001515815260200160008152602001600081526020016112f3611169565b81526020016112b46111ec565b803561105d8161204d565b805161105d8161204d565b805161105d81612065565b600082601f830112611331578081fd5b815161134461133f82611ffb565b611fd7565b915080825283602082850101111561135b57600080fd5b61136c81602084016020860161201d565b5092915050565b60006101c0808385031215611386578182fd5b61138f81611fd7565b91505061139b8261130b565b81526113a96020830161130b565b60208201526113ba60408301611316565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101608083015181830152506101808083015181830152506101a080830151818301525092915050565b6000806000610180808587031215611455578384fd5b84356114608161204d565b935060208581013561147181612065565b9350605f86018713611481578283fd5b604051610140810181811067ffffffffffffffff8211171561149f57fe5b8060405250806040880189858a0111156114b7578586fd5b8594505b600a8510156114da5780358252600194909401939083019083016114bb565b50508093505050509250925092565b6000602082840312156114fa578081fd5b8151610f4281612065565b60008060408385031215611517578182fd5b823567ffffffffffffffff81111561152d578283fd5b8301601f8101851361153d578283fd5b803561154b61133f82611ffb565b81815286602083850101111561155f578485fd5b8160208401602083013790810160209081019490945295939092013593505050565b60006101c08284031215611593578081fd5b610f428383611373565b6000602082840312156115ae578081fd5b815167ffffffffffffffff808211156115c5578283fd5b9083019061048082860312156115d9578283fd5b6115e46102e0611fd7565b6115ed8361130b565b81526115fb6020840161130b565b602082015261160c60408401611316565b604082015261161d60608401611316565b606082015261162e60808401611316565b608082015261163f60a08401611316565b60a082015260c083015182811115611655578485fd5b61166187828601611321565b60c08301525060e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260808401519082015261028080840151908201526102a080840151908201526102c0915061171c86838501611373565b91810191909152949350505050565b60006020828403121561173c578081fd5b5051919050565b60008060408385031215611755578182fd5b8235915060208084013567ffffffffffffffff80821115611774578384fd5b818601915086601f830112611787578384fd5b81358181111561179357fe5b83810291506117a3848301611fd7565b8181528481019084860184860187018b10156117bd578788fd5b8795505b838610156117e6576117d281611300565b8352600195909501949186019186016117c1565b508096505050505050509250929050565b60008060408385031215611809578182fd5b50508035926020909101359150565b6001600160a01b03169052565b15159052565b6000815180845261184381602086016020860161201d565b601f01601f19169290920160200192915050565b611862828251611818565b60208101516118746020840182611818565b5060408101516118876040840182611825565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b600061048061190d848451611818565b602083015161191f6020860182611818565b5060408301516119326040860182611825565b5060608301516119456060860182611825565b5060808301516119586080860182611825565b5060a083015161196b60a0860182611825565b5060c08301518160c08601526119838286018261182b565b60e08581015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601519087015261018080860151908701526101a080860151908701526101c080860151908701526101e08086015190870152610200808601519087015261022080860151908701526102408086015190870152610260808601519087015261028080860151908701526102a080860151908701526102c0808601519193509150611a3f82870182611857565b5090949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03841681526000610200611a946020840186611857565b806101e0840152611aa7818401856118fd565b9695505050505050565b901515815260200190565b600060208252610f42602083018461182b565b60208082526038908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520686160408201527f7320616c7265616479206265656e20617070726f7665642e0000000000000000606082015260800190565b60208082526035908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f7465204d616040820152741b9859d95c881b9bdd081a5b9a5d1a585b1a5e9959605a1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603b908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a65206120766f60408201527f746520746861742068617320726561636865642071756f72756d2e0000000000606082015260800190565b6020808252602c908201527f456c617374696344414f3a204e6f7420656e6f7567682073686172657320746f60408201526b2063726561746520766f746560a01b606082015260800190565b60208082526039908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520697360408201527f206e6f7420616374697665206f722068617320656e6465642e00000000000000606082015260800190565b6020808252603b908201527f456c617374696344414f3a20496e666f726d6174696f6e616c20566f7465204d60408201527f616e6167657220616c726561647920696e697469616c697a65642e0000000000606082015260800190565b60208082526025908201527f456c617374696344414f3a205468697320766f746520686173206e6f2070656e60408201526430b63a3c9760d91b606082015260800190565b60208082526047908201527f456c617374696344414f3a20496e76616c6964205f796e612076616c75652e2060408201527f557365203020666f72207965732c203120666f72206e6f2c203220666f7220616060820152663139ba30b4b71760c91b608082015260a00190565b6020808252602f908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a65206120766f60408201526e3a32903a3430ba103830b9b9b2b21760891b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520706560408201526d1c9a5bd9081d1bdbc81cda1bdc9d60921b606082015260800190565b6020808252602b908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a6520616e206160408201526a31ba34bb32903b37ba329760a91b606082015260800190565b6020808252601c908201527f456c617374696344414f3a20496e76616c696420766f74652069642e00000000604082015260600190565b60006020825260018060a01b03835116602083015260208301511515604083015260408301516060830152606083015160808301526080830151611f7460a0840182611857565b5060a083015161026083810152611f8f6102808401826118fd565b949350505050565b6101c08101610f458284611857565b600060208252610f4260208301846118fd565b90815260200190565b8281526101e081016111626020830184611857565b60405181810167ffffffffffffffff81118282101715611ff357fe5b604052919050565b600067ffffffffffffffff82111561200f57fe5b50601f01601f191660200190565b60005b83811015612038578181015183820152602001612020565b83811115612047576000848401525b50505050565b6001600160a01b038116811461206257600080fd5b50565b801515811461206257600080fdfea2646970667358221220c0f44117f511920d15c9c9e32d5e564f6b72a18e3b9cf7bec464756ffa116a6264736f6c63430007020033";
	var deployedBytecode$9 = "";
	var linkReferences$9 = {
	};
	var deployedLinkReferences$9 = {
	};
	var InformationalVoteManagerContract = {
		_format: _format$9,
		contractName: contractName$9,
		sourceName: sourceName$9,
		abi: abi$9,
		bytecode: bytecode$9,
		deployedBytecode: deployedBytecode$9,
		linkReferences: linkReferences$9,
		deployedLinkReferences: deployedLinkReferences$9
	};

	var _format$a = "hh-sol-artifact-1";
	var contractName$a = "InformationalVoteSettings";
	var sourceName$a = "src/modules/InformationalVote/models/Settings.sol";
	var abi$a = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_managerAddress",
					type: "address"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct InformationalVoteSettings.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_managerAddress",
					type: "address"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_managerAddress",
					type: "address"
				}
			],
			name: "incrementCounter",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct InformationalVoteSettings.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$a = "0x608060405234801561001057600080fd5b50610cee806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063332a4d0914610051578063e41664991461007a578063e5910ae71461008f578063f6a3d24e146100a2575b600080fd5b61006461005f366004610780565b6100c2565b6040516100719190610bda565b60405180910390f35b61008d61008836600461079a565b61029f565b005b61008d61009d366004610780565b61058b565b6100b56100b0366004610780565b6105d8565b6040516100719190610b98565b6100ca6106d6565b6001600160a01b03821681526100df826105e9565b1561029a57610113826040516020016100f89190610add565b604051602081830303815290604052805190602001206105ff565b606082015260405161012d906100f89084906020016108d9565b608082015260405161016290610147908490602001610aa7565b60405160208183030381529060405280519060200120610611565b151560408083019190915251610180906100f8908490602001610b4f565b60a082015260405161019a906100f8908490602001610a68565b60c08201526040516101b4906100f89084906020016109ae565b60e08201526040516101ce906100f890849060200161093e565b6101408201526040516101e9906100f8908490602001610b11565b610100820152604051610204906100f8908490602001610a2b565b61012082015260405161021f906100f890849060200161097b565b61016082015260405161023a906100f89084906020016108a7565b610180820152604051610255906100f890849060200161090c565b6101a082015260405161028b906102709084906020016109ed565b60405160208183030381529060405280519060200120610626565b6001600160a01b031660208201525b919050565b80516040516102d4916102b491602001610aa7565b604051602081830303815290604052805190602001208260400151610641565b8051604051610309916102e991602001610add565b604051602081830303815290604052805190602001208260600151610661565b805160405161033e9161031e916020016108d9565b604051602081830303815290604052805190602001208260800151610661565b80516040516103739161035391602001610b4f565b604051602081830303815290604052805190602001208260a00151610661565b80516040516103a89161038891602001610a68565b604051602081830303815290604052805190602001208260c00151610661565b80516040516103dd916103bd916020016109ae565b604051602081830303815290604052805190602001208260e00151610661565b8051604051610413916103f291602001610b11565b60405160208183030381529060405280519060200120826101000151610661565b80516040516104499161042891602001610a2b565b60405160208183030381529060405280519060200120826101200151610661565b805160405161047f9161045e9160200161093e565b60405160208183030381529060405280519060200120826101400151610661565b80516040516104b5916104949160200161097b565b60405160208183030381529060405280519060200120826101600151610661565b80516040516104eb916104ca916020016108a7565b60405160208183030381529060405280519060200120826101800151610661565b8051604051610521916105009160200161090c565b60405160208183030381529060405280519060200120826101a00151610661565b805160405161055691610536916020016109ed565b604051602081830303815290604052805190602001208260200151610673565b80516040516105889161056b91602001610875565b604051602081830303815290604052805190602001206001610641565b50565b6105888160405160200161059f91906108d9565b604051602081830303815290604052805190602001206105d36105cc846040516020016100f891906108d9565b60016106a1565b610661565b60006105e3826105e9565b92915050565b60006105e3826040516020016101479190610875565b60009081526005602052604090205490565b60009081526001602052604090205460ff1690565b6000908152602081905260409020546001600160a01b031690565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526005602052604090912055565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000828201838110156106cf5760405162461bcd60e51b81526004016106c690610ba3565b60405180910390fd5b9392505050565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461029a57600080fd5b8035801515811461029a57600080fd5b600060208284031215610791578081fd5b6106cf82610759565b60006101c08083850312156107ad578182fd5b6107b681610c94565b90506107c183610759565b81526107cf60208401610759565b60208201526107e060408401610770565b6040820152606083810135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a0928301359281019290925250919050565b6001600160a01b03169052565b15159052565b6001600160a01b039190911681526040602082018190526006908201526565786973747360d01b606082015260800190565b6001600160a01b039190911681526040602082018190526006908201526571756f72756d60d01b606082015260800190565b6001600160a01b039190911681526040602082018190526007908201526631b7bab73a32b960c91b606082015260800190565b6001600160a01b03919091168152604060208201819052600690820152651c995dd85c9960d21b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706d696e536861726573546f43726561746560781b606082015260800190565b6001600160a01b039190911681526040602082018190526007908201526670656e616c747960c81b606082015260800190565b6001600160a01b03919091168152604060208201819052601390820152726d696e4475726174696f6e496e426c6f636b7360681b606082015260800190565b6001600160a01b0391909116815260406020820181905260129082015271766f74696e67546f6b656e4164647265737360701b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706d696e526577617264496e53686172657360781b606082015260800190565b6001600160a01b03919091168152604060208201819052601390820152726d696e426c6f636b73466f7250656e616c747960681b606082015260800190565b6001600160a01b03919091168152604060208201819052600a908201526968617350656e616c747960b01b606082015260800190565b6001600160a01b0391909116815260406020820181905260089082015267185c1c1c9bdd985b60c21b606082015260800190565b6001600160a01b03919091168152604060208201819052601290820152716d696e50656e616c7479496e53686172657360701b606082015260800190565b6001600160a01b039190911681526040602082018190526017908201527f6d6178536861726573506572546f6b656e486f6c646572000000000000000000606082015260800190565b901515815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60006101c082019050610bee828451610862565b6020830151610c006020840182610862565b506040830151610c13604084018261086f565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015181840152506101408084015181840152506101608084015181840152506101808084015181840152506101a080840151818401525092915050565b60405181810167ffffffffffffffff81118282101715610cb057fe5b60405291905056fea26469706673582212206440a4ce8edb2002265fc7998aa43321eb855af88016b0a967d481d0f0da5b9864736f6c63430007020033";
	var deployedBytecode$a = "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063332a4d0914610051578063e41664991461007a578063e5910ae71461008f578063f6a3d24e146100a2575b600080fd5b61006461005f366004610780565b6100c2565b6040516100719190610bda565b60405180910390f35b61008d61008836600461079a565b61029f565b005b61008d61009d366004610780565b61058b565b6100b56100b0366004610780565b6105d8565b6040516100719190610b98565b6100ca6106d6565b6001600160a01b03821681526100df826105e9565b1561029a57610113826040516020016100f89190610add565b604051602081830303815290604052805190602001206105ff565b606082015260405161012d906100f89084906020016108d9565b608082015260405161016290610147908490602001610aa7565b60405160208183030381529060405280519060200120610611565b151560408083019190915251610180906100f8908490602001610b4f565b60a082015260405161019a906100f8908490602001610a68565b60c08201526040516101b4906100f89084906020016109ae565b60e08201526040516101ce906100f890849060200161093e565b6101408201526040516101e9906100f8908490602001610b11565b610100820152604051610204906100f8908490602001610a2b565b61012082015260405161021f906100f890849060200161097b565b61016082015260405161023a906100f89084906020016108a7565b610180820152604051610255906100f890849060200161090c565b6101a082015260405161028b906102709084906020016109ed565b60405160208183030381529060405280519060200120610626565b6001600160a01b031660208201525b919050565b80516040516102d4916102b491602001610aa7565b604051602081830303815290604052805190602001208260400151610641565b8051604051610309916102e991602001610add565b604051602081830303815290604052805190602001208260600151610661565b805160405161033e9161031e916020016108d9565b604051602081830303815290604052805190602001208260800151610661565b80516040516103739161035391602001610b4f565b604051602081830303815290604052805190602001208260a00151610661565b80516040516103a89161038891602001610a68565b604051602081830303815290604052805190602001208260c00151610661565b80516040516103dd916103bd916020016109ae565b604051602081830303815290604052805190602001208260e00151610661565b8051604051610413916103f291602001610b11565b60405160208183030381529060405280519060200120826101000151610661565b80516040516104499161042891602001610a2b565b60405160208183030381529060405280519060200120826101200151610661565b805160405161047f9161045e9160200161093e565b60405160208183030381529060405280519060200120826101400151610661565b80516040516104b5916104949160200161097b565b60405160208183030381529060405280519060200120826101600151610661565b80516040516104eb916104ca916020016108a7565b60405160208183030381529060405280519060200120826101800151610661565b8051604051610521916105009160200161090c565b60405160208183030381529060405280519060200120826101a00151610661565b805160405161055691610536916020016109ed565b604051602081830303815290604052805190602001208260200151610673565b80516040516105889161056b91602001610875565b604051602081830303815290604052805190602001206001610641565b50565b6105888160405160200161059f91906108d9565b604051602081830303815290604052805190602001206105d36105cc846040516020016100f891906108d9565b60016106a1565b610661565b60006105e3826105e9565b92915050565b60006105e3826040516020016101479190610875565b60009081526005602052604090205490565b60009081526001602052604090205460ff1690565b6000908152602081905260409020546001600160a01b031690565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526005602052604090912055565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000828201838110156106cf5760405162461bcd60e51b81526004016106c690610ba3565b60405180910390fd5b9392505050565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461029a57600080fd5b8035801515811461029a57600080fd5b600060208284031215610791578081fd5b6106cf82610759565b60006101c08083850312156107ad578182fd5b6107b681610c94565b90506107c183610759565b81526107cf60208401610759565b60208201526107e060408401610770565b6040820152606083810135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a0928301359281019290925250919050565b6001600160a01b03169052565b15159052565b6001600160a01b039190911681526040602082018190526006908201526565786973747360d01b606082015260800190565b6001600160a01b039190911681526040602082018190526006908201526571756f72756d60d01b606082015260800190565b6001600160a01b039190911681526040602082018190526007908201526631b7bab73a32b960c91b606082015260800190565b6001600160a01b03919091168152604060208201819052600690820152651c995dd85c9960d21b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706d696e536861726573546f43726561746560781b606082015260800190565b6001600160a01b039190911681526040602082018190526007908201526670656e616c747960c81b606082015260800190565b6001600160a01b03919091168152604060208201819052601390820152726d696e4475726174696f6e496e426c6f636b7360681b606082015260800190565b6001600160a01b0391909116815260406020820181905260129082015271766f74696e67546f6b656e4164647265737360701b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706d696e526577617264496e53686172657360781b606082015260800190565b6001600160a01b03919091168152604060208201819052601390820152726d696e426c6f636b73466f7250656e616c747960681b606082015260800190565b6001600160a01b03919091168152604060208201819052600a908201526968617350656e616c747960b01b606082015260800190565b6001600160a01b0391909116815260406020820181905260089082015267185c1c1c9bdd985b60c21b606082015260800190565b6001600160a01b03919091168152604060208201819052601290820152716d696e50656e616c7479496e53686172657360701b606082015260800190565b6001600160a01b039190911681526040602082018190526017908201527f6d6178536861726573506572546f6b656e486f6c646572000000000000000000606082015260800190565b901515815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60006101c082019050610bee828451610862565b6020830151610c006020840182610862565b506040830151610c13604084018261086f565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015181840152506101408084015181840152506101608084015181840152506101808084015181840152506101a080840151818401525092915050565b60405181810167ffffffffffffffff81118282101715610cb057fe5b60405291905056fea26469706673582212206440a4ce8edb2002265fc7998aa43321eb855af88016b0a967d481d0f0da5b9864736f6c63430007020033";
	var linkReferences$a = {
	};
	var deployedLinkReferences$a = {
	};
	var InformationalVoteSettingsContract = {
		_format: _format$a,
		contractName: contractName$a,
		sourceName: sourceName$a,
		abi: abi$a,
		bytecode: bytecode$a,
		deployedBytecode: deployedBytecode$a,
		linkReferences: linkReferences$a,
		deployedLinkReferences: deployedLinkReferences$a
	};

	const cache$7 = {};
	const prefix$9 = '@elastic-dao/sdk - InformationalVoteSettings';
	const isInformationalVoteSettings = thing => thing && typeof thing === 'object' && thing instanceof InformationalVoteSettings;
	const validateIsInformationalVoteSettings = thing => {
	  const message = 'not an InformationalVoteSettings';
	  validate$1(isInformationalVoteSettings(thing), {
	    message,
	    prefix: prefix$9
	  });
	};
	class InformationalVoteSettings extends ElasticModel {
	  constructor({
	    approval,
	    counter,
	    hasPenalty,
	    managerAddress,
	    maxSharesPerTokenHolder,
	    minBlocksForPenalty,
	    minDurationInBlocks,
	    minPenaltyInShares,
	    minRewardInShares,
	    minSharesToCreate,
	    penalty,
	    quorum,
	    reward,
	    settingsModelAddress,
	    votingTokenAddress
	  }) {
	    super();
	    this.id = managerAddress.toLowerCase();
	    cache$7[this.id] = {
	      approval,
	      counter,
	      hasPenalty,
	      managerAddress,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minDurationInBlocks,
	      minPenaltyInShares,
	      minRewardInShares,
	      minSharesToCreate,
	      penalty,
	      quorum,
	      reward,
	      settingsModelAddress,
	      votingTokenAddress
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$9
	    });
	    return sdk.contract({
	      abi: InformationalVoteSettingsContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, managerAddress) {
	    validateIsAddress$1(managerAddress, {
	      prefix: prefix$9
	    });
	    const manager = this.managerContract(sdk, managerAddress);
	    const settingsModelAddress = await manager.settingsModelAddress();
	    const informationalVoteSettingsModel = this.contract(sdk, settingsModelAddress);
	    const {
	      approval,
	      counter,
	      hasPenalty,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minDurationInBlocks,
	      minPenaltyInShares,
	      minRewardInShares,
	      minSharesToCreate,
	      penalty,
	      quorum,
	      reward,
	      votingTokenAddress
	    } = await informationalVoteSettingsModel.deserialize(managerAddress);
	    return new InformationalVoteSettings({
	      approval,
	      counter,
	      hasPenalty,
	      managerAddress,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minDurationInBlocks,
	      minPenaltyInShares,
	      minRewardInShares,
	      minSharesToCreate,
	      penalty,
	      quorum,
	      reward,
	      settingsModelAddress,
	      votingTokenAddress
	    });
	  }

	  static managerContract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$9
	    });
	    return sdk.contract({
	      abi: InformationalVoteManagerContract.abi,
	      address
	    });
	  } // Getters


	  get address() {
	    return cache$7[this.id].settingsModelAddress;
	  }

	  get approval() {
	    return this.toBigNumber(cache$7[this.id].approval, 18);
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get counter() {
	    return this.toNumber(cache$7[this.id].counter);
	  }

	  get hasPenalty() {
	    return cache$7[this.id].hasPenalty;
	  }

	  get manager() {
	    return this.constructor.managerContract(this.sdk, this.managerAddress);
	  }

	  get managerAddress() {
	    return cache$7[this.id].managerAddress;
	  }

	  get maxSharesPerTokenHolder() {
	    return this.toBigNumber(cache$7[this.id].maxSharesPerTokenHolder, 18);
	  }

	  get minBlocksForPenalty() {
	    return this.toNumber(cache$7[this.id].minBlocksForPenalty);
	  }

	  get minDurationInBlocks() {
	    return this.toNumber(cache$7[this.id].minDurationInBlocks);
	  }

	  get minPenaltyInShares() {
	    return this.toBigNumber(cache$7[this.id].minPenaltyInShares, 18);
	  }

	  get minRewardInShares() {
	    return this.toBigNumber(cache$7[this.id].minRewardInShares, 18);
	  }

	  get minSharesToCreate() {
	    return this.toBigNumber(cache$7[this.id].minSharesToCreate, 18);
	  }

	  get penalty() {
	    return this.toBigNumber(cache$7[this.id].penalty, 18);
	  }

	  get quorum() {
	    return this.toBigNumber(cache$7[this.id].quorum, 18);
	  }

	  get reward() {
	    return this.toBigNumber(cache$7[this.id].reward, 18);
	  }

	  get votingTokenAddress() {
	    return cache$7[this.id].votingTokenAddress;
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.managerAddress);
	  }

	  toObject() {
	    const {
	      id
	    } = this;
	    const obj = { ...cache$7[id],
	      id
	    };
	    delete obj.settingsModelAddress;
	    return this.sanitize(obj);
	  }

	}

	var _format$b = "hh-sol-artifact-1";
	var contractName$b = "InformationalVote";
	var sourceName$b = "src/modules/InformationalVote/models/Vote.sol";
	var abi$b = [
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				},
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct InformationalVoteSettings.Instance",
					name: "_settings",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "author",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "hasReachedQuorum",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isActive",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isApproved",
							type: "bool"
						},
						{
							internalType: "string",
							name: "proposal",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "abstainLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "endOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "noLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorumLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "startOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yesLambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct InformationalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						}
					],
					internalType: "struct InformationalVote.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				},
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct InformationalVoteSettings.Instance",
					name: "_settings",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "author",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "hasReachedQuorum",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isActive",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isApproved",
							type: "bool"
						},
						{
							internalType: "string",
							name: "proposal",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "abstainLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "endOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "noLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorumLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "startOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yesLambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct InformationalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						}
					],
					internalType: "struct InformationalVote.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$b = "";
	var deployedBytecode$b = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634a52ae591461004657806368f0460f1461006f578063765cd54c14610084575b600080fd5b610059610054366004611008565b6100a4565b604051610066919061166f565b60405180910390f35b61008261007d366004610e7a565b6100b9565b005b610097610092366004611008565b610672565b60405161006691906116b1565b60006100b08383610981565b90505b92915050565b6102c0810151516101408201516040516100fb926100db929091602001611299565b60405160208183030381529060405280519060200120826000015161099d565b6102c08101515161014082015160405161013d9261011d929091602001611466565b60405160208183030381529060405280519060200120826020015161099d565b6102c08101515161014082015160405161017f9261015f92909160200161156a565b6040516020818303038152906040528051906020012082604001516109cb565b6102c0810151516101408201516040516101c1926101a1929091602001611258565b6040516020818303038152906040528051906020012082606001516109cb565b6102c081015151610140820151604051610203926101e392909160200161121f565b6040516020818303038152906040528051906020012082608001516109cb565b6102c0810151516101408201516040516102459261022592909160200161137d565b604051602081830303815290604052805190602001208260a001516109cb565b6102c081015151610140820151604051610287926102679290916020016113f0565b604051602081830303815290604052805190602001208260c001516109eb565b6102c0810151516101408201516040516102c9926102a99290916020016111aa565b604051602081830303815290604052805190602001208260e00151610a0f565b6102c08101515161014082015160405161030c926102eb9290916020016115a5565b60405160208183030381529060405280519060200120826101000151610a0f565b6102c08101515161014082015160405161034f9261032e92909160200161152f565b60405160208183030381529060405280519060200120826101200151610a0f565b6102c08101515161014082015160405161039292610371929091602001611621565b60405160208183030381529060405280519060200120826101600151610a0f565b6102c0810151516101408201516040516103d5926103b49290916020016114eb565b60405160208183030381529060405280519060200120826101800151610a0f565b6102c081015151610140820151604051610418926103f79290916020016115de565b60405160208183030381529060405280519060200120826101a00151610a0f565b6102c08101515161014082015160405161045b9261043a9290916020016114a9565b60405160208183030381529060405280519060200120826101c00151610a0f565b6102c08101515161014082015160405161049e9261047d929091602001611344565b60405160208183030381529060405280519060200120826101e00151610a0f565b6102c0810151516101408201516040516104e1926104c09290916020016113b8565b60405160208183030381529060405280519060200120826102000151610a0f565b6102c081015151610140820151604051610524926105039290916020016111e8565b60405160208183030381529060405280519060200120826102200151610a0f565b6102c08101515161014082015160405161056792610546929091602001611429565b60405160208183030381529060405280519060200120826102400151610a0f565b6102c0810151516101408201516040516105aa926105899290916020016112d0565b60405160208183030381529060405280519060200120826102600151610a0f565b6102c0810151516101408201516040516105ed926105cc929091602001611307565b60405160208183030381529060405280519060200120826102800151610a0f565b6102c0810151516101408201516040516106309261060f929091602001611170565b60405160208183030381529060405280519060200120826102a00151610a0f565b6102c08101515161014082015160405161066f92610652929091602001611139565b6040516020818303038152906040528051906020012060016109cb565b50565b61067a610b3d565b61014081018390526102c081018290526106948383610981565b156100b35781516040516106cb916106b09186906020016111aa565b60405160208183030381529060405280519060200120610a21565b60e082015281516040516106e7916106b09186906020016115a5565b610100820152815160405161071f91610704918690602001611299565b60405160208183030381529060405280519060200120610a36565b6001600160a01b031681528151604051610741916106b091869060200161152f565b61012082015281516040516107799161075e91869060200161156a565b60405160208183030381529060405280519060200120610a51565b15156040808301919091528251905161079a9161075e918690602001611258565b1515606082015281516040516107b89161075e91869060200161121f565b1515608082015281516040516107d69161075e91869060200161137d565b151560a082015281516040516107f4916106b0918690602001611621565b6101608201528151604051610811916106b09186906020016114eb565b610180820152815160405161082e916106b09186906020016115de565b6101a0820152815160405161084b916106b09186906020016114a9565b6101c08201528151604051610868916106b0918690602001611344565b6101e08201528151604051610885916106b09186906020016113b8565b61020082015281516040516108bd916108a29186906020016113f0565b60405160208183030381529060405280519060200120610a66565b60c082015281516040516108d9916106b09186906020016111e8565b61022082015281516040516108f6916106b0918690602001611429565b6102408201528151604051610913916106b09186906020016112d0565b6102608201528151604051610930916106b0918690602001611307565b610280820152815160405161094d91610704918690602001611466565b6001600160a01b03166020808301919091528251604051610975926106b09291879101611170565b6102a082015292915050565b60006100b082600001518460405160200161075e929190611139565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b600091825260016020526040909120805460ff1916911515919091179055565b60008281526004602090815260409091208251610a0a92840190610c0a565b505050565b60009182526005602052604090912055565b6000818152600560205260409020545b919050565b6000908152602081905260409020546001600160a01b031690565b60009081526001602052604090205460ff1690565b60608160001a60f81b6001600160f81b031916610a9e5760405162461bcd60e51b8152600401610a959061167a565b60405180910390fd5b60008281526004602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610b315780601f10610b0657610100808354040283529160200191610b31565b820191906000526020600020905b815481529060010190602001808311610b1457829003601f168201915b50505050509050919050565b604051806102e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160001515815260200160001515815260200160001515815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610c05610c88565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c4b57805160ff1916838001178555610c78565b82800160010185558215610c78579182015b82811115610c78578251825591602001919060010190610c5d565b50610c84929150610d0b565b5090565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115610c845760008155600101610d0c565b80356001600160a01b0381168114610a3157600080fd5b80358015158114610a3157600080fd5b600082601f830112610d57578081fd5b813567ffffffffffffffff811115610d6b57fe5b610d7e601f8201601f1916602001611820565b9150808252836020828501011115610d9557600080fd5b8060208401602084013760009082016020015292915050565b60006101c0808385031215610dc1578182fd5b610dca81611820565b915050610dd682610d20565b8152610de460208301610d20565b6020820152610df560408301610d37565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101608083013581830152506101808083013581830152506101a080830135818301525092915050565b600060208284031215610e8b578081fd5b813567ffffffffffffffff80821115610ea2578283fd5b908301906104808286031215610eb6578283fd5b610ec16102e0611820565b610eca83610d20565b8152610ed860208401610d20565b6020820152610ee960408401610d37565b6040820152610efa60608401610d37565b6060820152610f0b60808401610d37565b6080820152610f1c60a08401610d37565b60a082015260c083013582811115610f32578485fd5b610f3e87828601610d47565b60c08301525060e08381013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135908201526101c080840135908201526101e08084013590820152610200808401359082015261022080840135908201526102408084013590820152610260808401359082015261028080840135908201526102a080840135908201526102c09150610ff986838501610dae565b91810191909152949350505050565b6000806101e0838503121561101b578081fd5b8235915061102c8460208501610dae565b90509250929050565b6001600160a01b03169052565b15159052565b60008151808452815b8181101561106d57602081850181015186830182015201611051565b8181111561107e5782602083870101525b50601f01601f19169290920160200192915050565b61109e828251611035565b60208101516110b06020840182611035565b5060408101516110c36040840182611042565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b6001600160a01b0392909216825260208201526060604082018190526006908201526565786973747360d01b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600990820152687965734c616d62646160b81b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600d908201526c6162737461696e4c616d62646160981b608082015260a00190565b6001600160a01b0392909216825260208201526060604082018190526006908201526571756f72756d60d01b608082015260a00190565b6001600160a01b03929092168252602082015260606040820181905260089082015267697341637469766560c01b608082015260a00190565b6001600160a01b0392909216825260208201526060604082018190526010908201526f6861735265616368656451756f72756d60801b608082015260a00190565b6001600160a01b0392909216825260208201526060604082018190526006908201526530baba3437b960d11b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600690820152651c995dd85c9960d21b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600c908201526b73746172744f6e426c6f636b60a01b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600890820152676e6f4c616d62646160c01b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600a90820152691a5cd05c1c1c9bdd995960b21b608082015260a00190565b6001600160a01b0392909216825260208201526060604082018190526007908201526670656e616c747960c81b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600890820152671c1c9bdc1bdcd85b60c21b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600c908201526b71756f72756d4c616d62646160a01b608082015260a00190565b6001600160a01b03929092168252602082015260606040820181905260129082015271766f74696e67546f6b656e4164647265737360701b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052601190820152706d696e526577617264496e53686172657360781b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052601390820152726d696e426c6f636b73466f7250656e616c747960681b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600a9082015269656e644f6e426c6f636b60b01b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052600a908201526968617350656e616c747960b01b608082015260a00190565b6001600160a01b03929092168252602082015260606040820181905260089082015267185c1c1c9bdd985b60c21b608082015260a00190565b6001600160a01b039290921682526020820152606060408201819052601290820152716d696e50656e616c7479496e53686172657360701b608082015260a00190565b6001600160a01b0392909216825260208201526060604082018190526017908201527f6d6178536861726573506572546f6b656e486f6c646572000000000000000000608082015260a00190565b901515815260200190565b60208082526018908201527f456c617374696344414f3a205a65726f20416464726573730000000000000000604082015260600190565b6000602082526116c5602083018451611035565b60208301516116d76040840182611035565b5060408301516116ea6060840182611042565b5060608301516116fd6080840182611042565b50608083015161171060a0840182611042565b5060a083015161172360c0840182611042565b5060c083015161048060e084015261173f6104a0840182611048565b60e085015161010085810191909152850151610120808601919091528501516101408086019190915285015161016080860191909152850151610180808601919091528501516101a0808601919091528501516101c0808601919091528501516101e08086019190915285015161020080860191909152850151610220808601919091528501516102408086019190915285015161026080860191909152850151610280808601919091528501516102a0808601919091528501516102c0808601919091528501519091506118186102e0850182611093565b509392505050565b60405181810167ffffffffffffffff8111828210171561183c57fe5b60405291905056fea2646970667358221220706a7c4999fc1cf70e94b98f38309b2e3ebf394b54c2466a16b1cde0fd773ab564736f6c63430007020033";
	var linkReferences$b = {
	};
	var deployedLinkReferences$b = {
	};
	var InformationalVoteContract = {
		_format: _format$b,
		contractName: contractName$b,
		sourceName: sourceName$b,
		abi: abi$b,
		bytecode: bytecode$b,
		deployedBytecode: deployedBytecode$b,
		linkReferences: linkReferences$b,
		deployedLinkReferences: deployedLinkReferences$b
	};

	const cache$8 = {};
	const prefix$a = '@elastic-dao/sdk - InformationalVote';
	const isInformationalVote = thing => thing && typeof thing === 'object' && thing instanceof InformationalVote;
	const validateIsInformationalVote = thing => {
	  const message = 'not an InformationalVote';
	  validate$1(isInformationalVote(thing), {
	    message,
	    prefix: prefix$a
	  });
	};
	class InformationalVote extends ElasticModel {
	  constructor(sdk, {
	    abstainLambda,
	    approval,
	    author,
	    endOnBlock,
	    hasPenalty,
	    hasReachedQuorum,
	    index,
	    isActive,
	    isApproved,
	    maxSharesPerTokenHolder,
	    minBlocksForPenalty,
	    minPenaltyInShares,
	    minRewardInShares,
	    noLambda,
	    penalty,
	    proposal,
	    quorum,
	    quorumLambda,
	    reward,
	    settings,
	    startOnBlock,
	    voteModelAddress,
	    votingToken,
	    yesLambda
	  }) {
	    super(sdk);
	    this.id = `${settings.uuid}|${index}`.toLowerCase();
	    cache$8[this.id] = {
	      abstainLambda,
	      approval,
	      author,
	      endOnBlock,
	      hasPenalty,
	      hasReachedQuorum,
	      index,
	      isActive,
	      isApproved,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minPenaltyInShares,
	      minRewardInShares,
	      noLambda,
	      penalty,
	      proposal,
	      quorum,
	      quorumLambda,
	      reward,
	      settings,
	      startOnBlock,
	      voteModelAddress,
	      votingToken,
	      yesLambda
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$a
	    });
	    return sdk.contract({
	      abi: InformationalVoteContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, index, settings) {
	    validateIsNumber$1(index, {
	      prefix: prefix$a
	    });
	    validateIsInformationalVoteSettings(settings);
	    const voteModelAddress = await settings.manager.voteModelAddress();
	    const informationalVoteModel = await this.contract(sdk, voteModelAddress);
	    const {
	      abstainLambda,
	      approval,
	      author,
	      endOnBlock,
	      hasPenalty,
	      hasReachedQuorum,
	      isActive,
	      isApproved,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minPenaltyInShares,
	      minRewardInShares,
	      noLambda,
	      penalty,
	      proposal,
	      quorum,
	      quorumLambda,
	      reward,
	      startOnBlock,
	      votingToken,
	      yesLambda
	    } = await informationalVoteModel.deserialize(index, settings.toObject(false));
	    return new InformationalVote(sdk, {
	      abstainLambda,
	      approval,
	      author,
	      endOnBlock,
	      hasPenalty,
	      hasReachedQuorum,
	      index,
	      isActive,
	      isApproved,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minPenaltyInShares,
	      minRewardInShares,
	      noLambda,
	      penalty,
	      proposal,
	      quorum,
	      quorumLambda,
	      reward,
	      settings,
	      startOnBlock,
	      voteModelAddress,
	      votingToken,
	      yesLambda
	    });
	  } // Getters


	  get abstainLambda() {
	    return this.toBigNumber(cache$8[this.id].abstainLambda, 18);
	  }

	  get address() {
	    return cache$8[this.id].voteModelAddress;
	  }

	  get approval() {
	    return this.toBigNumber(cache$8[this.id].approval, 18);
	  }

	  get author() {
	    return cache$8[this.id].author;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get endOnBlock() {
	    return this.toNumber(cache$8[this.id].endOnBlock);
	  }

	  get hasPenalty() {
	    return cache$8[this.id].hasPenalty;
	  }

	  get hasReachedQuorum() {
	    return cache$8[this.id].hasReachedQuorum;
	  }

	  get index() {
	    return this.toNumber(cache$8[this.id].index);
	  }

	  get isActive() {
	    return cache$8[this.id].isActive;
	  }

	  get isApproved() {
	    return cache$8[this.id].isApproved;
	  }

	  get maxSharesPerTokenHolder() {
	    return this.toBigNumber(cache$8[this.id].maxSharesPerTokenHolder, 18);
	  }

	  get minBlocksForPenalty() {
	    return this.toNumber(cache$8[this.id].minBlocksForPenalty);
	  }

	  get minPenaltyInShares() {
	    return this.toBigNumber(cache$8[this.id].minPenaltyInShares, 18);
	  }

	  get minRewardInShares() {
	    return this.toBigNumber(cache$8[this.id].minRewardInShares, 18);
	  }

	  get noLambda() {
	    return this.toBigNumber(cache$8[this.id].noLambda, 18);
	  }

	  get penalty() {
	    return this.toBigNumber(cache$8[this.id].penalty, 18);
	  }

	  get proposal() {
	    return cache$8[this.id].proposal;
	  }

	  get quorum() {
	    return this.toBigNumber(cache$8[this.id].quorum, 18);
	  }

	  get quorumLambda() {
	    return this.toBigNumber(cache$8[this.id].quorumLambda, 18);
	  }

	  get reward() {
	    return this.toBigNumber(cache$8[this.id].reward, 18);
	  }

	  get settings() {
	    return cache$8[this.id].settings;
	  }

	  get startOnBlock() {
	    return this.toNumber(cache$8[this.id].startOnBlock);
	  }

	  get votingToken() {
	    return cache$8[this.id].votingToken;
	  }

	  get yesLambda() {
	    return this.toBigNumber(cache$8[this.id].yesLambda, 18);
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.index, this.settings);
	  }

	  toObject(includeNested = true) {
	    const {
	      id,
	      settings
	    } = this;
	    const obj = { ...cache$8[id],
	      id,
	      settings: settings.toObject(false)
	    };
	    delete obj.voteModelAddress;

	    if (includeNested === false) {
	      delete obj.settings;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$c = "hh-sol-artifact-1";
	var contractName$c = "InformationalVoteBallot";
	var sourceName$c = "src/modules/InformationalVote/models/Ballot.sol";
	var abi$c = [
		{
			inputs: [
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_voter",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct InformationalVoteSettings.Instance",
					name: "_settings",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "author",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "hasReachedQuorum",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isActive",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isApproved",
							type: "bool"
						},
						{
							internalType: "string",
							name: "proposal",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "abstainLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "endOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "noLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorumLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "startOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yesLambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct InformationalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						}
					],
					internalType: "struct InformationalVote.Instance",
					name: "_vote",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "voter",
							type: "address"
						},
						{
							internalType: "bool",
							name: "wasPenalized",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yna",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct InformationalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "author",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "hasReachedQuorum",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isActive",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isApproved",
									type: "bool"
								},
								{
									internalType: "string",
									name: "proposal",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "abstainLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "endOnBlock",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "index",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "noLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorumLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "startOnBlock",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "yesLambda",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "managerAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "votingTokenAddress",
											type: "address"
										},
										{
											internalType: "bool",
											name: "hasPenalty",
											type: "bool"
										},
										{
											internalType: "uint256",
											name: "approval",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "counter",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "maxSharesPerTokenHolder",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minBlocksForPenalty",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minDurationInBlocks",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minPenaltyInShares",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minRewardInShares",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minSharesToCreate",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "penalty",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "quorum",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "reward",
											type: "uint256"
										}
									],
									internalType: "struct InformationalVoteSettings.Instance",
									name: "settings",
									type: "tuple"
								}
							],
							internalType: "struct InformationalVote.Instance",
							name: "vote",
							type: "tuple"
						}
					],
					internalType: "struct InformationalVoteBallot.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_voter",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct InformationalVoteSettings.Instance",
					name: "_settings",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "author",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "hasReachedQuorum",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isActive",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isApproved",
							type: "bool"
						},
						{
							internalType: "string",
							name: "proposal",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "abstainLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "endOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "noLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorumLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "startOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yesLambda",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct InformationalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						}
					],
					internalType: "struct InformationalVote.Instance",
					name: "_vote",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "voter",
							type: "address"
						},
						{
							internalType: "bool",
							name: "wasPenalized",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yna",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct InformationalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "author",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "hasReachedQuorum",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isActive",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isApproved",
									type: "bool"
								},
								{
									internalType: "string",
									name: "proposal",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "abstainLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "endOnBlock",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "index",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "noLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorumLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "startOnBlock",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "yesLambda",
									type: "uint256"
								},
								{
									components: [
										{
											internalType: "address",
											name: "managerAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "votingTokenAddress",
											type: "address"
										},
										{
											internalType: "bool",
											name: "hasPenalty",
											type: "bool"
										},
										{
											internalType: "uint256",
											name: "approval",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "counter",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "maxSharesPerTokenHolder",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minBlocksForPenalty",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minDurationInBlocks",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minPenaltyInShares",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minRewardInShares",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minSharesToCreate",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "penalty",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "quorum",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "reward",
											type: "uint256"
										}
									],
									internalType: "struct InformationalVoteSettings.Instance",
									name: "settings",
									type: "tuple"
								}
							],
							internalType: "struct InformationalVote.Instance",
							name: "vote",
							type: "tuple"
						}
					],
					internalType: "struct InformationalVoteBallot.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$c = "0x608060405234801561001057600080fd5b50610cdf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806327a4eb4d14610046578063ccaf715d1461006f578063e2ff8d6614610084575b600080fd5b610059610054366004610794565b6100a4565b6040516100669190610acc565b60405180910390f35b61008261007d3660046107f3565b610186565b005b610097610092366004610794565b6102aa565b6040516100669190610ac1565b6100ac61033b565b6001600160a01b03841681526080810183905260a081018290526100d18484846102bf565b1561017f578251610140830151604051610110926100f592909188906020016109fb565b604051602081830303815290604052805190602001206102df565b604080830191909152835161014084015191516101519261013692918890602001610a7a565b604051602081830303815290604052805190602001206102f4565b15156020808301919091528351610140840151604051610179936100f5939291899101610a3c565b60608201525b9392505050565b60808101515160a0820151610140015182516040516101cf936101af9390929091602001610a7a565b604051602081830303815290604052805190602001208260200151610309565b60808101515160a082015161014001518251604051610218936101f893909290916020016109fb565b604051602081830303815290604052805190602001208260400151610329565b60808101515160a082015161014001518251604051610261936102419390929091602001610a3c565b604051602081830303815290604052805190602001208260600151610329565b60808101515160a0820151610140015182516040516102a79361028a93909290916020016109ba565b604051602081830303815290604052805190602001206001610309565b50565b60006102b78484846102bf565b949350505050565b81516101408201516040516000926102b7926101369288906020016109ba565b6000818152600560205260409020545b919050565b60009081526001602052604090205460ff1690565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526005602052604090912055565b6040518060c0016040528060006001600160a01b031681526020016000151581526020016000815260200160008152602001610375610387565b815260200161038261040a565b905290565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806102e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160001515815260200160001515815260200160001515815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610382610387565b80356001600160a01b03811681146102ef57600080fd5b803580151581146102ef57600080fd5b600082601f830112610509578081fd5b813567ffffffffffffffff81111561051d57fe5b610530601f8201601f1916602001610c85565b915080825283602082850101111561054757600080fd5b8060208401602084013760009082016020015292915050565b60006101c0808385031215610573578182fd5b61057c81610c85565b915050610588826104d2565b8152610596602083016104d2565b60208201526105a7604083016104e9565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101608083013581830152506101808083013581830152506101a080830135818301525092915050565b6000610480828403121561063e578081fd5b6106496102e0610c85565b9050610654826104d2565b8152610662602083016104d2565b6020820152610673604083016104e9565b6040820152610684606083016104e9565b6060820152610695608083016104e9565b60808201526106a660a083016104e9565b60a082015260c082013567ffffffffffffffff8111156106c557600080fd5b6106d1848285016104f9565b60c08301525060e08281013590820152610100808301359082015261012080830135908201526101408083013590820152610160808301359082015261018080830135908201526101a080830135908201526101c080830135908201526101e08083013590820152610200808301359082015261022080830135908201526102408083013590820152610260808301359082015261028080830135908201526102a080830135908201526102c061078a84828501610560565b9082015292915050565b600080600061020084860312156107a9578283fd5b6107b2846104d2565b92506107c18560208601610560565b91506101e084013567ffffffffffffffff8111156107dd578182fd5b6107e98682870161062c565b9150509250925092565b600060208284031215610804578081fd5b813567ffffffffffffffff8082111561081b578283fd5b90830190610260828603121561082f578283fd5b60405160c08101818110838211171561084457fe5b604052610850836104d2565b815261085e602084016104e9565b602082015260408301356040820152606083013560608201526108848660808501610560565b60808201526102408301358281111561089b578485fd5b6108a78782860161062c565b60a08301525095945050505050565b6001600160a01b03169052565b15159052565b60008151808452815b818110156108ee576020818501810151868301820152016108d2565b818111156108ff5782602083870101525b50601f01601f19169290920160200192915050565b61091f8282516108b6565b602081015161093160208401826108b6565b50604081015161094460408401826108c3565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b6001600160a01b039384168152602081019290925290911660408201526080606082018190526006908201526565786973747360d01b60a082015260c00190565b6001600160a01b03938416815260208101929092529091166040820152608060608201819052600690820152656c616d62646160d01b60a082015260c00190565b6001600160a01b0393841681526020810192909252909116604082015260806060820181905260039082015262796e6160e81b60a082015260c00190565b6001600160a01b03938416815260208101929092529091166040820152608060608201819052600c908201526b1dd85cd4195b985b1a5e995960a21b60a082015260c00190565b901515815260200190565b60006020825261028060018060a01b03845116602084015260208401511515604084015260408401516060840152606084015160808401526080840151610b1660a0850182610914565b5060a08401516102608081860152610b3183860183516108b6565b60208201516102a0610b45818801836108b6565b604084015191506102c0610b5b818901846108c3565b60608501519250610b706102e08901846108c3565b60808501519250610b856103008901846108c3565b60a08501519250610b9a6103208901846108c3565b60c08501519250610480806103408a0152610bb96107008a01856108c9565b60e08701516103608b01526101008701516103808b01526101208701516103a08b01526101408701516103c08b01526101608701516103e08b01526101808701516104008b01526101a08701516104208b01526101c08701516104408b01526101e08701516104608b0152610200870151918a01919091526102208601516104a08a01526102408601516104c08a0152848601516104e08a01529585015161050089015290840151610520880152830151939050610c7b610540870185610914565b9695505050505050565b60405181810167ffffffffffffffff81118282101715610ca157fe5b60405291905056fea2646970667358221220b4d58160afdfb35b13bc0e389a79bd3f871d60b3d71f526f537ba3edf20ca5a364736f6c63430007020033";
	var deployedBytecode$c = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806327a4eb4d14610046578063ccaf715d1461006f578063e2ff8d6614610084575b600080fd5b610059610054366004610794565b6100a4565b6040516100669190610acc565b60405180910390f35b61008261007d3660046107f3565b610186565b005b610097610092366004610794565b6102aa565b6040516100669190610ac1565b6100ac61033b565b6001600160a01b03841681526080810183905260a081018290526100d18484846102bf565b1561017f578251610140830151604051610110926100f592909188906020016109fb565b604051602081830303815290604052805190602001206102df565b604080830191909152835161014084015191516101519261013692918890602001610a7a565b604051602081830303815290604052805190602001206102f4565b15156020808301919091528351610140840151604051610179936100f5939291899101610a3c565b60608201525b9392505050565b60808101515160a0820151610140015182516040516101cf936101af9390929091602001610a7a565b604051602081830303815290604052805190602001208260200151610309565b60808101515160a082015161014001518251604051610218936101f893909290916020016109fb565b604051602081830303815290604052805190602001208260400151610329565b60808101515160a082015161014001518251604051610261936102419390929091602001610a3c565b604051602081830303815290604052805190602001208260600151610329565b60808101515160a0820151610140015182516040516102a79361028a93909290916020016109ba565b604051602081830303815290604052805190602001206001610309565b50565b60006102b78484846102bf565b949350505050565b81516101408201516040516000926102b7926101369288906020016109ba565b6000818152600560205260409020545b919050565b60009081526001602052604090205460ff1690565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526005602052604090912055565b6040518060c0016040528060006001600160a01b031681526020016000151581526020016000815260200160008152602001610375610387565b815260200161038261040a565b905290565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806102e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160001515815260200160001515815260200160001515815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610382610387565b80356001600160a01b03811681146102ef57600080fd5b803580151581146102ef57600080fd5b600082601f830112610509578081fd5b813567ffffffffffffffff81111561051d57fe5b610530601f8201601f1916602001610c85565b915080825283602082850101111561054757600080fd5b8060208401602084013760009082016020015292915050565b60006101c0808385031215610573578182fd5b61057c81610c85565b915050610588826104d2565b8152610596602083016104d2565b60208201526105a7604083016104e9565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101608083013581830152506101808083013581830152506101a080830135818301525092915050565b6000610480828403121561063e578081fd5b6106496102e0610c85565b9050610654826104d2565b8152610662602083016104d2565b6020820152610673604083016104e9565b6040820152610684606083016104e9565b6060820152610695608083016104e9565b60808201526106a660a083016104e9565b60a082015260c082013567ffffffffffffffff8111156106c557600080fd5b6106d1848285016104f9565b60c08301525060e08281013590820152610100808301359082015261012080830135908201526101408083013590820152610160808301359082015261018080830135908201526101a080830135908201526101c080830135908201526101e08083013590820152610200808301359082015261022080830135908201526102408083013590820152610260808301359082015261028080830135908201526102a080830135908201526102c061078a84828501610560565b9082015292915050565b600080600061020084860312156107a9578283fd5b6107b2846104d2565b92506107c18560208601610560565b91506101e084013567ffffffffffffffff8111156107dd578182fd5b6107e98682870161062c565b9150509250925092565b600060208284031215610804578081fd5b813567ffffffffffffffff8082111561081b578283fd5b90830190610260828603121561082f578283fd5b60405160c08101818110838211171561084457fe5b604052610850836104d2565b815261085e602084016104e9565b602082015260408301356040820152606083013560608201526108848660808501610560565b60808201526102408301358281111561089b578485fd5b6108a78782860161062c565b60a08301525095945050505050565b6001600160a01b03169052565b15159052565b60008151808452815b818110156108ee576020818501810151868301820152016108d2565b818111156108ff5782602083870101525b50601f01601f19169290920160200192915050565b61091f8282516108b6565b602081015161093160208401826108b6565b50604081015161094460408401826108c3565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b6001600160a01b039384168152602081019290925290911660408201526080606082018190526006908201526565786973747360d01b60a082015260c00190565b6001600160a01b03938416815260208101929092529091166040820152608060608201819052600690820152656c616d62646160d01b60a082015260c00190565b6001600160a01b0393841681526020810192909252909116604082015260806060820181905260039082015262796e6160e81b60a082015260c00190565b6001600160a01b03938416815260208101929092529091166040820152608060608201819052600c908201526b1dd85cd4195b985b1a5e995960a21b60a082015260c00190565b901515815260200190565b60006020825261028060018060a01b03845116602084015260208401511515604084015260408401516060840152606084015160808401526080840151610b1660a0850182610914565b5060a08401516102608081860152610b3183860183516108b6565b60208201516102a0610b45818801836108b6565b604084015191506102c0610b5b818901846108c3565b60608501519250610b706102e08901846108c3565b60808501519250610b856103008901846108c3565b60a08501519250610b9a6103208901846108c3565b60c08501519250610480806103408a0152610bb96107008a01856108c9565b60e08701516103608b01526101008701516103808b01526101208701516103a08b01526101408701516103c08b01526101608701516103e08b01526101808701516104008b01526101a08701516104208b01526101c08701516104408b01526101e08701516104608b0152610200870151918a01919091526102208601516104a08a01526102408601516104c08a0152848601516104e08a01529585015161050089015290840151610520880152830151939050610c7b610540870185610914565b9695505050505050565b60405181810167ffffffffffffffff81118282101715610ca157fe5b60405291905056fea2646970667358221220b4d58160afdfb35b13bc0e389a79bd3f871d60b3d71f526f537ba3edf20ca5a364736f6c63430007020033";
	var linkReferences$c = {
	};
	var deployedLinkReferences$c = {
	};
	var InformationalVoteBallotContract = {
		_format: _format$c,
		contractName: contractName$c,
		sourceName: sourceName$c,
		abi: abi$c,
		bytecode: bytecode$c,
		deployedBytecode: deployedBytecode$c,
		linkReferences: linkReferences$c,
		deployedLinkReferences: deployedLinkReferences$c
	};

	const cache$9 = {};
	const prefix$b = '@elastic-dao/sdk - InformationalVoteBallot';
	const isInformationalVoteBallot = thing => thing && typeof thing === 'object' && thing instanceof InformationalVoteBallot;
	const validateIsInformationalVoteBallot = thing => {
	  const message = 'not an InformationalVoteBallot';
	  validate$1(isInformationalVoteBallot(thing), {
	    message,
	    prefix: prefix$b
	  });
	};
	class InformationalVoteBallot extends ElasticModel {
	  constructor(sdk, {
	    ballotModelAddress,
	    lambda,
	    settings,
	    vote,
	    voter,
	    wasPenalized,
	    yna
	  }) {
	    super(sdk);
	    this.id = `${settings.uuid}|${vote.index}|${voter}`.toLowerCase();
	    cache$9[this.id] = {
	      ballotModelAddress,
	      lambda,
	      settings,
	      vote,
	      voter,
	      wasPenalized,
	      yna
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$b
	    });
	    return sdk.contract({
	      abi: InformationalVoteBallotContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, voter, settings, vote) {
	    validateIsAddress$1(voter, {
	      prefix: prefix$b
	    });
	    validateIsInformationalVote(vote);
	    validateIsInformationalVoteSettings(settings);
	    const ballotModelAddress = await settings.manager.ballotModelAddress();
	    const informationalVoteBallotModel = this.contract(sdk, ballotModelAddress);
	    const {
	      lambda,
	      wasPenalized,
	      yna
	    } = await informationalVoteBallotModel.deserialize(voter, settings.toObject(false), vote.toObject(false));
	    return new InformationalVoteBallot({
	      ballotModelAddress,
	      lambda,
	      settings,
	      vote,
	      voter,
	      wasPenalized,
	      yna
	    });
	  } // Getters


	  get address() {
	    return cache$9[this.id].ballotModelAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get lambda() {
	    return this.toBigNumber(cache$9[this.id].lambda);
	  }

	  get settings() {
	    return cache$9[this.id].settings;
	  }

	  get vote() {
	    return cache$9[this.id].vote;
	  }

	  get voter() {
	    return cache$9[this.id].voter;
	  }

	  get wasPenalized() {
	    return cache$9[this.id].wasPenalized;
	  }

	  get yna() {
	    return this.toNumber(cache$9[this.id].yna);
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.voter, this.settings, this.vote);
	  }

	  toObject(includeNested = true) {
	    const {
	      id,
	      settings,
	      vote
	    } = this;
	    const obj = { ...cache$9[id],
	      id,
	      settings: settings.toObject(false),
	      vote: vote.toObject(false)
	    };
	    delete obj.ballotModelAddress;

	    if (includeNested === false) {
	      delete obj.settings;
	      delete obj.vote;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$d = "hh-sol-artifact-1";
	var contractName$d = "InformationalVoteFactory";
	var sourceName$d = "src/modules/InformationalVote/Factory.sol";
	var abi$d = [
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "managerAddress",
					type: "address"
				}
			],
			name: "ManagerDeployed",
			type: "event"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_ballotModelAddress",
					type: "address"
				},
				{
					internalType: "address payable",
					name: "_elasticDAOAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_settingsModelAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_voteModelAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_votingTokenAddress",
					type: "address"
				},
				{
					internalType: "bool",
					name: "_hasPenalty",
					type: "bool"
				},
				{
					internalType: "uint256[10]",
					name: "_settings",
					type: "uint256[10]"
				}
			],
			name: "deployManager",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$d = "0x608060405234801561001057600080fd5b5061252f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631aded75414610030575b600080fd5b61004361003e366004610190565b610045565b005b600087868660405161005690610183565b61006293929190610287565b604051809103906000f08015801561007e573d6000803e3d6000fd5b50604051631ac0ab5d60e31b81529091506001600160a01b0382169063d6055ae8906100b2908790879087906004016102aa565b600060405180830381600087803b1580156100cc57600080fd5b505af11580156100e0573d6000803e3d6000fd5b5050604051630181bb0b60e01b81528992506001600160a01b0383169150630181bb0b906101129085906004016102f9565b600060405180830381600087803b15801561012c57600080fd5b505af1158015610140573d6000803e3d6000fd5b50506040516001600160a01b03851692507f5caf3d7ccd76ce2fb019663b95a98e88bcc4fe4330e687c78ea5882daccab9ff9150600090a2505050505050505050565b61219f8061035b83390190565b600080600080600080600061020080898b0312156101ac578384fd5b88356101b781610342565b97506020898101356101c881610342565b975060408a01356101d881610342565b965060608a01356101e881610342565b955060808a01356101f881610342565b945060a08a0135801515811461020c578485fd5b935060df8a018b1361021c578283fd5b604051610140810181811067ffffffffffffffff8211171561023a57fe5b6040528060c08c01848d018e1015610250578586fd5b8594505b600a851015610273578035825260019490940193908301908301610254565b505080935050505092959891949750929550565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b0384168152821515602080830191909152610180820190604083018460005b600a8110156102ed578151835291830191908301906001016102d0565b50505050949350505050565b6001600160a01b039190911681526040602082018190526017908201527f496e666f726d6174696f6e616c566f74654d6f64756c65000000000000000000606082015260800190565b6001600160a01b038116811461035757600080fd5b5056fe60806040523480156200001157600080fd5b506040516200219f3803806200219f83398101604081905262000034916200009d565b600080546001600160a01b039485166001600160a01b0319918216179091556002805460018054958716959093169490941790915592166001600160a81b0319909116179055620000e6565b80516001600160a01b03811681146200009857600080fd5b919050565b600080600060608486031215620000b2578283fd5b620000bd8462000080565b9250620000cd6020850162000080565b9150620000dd6040850162000080565b90509250925092565b6120a980620000f66000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063478eadbe11610066578063478eadbe146100fe578063743812131461011357806385b4bb531461011b578063d6055ae814610130578063e1faaae81461014357610093565b8063083964b1146100985780630c09135b146100ad578063158ef93e146100c05780634541c853146100de575b600080fd5b6100ab6100a63660046117f7565b61014b565b005b6100ab6100bb366004611743565b610615565b6100c861099a565b6040516100d59190611ab1565b60405180910390f35b6100f16100ec366004611505565b6109aa565b6040516100d59190611fb9565b610106610c95565b6040516100d59190611a49565b610106610ca4565b610123610cb3565b6040516100d59190611f97565b6100ab61013e36600461143f565b610cc8565b610106610e27565b610153611169565b61015b610e36565b90506101678382610ebf565b61018c5760405162461bcd60e51b815260040161018390611ef6565b60405180910390fd5b6101946111ec565b61019e8483610f4b565b60a0810151909150156101c35760405162461bcd60e51b815260040161018390611acf565b80608001516101e45760405162461bcd60e51b815260040161018390611c61565b6101ed81610fd9565b6102095760405162461bcd60e51b815260040161018390611c61565b600383106102295760405162461bcd60e51b815260040161018390611d60565b6020810151604051633e174aaf60e01b81526000906001600160a01b03831690633e174aaf9061025d903390600401611a49565b60206040518083038186803b15801561027557600080fd5b505afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad919061172b565b61028084015160405163046deee960e01b81529192506000916001600160a01b0385169163046deee9916102e5913391600401611a5d565b60206040518083038186803b1580156102fd57600080fd5b505afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610335919061172b565b905081811015610343578091505b8184610160015110156103595783610160015191505b856103785761036d846102a0015183611062565b6102a08501526103af565b856001141561039b57610390846101e0015183611062565b6101e08501526103af565b6103a98460e0015183611062565b60e08501525b60006103d26103c8866102a00151876101e00151611062565b8660e00151611062565b90506000846001600160a01b03166378b61f226040518163ffffffff1660e01b815260040160206040518083038186803b15801561040f57600080fd5b505afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610447919061172b565b9050600061045a82886102200151611087565b905080831061046b57600160608801525b600061047c83896101000151611087565b905080841061048d57600160a08901525b6104956112b9565b338152608081018a905260a081018990526040808201889052606082018c9052600054905163ccaf715d60e01b81526001600160a01b039091169063ccaf715d906104e4908490600401611f2d565b600060405180830381600087803b1580156104fe57600080fd5b505af1158015610512573d6000803e3d6000fd5b50506002546040516368f0460f60e01b81526001600160a01b0390911692506368f0460f9150610546908c90600401611fa6565b600060405180830381600087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b50505050876001600160a01b031663528c198a336105978a8d6102600151611087565b6040518363ffffffff1660e01b81526004016105b4929190611a5d565b602060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060691906114e9565b50505050505050505050505050565b61061d611169565b610625610e36565b90506106318382610ebf565b61064d5760405162461bcd60e51b815260040161018390611ef6565b6106556111ec565b61065f8483610f4b565b60a0810151909150156106845760405162461bcd60e51b815260040161018390611dcd565b6080810151156106a65760405162461bcd60e51b815260040161018390611eab565b6060810151156106c85760405162461bcd60e51b815260040161018390611bb8565b80604001516106e95760405162461bcd60e51b815260040161018390611d1b565b6000805460208301516001600160a01b03909116915b855181101561099157826001600160a01b031663e2ff8d6687838151811061072357fe5b602002602001015187876040518463ffffffff1660e01b815260040161074b93929190611a76565b60206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b91906114e9565b61097f576107a76112b9565b8682815181106107b357fe5b6020908102919091018101516001600160a01b0390811683526080830188905260a0830187905260019183019190915287516000916108819190861690633e174aaf908b908790811061080257fe5b60200260200101516040518263ffffffff1660e01b81526004016108269190611a49565b60206040518083038186803b15801561083e57600080fd5b505afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610876919061172b565b876102000151611087565b60408084018290525163ccaf715d60e01b81529091506001600160a01b0386169063ccaf715d906108b6908590600401611f2d565b600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b50505050836001600160a01b031663ee7a7c0489858151811061090357fe5b6020026020010151836040518363ffffffff1660e01b8152600401610929929190611a5d565b602060405180830381600087803b15801561094357600080fd5b505af1158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b91906114e9565b5050505b61098a816001611062565b90506106ff565b50505050505050565b600254600160a01b900460ff1681565b600254600090600160a01b900460ff166109d65760405162461bcd60e51b815260040161018390611b2c565b6109de611169565b6109e6610e36565b6020810151610140820151604051633e174aaf60e01b815292935090916001600160a01b03831690633e174aaf90610a22903390600401611a49565b60206040518083038186803b158015610a3a57600080fd5b505afa158015610a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a72919061172b565b1015610a905760405162461bcd60e51b815260040161018390611c15565b8160e00151610a9f85436110bc565b1015610abd5760405162461bcd60e51b815260040161018390611e5d565b6002546001600160a01b0316610ad16111ec565b6102c08101849052338152604080850151151581830152600060608301819052600160808085019190915260a080850183905260c08086018c905260e08601849052610100860184905261012086018b9052918801516101408601528701516101608086019190915290870151610180808601919091526101e08501839052908701516102008501528601516102208401526101a0860151610260840152436102808401526020808701516001600160a01b03908116918501919091526102a084019190915290516368f0460f60e01b8152908316906368f0460f90610bbb908490600401611fa6565b600060405180830381600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505060015460405163e5910ae760e01b81526001600160a01b03909116925063e5910ae79150610c1d903090600401611a49565b600060405180830381600087803b158015610c3757600080fd5b505af1158015610c4b573d6000803e3d6000fd5b505050507f460e77e3c8455201c4722742a8a654c959331ac344ab1b2ecefdb2b500f129c8816101400151604051610c839190611fb9565b60405180910390a15050505092915050565b6001546001600160a01b031681565b6000546001600160a01b031681565b610cbb611169565b610cc3610e36565b905090565b600254600160a01b900460ff1615610cf25760405162461bcd60e51b815260040161018390611cbe565b6001546001600160a01b0316610d06611169565b3081526001600160a01b038516602082015283151560408201528260006020020151606082015260006080820152826001602002015160a0820152826002602002015160c0820152826003602002015160e08201528260046020020151610100820152826005602002015161012082015282600660200201516101408201528260076020020151610160820152826008602002015161018082015282600960200201516101a082015260405163e416649960e01b81526001600160a01b0383169063e416649990610ddb908490600401611f97565b600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b50506002805460ff60a01b1916600160a01b17905550505050505050565b6002546001600160a01b031681565b610e3e611169565b60015460405163332a4d0960e01b81526001600160a01b039091169063332a4d0990610e6e903090600401611a49565b6101c06040518083038186803b158015610e8757600080fd5b505afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190611581565b600254604051634a52ae5960e01b81526000916001600160a01b031690634a52ae5990610ef29086908690600401611fc2565b60206040518083038186803b158015610f0a57600080fd5b505afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4291906114e9565b90505b92915050565b610f536111ec565b600254604051631d97355360e21b81526001600160a01b039091169063765cd54c90610f859086908690600401611fc2565b60006040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f42919081019061159d565b6000438261012001511161105957600060808301526002546040516368f0460f60e01b81526001600160a01b03909116906368f0460f9061101e908590600401611fa6565b600060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b505050506000905061105d565b5060015b919050565b600082820183811015610f425760405162461bcd60e51b815260040161018390611b81565b6000670de0b6b3a76400006110ad61109f85856110fe565b6706f05b59d3b20000611062565b816110b457fe5b049392505050565b6000610f4283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611138565b60008261110d57506000610f45565b8282028284828161111a57fe5b0414610f425760405162461bcd60e51b815260040161018390611e1c565b6000818484111561115c5760405162461bcd60e51b81526004016101839190611abc565b50508183035b9392505050565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806102e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600015158152602001600015158152602001600015158152602001600015158152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016112b4611169565b905290565b6040518060c0016040528060006001600160a01b0316815260200160001515815260200160008152602001600081526020016112f3611169565b81526020016112b46111ec565b803561105d8161204d565b805161105d8161204d565b805161105d81612065565b600082601f830112611331578081fd5b815161134461133f82611ffb565b611fd7565b915080825283602082850101111561135b57600080fd5b61136c81602084016020860161201d565b5092915050565b60006101c0808385031215611386578182fd5b61138f81611fd7565b91505061139b8261130b565b81526113a96020830161130b565b60208201526113ba60408301611316565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101608083015181830152506101808083015181830152506101a080830151818301525092915050565b6000806000610180808587031215611455578384fd5b84356114608161204d565b935060208581013561147181612065565b9350605f86018713611481578283fd5b604051610140810181811067ffffffffffffffff8211171561149f57fe5b8060405250806040880189858a0111156114b7578586fd5b8594505b600a8510156114da5780358252600194909401939083019083016114bb565b50508093505050509250925092565b6000602082840312156114fa578081fd5b8151610f4281612065565b60008060408385031215611517578182fd5b823567ffffffffffffffff81111561152d578283fd5b8301601f8101851361153d578283fd5b803561154b61133f82611ffb565b81815286602083850101111561155f578485fd5b8160208401602083013790810160209081019490945295939092013593505050565b60006101c08284031215611593578081fd5b610f428383611373565b6000602082840312156115ae578081fd5b815167ffffffffffffffff808211156115c5578283fd5b9083019061048082860312156115d9578283fd5b6115e46102e0611fd7565b6115ed8361130b565b81526115fb6020840161130b565b602082015261160c60408401611316565b604082015261161d60608401611316565b606082015261162e60808401611316565b608082015261163f60a08401611316565b60a082015260c083015182811115611655578485fd5b61166187828601611321565b60c08301525060e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260808401519082015261028080840151908201526102a080840151908201526102c0915061171c86838501611373565b91810191909152949350505050565b60006020828403121561173c578081fd5b5051919050565b60008060408385031215611755578182fd5b8235915060208084013567ffffffffffffffff80821115611774578384fd5b818601915086601f830112611787578384fd5b81358181111561179357fe5b83810291506117a3848301611fd7565b8181528481019084860184860187018b10156117bd578788fd5b8795505b838610156117e6576117d281611300565b8352600195909501949186019186016117c1565b508096505050505050509250929050565b60008060408385031215611809578182fd5b50508035926020909101359150565b6001600160a01b03169052565b15159052565b6000815180845261184381602086016020860161201d565b601f01601f19169290920160200192915050565b611862828251611818565b60208101516118746020840182611818565b5060408101516118876040840182611825565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b600061048061190d848451611818565b602083015161191f6020860182611818565b5060408301516119326040860182611825565b5060608301516119456060860182611825565b5060808301516119586080860182611825565b5060a083015161196b60a0860182611825565b5060c08301518160c08601526119838286018261182b565b60e08581015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601519087015261018080860151908701526101a080860151908701526101c080860151908701526101e08086015190870152610200808601519087015261022080860151908701526102408086015190870152610260808601519087015261028080860151908701526102a080860151908701526102c0808601519193509150611a3f82870182611857565b5090949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03841681526000610200611a946020840186611857565b806101e0840152611aa7818401856118fd565b9695505050505050565b901515815260200190565b600060208252610f42602083018461182b565b60208082526038908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520686160408201527f7320616c7265616479206265656e20617070726f7665642e0000000000000000606082015260800190565b60208082526035908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f7465204d616040820152741b9859d95c881b9bdd081a5b9a5d1a585b1a5e9959605a1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603b908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a65206120766f60408201527f746520746861742068617320726561636865642071756f72756d2e0000000000606082015260800190565b6020808252602c908201527f456c617374696344414f3a204e6f7420656e6f7567682073686172657320746f60408201526b2063726561746520766f746560a01b606082015260800190565b60208082526039908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520697360408201527f206e6f7420616374697665206f722068617320656e6465642e00000000000000606082015260800190565b6020808252603b908201527f456c617374696344414f3a20496e666f726d6174696f6e616c20566f7465204d60408201527f616e6167657220616c726561647920696e697469616c697a65642e0000000000606082015260800190565b60208082526025908201527f456c617374696344414f3a205468697320766f746520686173206e6f2070656e60408201526430b63a3c9760d91b606082015260800190565b60208082526047908201527f456c617374696344414f3a20496e76616c6964205f796e612076616c75652e2060408201527f557365203020666f72207965732c203120666f72206e6f2c203220666f7220616060820152663139ba30b4b71760c91b608082015260a00190565b6020808252602f908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a65206120766f60408201526e3a32903a3430ba103830b9b9b2b21760891b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520706560408201526d1c9a5bd9081d1bdbc81cda1bdc9d60921b606082015260800190565b6020808252602b908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a6520616e206160408201526a31ba34bb32903b37ba329760a91b606082015260800190565b6020808252601c908201527f456c617374696344414f3a20496e76616c696420766f74652069642e00000000604082015260600190565b60006020825260018060a01b03835116602083015260208301511515604083015260408301516060830152606083015160808301526080830151611f7460a0840182611857565b5060a083015161026083810152611f8f6102808401826118fd565b949350505050565b6101c08101610f458284611857565b600060208252610f4260208301846118fd565b90815260200190565b8281526101e081016111626020830184611857565b60405181810167ffffffffffffffff81118282101715611ff357fe5b604052919050565b600067ffffffffffffffff82111561200f57fe5b50601f01601f191660200190565b60005b83811015612038578181015183820152602001612020565b83811115612047576000848401525b50505050565b6001600160a01b038116811461206257600080fd5b50565b801515811461206257600080fdfea2646970667358221220c0f44117f511920d15c9c9e32d5e564f6b72a18e3b9cf7bec464756ffa116a6264736f6c63430007020033a264697066735822122059b1d38efae6847d3681d6b362353e7d198d384756f2fb885548ee193508978364736f6c63430007020033";
	var deployedBytecode$d = "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631aded75414610030575b600080fd5b61004361003e366004610190565b610045565b005b600087868660405161005690610183565b61006293929190610287565b604051809103906000f08015801561007e573d6000803e3d6000fd5b50604051631ac0ab5d60e31b81529091506001600160a01b0382169063d6055ae8906100b2908790879087906004016102aa565b600060405180830381600087803b1580156100cc57600080fd5b505af11580156100e0573d6000803e3d6000fd5b5050604051630181bb0b60e01b81528992506001600160a01b0383169150630181bb0b906101129085906004016102f9565b600060405180830381600087803b15801561012c57600080fd5b505af1158015610140573d6000803e3d6000fd5b50506040516001600160a01b03851692507f5caf3d7ccd76ce2fb019663b95a98e88bcc4fe4330e687c78ea5882daccab9ff9150600090a2505050505050505050565b61219f8061035b83390190565b600080600080600080600061020080898b0312156101ac578384fd5b88356101b781610342565b97506020898101356101c881610342565b975060408a01356101d881610342565b965060608a01356101e881610342565b955060808a01356101f881610342565b945060a08a0135801515811461020c578485fd5b935060df8a018b1361021c578283fd5b604051610140810181811067ffffffffffffffff8211171561023a57fe5b6040528060c08c01848d018e1015610250578586fd5b8594505b600a851015610273578035825260019490940193908301908301610254565b505080935050505092959891949750929550565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b0384168152821515602080830191909152610180820190604083018460005b600a8110156102ed578151835291830191908301906001016102d0565b50505050949350505050565b6001600160a01b039190911681526040602082018190526017908201527f496e666f726d6174696f6e616c566f74654d6f64756c65000000000000000000606082015260800190565b6001600160a01b038116811461035757600080fd5b5056fe60806040523480156200001157600080fd5b506040516200219f3803806200219f83398101604081905262000034916200009d565b600080546001600160a01b039485166001600160a01b0319918216179091556002805460018054958716959093169490941790915592166001600160a81b0319909116179055620000e6565b80516001600160a01b03811681146200009857600080fd5b919050565b600080600060608486031215620000b2578283fd5b620000bd8462000080565b9250620000cd6020850162000080565b9150620000dd6040850162000080565b90509250925092565b6120a980620000f66000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063478eadbe11610066578063478eadbe146100fe578063743812131461011357806385b4bb531461011b578063d6055ae814610130578063e1faaae81461014357610093565b8063083964b1146100985780630c09135b146100ad578063158ef93e146100c05780634541c853146100de575b600080fd5b6100ab6100a63660046117f7565b61014b565b005b6100ab6100bb366004611743565b610615565b6100c861099a565b6040516100d59190611ab1565b60405180910390f35b6100f16100ec366004611505565b6109aa565b6040516100d59190611fb9565b610106610c95565b6040516100d59190611a49565b610106610ca4565b610123610cb3565b6040516100d59190611f97565b6100ab61013e36600461143f565b610cc8565b610106610e27565b610153611169565b61015b610e36565b90506101678382610ebf565b61018c5760405162461bcd60e51b815260040161018390611ef6565b60405180910390fd5b6101946111ec565b61019e8483610f4b565b60a0810151909150156101c35760405162461bcd60e51b815260040161018390611acf565b80608001516101e45760405162461bcd60e51b815260040161018390611c61565b6101ed81610fd9565b6102095760405162461bcd60e51b815260040161018390611c61565b600383106102295760405162461bcd60e51b815260040161018390611d60565b6020810151604051633e174aaf60e01b81526000906001600160a01b03831690633e174aaf9061025d903390600401611a49565b60206040518083038186803b15801561027557600080fd5b505afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad919061172b565b61028084015160405163046deee960e01b81529192506000916001600160a01b0385169163046deee9916102e5913391600401611a5d565b60206040518083038186803b1580156102fd57600080fd5b505afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610335919061172b565b905081811015610343578091505b8184610160015110156103595783610160015191505b856103785761036d846102a0015183611062565b6102a08501526103af565b856001141561039b57610390846101e0015183611062565b6101e08501526103af565b6103a98460e0015183611062565b60e08501525b60006103d26103c8866102a00151876101e00151611062565b8660e00151611062565b90506000846001600160a01b03166378b61f226040518163ffffffff1660e01b815260040160206040518083038186803b15801561040f57600080fd5b505afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610447919061172b565b9050600061045a82886102200151611087565b905080831061046b57600160608801525b600061047c83896101000151611087565b905080841061048d57600160a08901525b6104956112b9565b338152608081018a905260a081018990526040808201889052606082018c9052600054905163ccaf715d60e01b81526001600160a01b039091169063ccaf715d906104e4908490600401611f2d565b600060405180830381600087803b1580156104fe57600080fd5b505af1158015610512573d6000803e3d6000fd5b50506002546040516368f0460f60e01b81526001600160a01b0390911692506368f0460f9150610546908c90600401611fa6565b600060405180830381600087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b50505050876001600160a01b031663528c198a336105978a8d6102600151611087565b6040518363ffffffff1660e01b81526004016105b4929190611a5d565b602060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060691906114e9565b50505050505050505050505050565b61061d611169565b610625610e36565b90506106318382610ebf565b61064d5760405162461bcd60e51b815260040161018390611ef6565b6106556111ec565b61065f8483610f4b565b60a0810151909150156106845760405162461bcd60e51b815260040161018390611dcd565b6080810151156106a65760405162461bcd60e51b815260040161018390611eab565b6060810151156106c85760405162461bcd60e51b815260040161018390611bb8565b80604001516106e95760405162461bcd60e51b815260040161018390611d1b565b6000805460208301516001600160a01b03909116915b855181101561099157826001600160a01b031663e2ff8d6687838151811061072357fe5b602002602001015187876040518463ffffffff1660e01b815260040161074b93929190611a76565b60206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b91906114e9565b61097f576107a76112b9565b8682815181106107b357fe5b6020908102919091018101516001600160a01b0390811683526080830188905260a0830187905260019183019190915287516000916108819190861690633e174aaf908b908790811061080257fe5b60200260200101516040518263ffffffff1660e01b81526004016108269190611a49565b60206040518083038186803b15801561083e57600080fd5b505afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610876919061172b565b876102000151611087565b60408084018290525163ccaf715d60e01b81529091506001600160a01b0386169063ccaf715d906108b6908590600401611f2d565b600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b50505050836001600160a01b031663ee7a7c0489858151811061090357fe5b6020026020010151836040518363ffffffff1660e01b8152600401610929929190611a5d565b602060405180830381600087803b15801561094357600080fd5b505af1158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b91906114e9565b5050505b61098a816001611062565b90506106ff565b50505050505050565b600254600160a01b900460ff1681565b600254600090600160a01b900460ff166109d65760405162461bcd60e51b815260040161018390611b2c565b6109de611169565b6109e6610e36565b6020810151610140820151604051633e174aaf60e01b815292935090916001600160a01b03831690633e174aaf90610a22903390600401611a49565b60206040518083038186803b158015610a3a57600080fd5b505afa158015610a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a72919061172b565b1015610a905760405162461bcd60e51b815260040161018390611c15565b8160e00151610a9f85436110bc565b1015610abd5760405162461bcd60e51b815260040161018390611e5d565b6002546001600160a01b0316610ad16111ec565b6102c08101849052338152604080850151151581830152600060608301819052600160808085019190915260a080850183905260c08086018c905260e08601849052610100860184905261012086018b9052918801516101408601528701516101608086019190915290870151610180808601919091526101e08501839052908701516102008501528601516102208401526101a0860151610260840152436102808401526020808701516001600160a01b03908116918501919091526102a084019190915290516368f0460f60e01b8152908316906368f0460f90610bbb908490600401611fa6565b600060405180830381600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505060015460405163e5910ae760e01b81526001600160a01b03909116925063e5910ae79150610c1d903090600401611a49565b600060405180830381600087803b158015610c3757600080fd5b505af1158015610c4b573d6000803e3d6000fd5b505050507f460e77e3c8455201c4722742a8a654c959331ac344ab1b2ecefdb2b500f129c8816101400151604051610c839190611fb9565b60405180910390a15050505092915050565b6001546001600160a01b031681565b6000546001600160a01b031681565b610cbb611169565b610cc3610e36565b905090565b600254600160a01b900460ff1615610cf25760405162461bcd60e51b815260040161018390611cbe565b6001546001600160a01b0316610d06611169565b3081526001600160a01b038516602082015283151560408201528260006020020151606082015260006080820152826001602002015160a0820152826002602002015160c0820152826003602002015160e08201528260046020020151610100820152826005602002015161012082015282600660200201516101408201528260076020020151610160820152826008602002015161018082015282600960200201516101a082015260405163e416649960e01b81526001600160a01b0383169063e416649990610ddb908490600401611f97565b600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b50506002805460ff60a01b1916600160a01b17905550505050505050565b6002546001600160a01b031681565b610e3e611169565b60015460405163332a4d0960e01b81526001600160a01b039091169063332a4d0990610e6e903090600401611a49565b6101c06040518083038186803b158015610e8757600080fd5b505afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190611581565b600254604051634a52ae5960e01b81526000916001600160a01b031690634a52ae5990610ef29086908690600401611fc2565b60206040518083038186803b158015610f0a57600080fd5b505afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4291906114e9565b90505b92915050565b610f536111ec565b600254604051631d97355360e21b81526001600160a01b039091169063765cd54c90610f859086908690600401611fc2565b60006040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f42919081019061159d565b6000438261012001511161105957600060808301526002546040516368f0460f60e01b81526001600160a01b03909116906368f0460f9061101e908590600401611fa6565b600060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b505050506000905061105d565b5060015b919050565b600082820183811015610f425760405162461bcd60e51b815260040161018390611b81565b6000670de0b6b3a76400006110ad61109f85856110fe565b6706f05b59d3b20000611062565b816110b457fe5b049392505050565b6000610f4283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611138565b60008261110d57506000610f45565b8282028284828161111a57fe5b0414610f425760405162461bcd60e51b815260040161018390611e1c565b6000818484111561115c5760405162461bcd60e51b81526004016101839190611abc565b50508183035b9392505050565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806102e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600015158152602001600015158152602001600015158152602001600015158152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016112b4611169565b905290565b6040518060c0016040528060006001600160a01b0316815260200160001515815260200160008152602001600081526020016112f3611169565b81526020016112b46111ec565b803561105d8161204d565b805161105d8161204d565b805161105d81612065565b600082601f830112611331578081fd5b815161134461133f82611ffb565b611fd7565b915080825283602082850101111561135b57600080fd5b61136c81602084016020860161201d565b5092915050565b60006101c0808385031215611386578182fd5b61138f81611fd7565b91505061139b8261130b565b81526113a96020830161130b565b60208201526113ba60408301611316565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101608083015181830152506101808083015181830152506101a080830151818301525092915050565b6000806000610180808587031215611455578384fd5b84356114608161204d565b935060208581013561147181612065565b9350605f86018713611481578283fd5b604051610140810181811067ffffffffffffffff8211171561149f57fe5b8060405250806040880189858a0111156114b7578586fd5b8594505b600a8510156114da5780358252600194909401939083019083016114bb565b50508093505050509250925092565b6000602082840312156114fa578081fd5b8151610f4281612065565b60008060408385031215611517578182fd5b823567ffffffffffffffff81111561152d578283fd5b8301601f8101851361153d578283fd5b803561154b61133f82611ffb565b81815286602083850101111561155f578485fd5b8160208401602083013790810160209081019490945295939092013593505050565b60006101c08284031215611593578081fd5b610f428383611373565b6000602082840312156115ae578081fd5b815167ffffffffffffffff808211156115c5578283fd5b9083019061048082860312156115d9578283fd5b6115e46102e0611fd7565b6115ed8361130b565b81526115fb6020840161130b565b602082015261160c60408401611316565b604082015261161d60608401611316565b606082015261162e60808401611316565b608082015261163f60a08401611316565b60a082015260c083015182811115611655578485fd5b61166187828601611321565b60c08301525060e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260808401519082015261028080840151908201526102a080840151908201526102c0915061171c86838501611373565b91810191909152949350505050565b60006020828403121561173c578081fd5b5051919050565b60008060408385031215611755578182fd5b8235915060208084013567ffffffffffffffff80821115611774578384fd5b818601915086601f830112611787578384fd5b81358181111561179357fe5b83810291506117a3848301611fd7565b8181528481019084860184860187018b10156117bd578788fd5b8795505b838610156117e6576117d281611300565b8352600195909501949186019186016117c1565b508096505050505050509250929050565b60008060408385031215611809578182fd5b50508035926020909101359150565b6001600160a01b03169052565b15159052565b6000815180845261184381602086016020860161201d565b601f01601f19169290920160200192915050565b611862828251611818565b60208101516118746020840182611818565b5060408101516118876040840182611825565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b600061048061190d848451611818565b602083015161191f6020860182611818565b5060408301516119326040860182611825565b5060608301516119456060860182611825565b5060808301516119586080860182611825565b5060a083015161196b60a0860182611825565b5060c08301518160c08601526119838286018261182b565b60e08581015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601519087015261018080860151908701526101a080860151908701526101c080860151908701526101e08086015190870152610200808601519087015261022080860151908701526102408086015190870152610260808601519087015261028080860151908701526102a080860151908701526102c0808601519193509150611a3f82870182611857565b5090949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03841681526000610200611a946020840186611857565b806101e0840152611aa7818401856118fd565b9695505050505050565b901515815260200190565b600060208252610f42602083018461182b565b60208082526038908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520686160408201527f7320616c7265616479206265656e20617070726f7665642e0000000000000000606082015260800190565b60208082526035908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f7465204d616040820152741b9859d95c881b9bdd081a5b9a5d1a585b1a5e9959605a1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603b908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a65206120766f60408201527f746520746861742068617320726561636865642071756f72756d2e0000000000606082015260800190565b6020808252602c908201527f456c617374696344414f3a204e6f7420656e6f7567682073686172657320746f60408201526b2063726561746520766f746560a01b606082015260800190565b60208082526039908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520697360408201527f206e6f7420616374697665206f722068617320656e6465642e00000000000000606082015260800190565b6020808252603b908201527f456c617374696344414f3a20496e666f726d6174696f6e616c20566f7465204d60408201527f616e6167657220616c726561647920696e697469616c697a65642e0000000000606082015260800190565b60208082526025908201527f456c617374696344414f3a205468697320766f746520686173206e6f2070656e60408201526430b63a3c9760d91b606082015260800190565b60208082526047908201527f456c617374696344414f3a20496e76616c6964205f796e612076616c75652e2060408201527f557365203020666f72207965732c203120666f72206e6f2c203220666f7220616060820152663139ba30b4b71760c91b608082015260a00190565b6020808252602f908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a65206120766f60408201526e3a32903a3430ba103830b9b9b2b21760891b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f456c617374696344414f3a20496e666f726d6174696f6e616c566f746520706560408201526d1c9a5bd9081d1bdbc81cda1bdc9d60921b606082015260800190565b6020808252602b908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a6520616e206160408201526a31ba34bb32903b37ba329760a91b606082015260800190565b6020808252601c908201527f456c617374696344414f3a20496e76616c696420766f74652069642e00000000604082015260600190565b60006020825260018060a01b03835116602083015260208301511515604083015260408301516060830152606083015160808301526080830151611f7460a0840182611857565b5060a083015161026083810152611f8f6102808401826118fd565b949350505050565b6101c08101610f458284611857565b600060208252610f4260208301846118fd565b90815260200190565b8281526101e081016111626020830184611857565b60405181810167ffffffffffffffff81118282101715611ff357fe5b604052919050565b600067ffffffffffffffff82111561200f57fe5b50601f01601f191660200190565b60005b83811015612038578181015183820152602001612020565b83811115612047576000848401525b50505050565b6001600160a01b038116811461206257600080fd5b50565b801515811461206257600080fdfea2646970667358221220c0f44117f511920d15c9c9e32d5e564f6b72a18e3b9cf7bec464756ffa116a6264736f6c63430007020033a264697066735822122059b1d38efae6847d3681d6b362353e7d198d384756f2fb885548ee193508978364736f6c63430007020033";
	var linkReferences$d = {
	};
	var deployedLinkReferences$d = {
	};
	var InformationalVoteFactoryContract = {
		_format: _format$d,
		contractName: contractName$d,
		sourceName: sourceName$d,
		abi: abi$d,
		bytecode: bytecode$d,
		deployedBytecode: deployedBytecode$d,
		linkReferences: linkReferences$d,
		deployedLinkReferences: deployedLinkReferences$d
	};

	const prefix$c = '@elastic-dao/sdk - InformationalVoteManager';
	class InformationalVoteManager extends Base {
	  constructor(sdk, address) {
	    super(sdk);
	    validateIsAddress$1(address, {
	      prefix: prefix$c
	    });
	    this.address = address;
	  }

	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$c
	    });
	    return sdk.contract({
	      abi: InformationalVoteManagerContract.abi,
	      address
	    });
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  async applyPenalty(index, addressesToPenalize, overrides = {}) {
	    validateIsNumber$1(index, {
	      prefix: prefix$c
	    });

	    for (let i = 0; i < addressesToPenalize.length; i += 1) {
	      validateIsAddress$1(addressesToPenalize[i], {
	        prefix: prefix$c
	      });
	    }

	    const manager = await this.contract();
	    await manager.applyPenalty(index, addressesToPenalize, this.sanitizeOverrides(overrides));
	    return true;
	  }

	  async ballotModelAddress() {
	    const manager = await this.contract;
	    return manager.ballotModelAddress();
	  }

	  async castBallot(index, yna, overrides = {}) {
	    validateIsNumber$1(index, {
	      prefix: prefix$c
	    });
	    validateIsNumber$1(yna, {
	      prefix: prefix$c
	    });
	    const manager = await this.contract;
	    await manager.castBallot(index, yna, this.sanitizeOverrides(overrides));
	    return true; // TODO: Return ballot model
	  }

	  async createVote(proposal, endOnBlock, overrides = {}) {
	    validateIsString$1(proposal, {
	      prefix: prefix$c
	    });
	    validateIsNumber$1(endOnBlock, {
	      prefix: prefix$c
	    });
	    const manager = await this.contract;
	    await manager.createVote(proposal, endOnBlock, this.sanitizeOverrides(overrides));
	    return true; // TODO: Return vote model
	  }

	  async getSettings() {
	    return InformationalVoteSettings.deserialize(this.sdk, this);
	  }

	  async settingsModelAddress() {
	    const manager = await this.contract;
	    return manager.settingsModelAddress();
	  }

	  async voteModelAddress() {
	    const manager = await this.contract;
	    return manager.voteModelAddress();
	  }

	}

	const prefix$d = '@elastic-dao/sdk - InformationalVoteFactory';
	class InformationalVoteFactory extends Base {
	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$d
	    });
	    return sdk.contract({
	      abi: InformationalVoteFactoryContract.abi,
	      address
	    });
	  }

	  get address() {
	    return this.sdk.env.elasticDAO.modules.informationalVote.factoryAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  async deployManager(ballotModelAddress, elasticDAOAddress, settingsModelAddress, voteModelAddress, votingTokenAddress, hasPenalty, [approval, maxSharesPerTokenHolder, minBlocksForPenalty, minDurationInBlocks, minPenaltyInShares, minRewardInShares, minSharesToCreate, penalty, quorum, reward], overrides = {}) {
	    validateIsAddress$1(ballotModelAddress, {
	      prefix: prefix$d
	    });
	    validateIsAddress$1(elasticDAOAddress, {
	      prefix: prefix$d
	    });
	    validateIsAddress$1(settingsModelAddress, {
	      prefix: prefix$d
	    });
	    validateIsAddress$1(voteModelAddress, {
	      prefix: prefix$d
	    });
	    validateIsAddress$1(votingTokenAddress, {
	      prefix: prefix$d
	    });
	    const payload = [ballotModelAddress, elasticDAOAddress, settingsModelAddress, voteModelAddress, votingTokenAddress, hasPenalty, [this.toEthersBigNumber(approval, 18), this.toEthersBigNumber(maxSharesPerTokenHolder, 18), this.toEthersBigNumber(minBlocksForPenalty), this.toEthersBigNumber(minDurationInBlocks), this.toEthersBigNumber(minPenaltyInShares, 18), this.toEthersBigNumber(minRewardInShares, 18), this.toEthersBigNumber(minSharesToCreate, 18), this.toEthersBigNumber(penalty, 18), this.toEthersBigNumber(quorum, 18), this.toEthersBigNumber(reward, 18)]];
	    const factory = await this.contract;
	    const managerDeployedFilter = factory.filters.ManagerDeployed();
	    const managerDeployedFilterPromise = new Promise(async (resolve, reject) => {
	      let tx = {};

	      const handler = ({
	        transactionHash,
	        topics
	      }) => {
	        if (transactionHash === tx.hash) {
	          this.sdk.provider.off(managerDeployedFilter, handler);
	          resolve(`0x${topics[1].substring(26)}`);
	        }
	      };

	      this.sdk.provider.on(managerDeployedFilter, handler);
	      tx = await factory.deployManager(...payload, this.sanitizeOverrides(overrides));
	      await tx.wait(2);
	      reject();
	    });
	    return new InformationalVoteManager(await managerDeployedFilterPromise);
	  }

	}

	const InformationalVote$1 = InformationalVote;
	const InformationalVoteBallot$1 = InformationalVoteBallot;
	const InformationalVoteFactory$1 = InformationalVoteFactory;
	const InformationalVoteManager$1 = InformationalVoteManager;
	const InformationalVoteSettings$1 = InformationalVoteSettings;
	class Models extends Base {
	  get InformationalVote() {
	    return {
	      contract: (...args) => InformationalVote$1.contract(this.sdk, ...args),
	      deserialize: (...args) => InformationalVote$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get InformationalVoteBallot() {
	    return {
	      contract: (...args) => InformationalVoteBallot$1.contract(this.sdk, ...args),
	      deserialize: (...args) => InformationalVoteBallot$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get InformationalVoteSettings() {
	    return {
	      contract: (...args) => InformationalVoteSettings$1.contract(this.sdk, ...args),
	      deserialize: (...args) => InformationalVoteSettings$1.deserialize(this.sdk, ...args),
	      managerContract: (...args) => InformationalVoteSettings$1.managerContract(this.sdk, ...args)
	    };
	  }

	}
	class InformationalVoteModule extends Base {
	  get informationalVoteFactory() {
	    return new InformationalVoteFactory$1(this.sdk, this.sdk.env.elasticDAO.modules.informationalVote.factoryAddress);
	  }

	  get informationalVoteManager() {
	    return new InformationalVoteManager$1(this.sdk, this.sdk.env.elasticDAO.modules.informationalVote.managerAddress);
	  }

	  get models() {
	    return new Models(this.sdk);
	  }

	}

	var _format$e = "hh-sol-artifact-1";
	var contractName$e = "TransactionalVoteManager";
	var sourceName$e = "src/modules/TransactionalVote/Manager.sol";
	var abi$e = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_ballotModelAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_settingsModelAddress",
					type: "address"
				},
				{
					internalType: "address payable",
					name: "_vaultAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_voteModelAddress",
					type: "address"
				}
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "uint256",
					name: "index",
					type: "uint256"
				}
			],
			name: "CreateVote",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "bytes32",
					name: "txHash",
					type: "bytes32"
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "payment",
					type: "uint256"
				}
			],
			name: "ExecutionFailure",
			type: "event"
		},
		{
			anonymous: false,
			inputs: [
				{
					indexed: false,
					internalType: "bytes32",
					name: "txHash",
					type: "bytes32"
				},
				{
					indexed: false,
					internalType: "uint256",
					name: "payment",
					type: "uint256"
				}
			],
			name: "ExecutionSuccess",
			type: "event"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				},
				{
					internalType: "address[]",
					name: "_addressesToPenalize",
					type: "address[]"
				}
			],
			name: "applyPenalty",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "ballotModelAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_yna",
					type: "uint256"
				}
			],
			name: "castBallot",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_to",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "_value",
					type: "uint256"
				},
				{
					internalType: "bytes",
					name: "_data",
					type: "bytes"
				},
				{
					internalType: "enum Operation",
					name: "_operation",
					type: "uint8"
				},
				{
					internalType: "uint256",
					name: "_safeTxGas",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_baseGas",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_endOnBlock",
					type: "uint256"
				}
			],
			name: "createVote",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "domainSeparator",
			outputs: [
				{
					internalType: "bytes32",
					name: "",
					type: "bytes32"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_gasToken",
					type: "address"
				},
				{
					internalType: "uint256",
					name: "_gasPrice",
					type: "uint256"
				},
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				}
			],
			name: "execute",
			outputs: [
				{
					internalType: "bool",
					name: "success",
					type: "bool"
				}
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "getSettings",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct TransactionalVoteSettings.Instance",
					name: "",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_votingTokenAddress",
					type: "address"
				},
				{
					internalType: "bool",
					name: "_hasPenalty",
					type: "bool"
				},
				{
					internalType: "uint256[10]",
					name: "_settings",
					type: "uint256[10]"
				}
			],
			name: "initialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
			],
			name: "initialized",
			outputs: [
				{
					internalType: "bool",
					name: "",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "nonce",
			outputs: [
				{
					internalType: "uint256",
					name: "",
					type: "uint256"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "settingsModelAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "vaultAddress",
			outputs: [
				{
					internalType: "address payable",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
			],
			name: "voteModelAddress",
			outputs: [
				{
					internalType: "address",
					name: "",
					type: "address"
				}
			],
			stateMutability: "view",
			type: "function"
		}
	];
	var bytecode$e = "";
	var deployedBytecode$e = "";
	var linkReferences$e = {
	};
	var deployedLinkReferences$e = {
	};
	var TransactionalVoteManagerContract = {
		_format: _format$e,
		contractName: contractName$e,
		sourceName: sourceName$e,
		abi: abi$e,
		bytecode: bytecode$e,
		deployedBytecode: deployedBytecode$e,
		linkReferences: linkReferences$e,
		deployedLinkReferences: deployedLinkReferences$e
	};

	var _format$f = "hh-sol-artifact-1";
	var contractName$f = "TransactionalVoteSettings";
	var sourceName$f = "src/modules/TransactionalVote/models/Settings.sol";
	var abi$f = [
		{
			inputs: [
				{
					internalType: "address",
					name: "_managerAddress",
					type: "address"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct TransactionalVoteSettings.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_managerAddress",
					type: "address"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_managerAddress",
					type: "address"
				}
			],
			name: "incrementCounter",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct TransactionalVoteSettings.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$f = "0x608060405234801561001057600080fd5b50610cee806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063332a4d0914610051578063e41664991461007a578063e5910ae71461008f578063f6a3d24e146100a2575b600080fd5b61006461005f366004610780565b6100c2565b6040516100719190610bda565b60405180910390f35b61008d61008836600461079a565b61029f565b005b61008d61009d366004610780565b61058b565b6100b56100b0366004610780565b6105d8565b6040516100719190610b98565b6100ca6106d6565b6001600160a01b03821681526100df826105e9565b1561029a57610113826040516020016100f89190610add565b604051602081830303815290604052805190602001206105ff565b606082015260405161012d906100f89084906020016108d9565b608082015260405161016290610147908490602001610aa7565b60405160208183030381529060405280519060200120610611565b151560408083019190915251610180906100f8908490602001610b4f565b60a082015260405161019a906100f8908490602001610a68565b60c08201526040516101b4906100f89084906020016109ae565b60e08201526040516101ce906100f890849060200161093e565b6101408201526040516101e9906100f8908490602001610b11565b610100820152604051610204906100f8908490602001610a2b565b61012082015260405161021f906100f890849060200161097b565b61016082015260405161023a906100f89084906020016108a7565b610180820152604051610255906100f890849060200161090c565b6101a082015260405161028b906102709084906020016109ed565b60405160208183030381529060405280519060200120610626565b6001600160a01b031660208201525b919050565b80516040516102d4916102b491602001610aa7565b604051602081830303815290604052805190602001208260400151610641565b8051604051610309916102e991602001610add565b604051602081830303815290604052805190602001208260600151610661565b805160405161033e9161031e916020016108d9565b604051602081830303815290604052805190602001208260800151610661565b80516040516103739161035391602001610b4f565b604051602081830303815290604052805190602001208260a00151610661565b80516040516103a89161038891602001610a68565b604051602081830303815290604052805190602001208260c00151610661565b80516040516103dd916103bd916020016109ae565b604051602081830303815290604052805190602001208260e00151610661565b8051604051610413916103f291602001610b11565b60405160208183030381529060405280519060200120826101000151610661565b80516040516104499161042891602001610a2b565b60405160208183030381529060405280519060200120826101200151610661565b805160405161047f9161045e9160200161093e565b60405160208183030381529060405280519060200120826101400151610661565b80516040516104b5916104949160200161097b565b60405160208183030381529060405280519060200120826101600151610661565b80516040516104eb916104ca916020016108a7565b60405160208183030381529060405280519060200120826101800151610661565b8051604051610521916105009160200161090c565b60405160208183030381529060405280519060200120826101a00151610661565b805160405161055691610536916020016109ed565b604051602081830303815290604052805190602001208260200151610673565b80516040516105889161056b91602001610875565b604051602081830303815290604052805190602001206001610641565b50565b6105888160405160200161059f91906108d9565b604051602081830303815290604052805190602001206105d36105cc846040516020016100f891906108d9565b60016106a1565b610661565b60006105e3826105e9565b92915050565b60006105e3826040516020016101479190610875565b60009081526005602052604090205490565b60009081526001602052604090205460ff1690565b6000908152602081905260409020546001600160a01b031690565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526005602052604090912055565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000828201838110156106cf5760405162461bcd60e51b81526004016106c690610ba3565b60405180910390fd5b9392505050565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461029a57600080fd5b8035801515811461029a57600080fd5b600060208284031215610791578081fd5b6106cf82610759565b60006101c08083850312156107ad578182fd5b6107b681610c94565b90506107c183610759565b81526107cf60208401610759565b60208201526107e060408401610770565b6040820152606083810135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a0928301359281019290925250919050565b6001600160a01b03169052565b15159052565b6001600160a01b039190911681526040602082018190526006908201526565786973747360d01b606082015260800190565b6001600160a01b039190911681526040602082018190526006908201526571756f72756d60d01b606082015260800190565b6001600160a01b039190911681526040602082018190526007908201526631b7bab73a32b960c91b606082015260800190565b6001600160a01b03919091168152604060208201819052600690820152651c995dd85c9960d21b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706d696e536861726573546f43726561746560781b606082015260800190565b6001600160a01b039190911681526040602082018190526007908201526670656e616c747960c81b606082015260800190565b6001600160a01b03919091168152604060208201819052601390820152726d696e4475726174696f6e496e426c6f636b7360681b606082015260800190565b6001600160a01b0391909116815260406020820181905260129082015271766f74696e67546f6b656e4164647265737360701b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706d696e526577617264496e53686172657360781b606082015260800190565b6001600160a01b03919091168152604060208201819052601390820152726d696e426c6f636b73466f7250656e616c747960681b606082015260800190565b6001600160a01b03919091168152604060208201819052600a908201526968617350656e616c747960b01b606082015260800190565b6001600160a01b0391909116815260406020820181905260089082015267185c1c1c9bdd985b60c21b606082015260800190565b6001600160a01b03919091168152604060208201819052601290820152716d696e50656e616c7479496e53686172657360701b606082015260800190565b6001600160a01b039190911681526040602082018190526017908201527f6d6178536861726573506572546f6b656e486f6c646572000000000000000000606082015260800190565b901515815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60006101c082019050610bee828451610862565b6020830151610c006020840182610862565b506040830151610c13604084018261086f565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015181840152506101408084015181840152506101608084015181840152506101808084015181840152506101a080840151818401525092915050565b60405181810167ffffffffffffffff81118282101715610cb057fe5b60405291905056fea26469706673582212208cd2b4ef3afefba5f9579b770668b34ff7b4808f18bc7150c696e9fc2b41fc5764736f6c63430007020033";
	var deployedBytecode$f = "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063332a4d0914610051578063e41664991461007a578063e5910ae71461008f578063f6a3d24e146100a2575b600080fd5b61006461005f366004610780565b6100c2565b6040516100719190610bda565b60405180910390f35b61008d61008836600461079a565b61029f565b005b61008d61009d366004610780565b61058b565b6100b56100b0366004610780565b6105d8565b6040516100719190610b98565b6100ca6106d6565b6001600160a01b03821681526100df826105e9565b1561029a57610113826040516020016100f89190610add565b604051602081830303815290604052805190602001206105ff565b606082015260405161012d906100f89084906020016108d9565b608082015260405161016290610147908490602001610aa7565b60405160208183030381529060405280519060200120610611565b151560408083019190915251610180906100f8908490602001610b4f565b60a082015260405161019a906100f8908490602001610a68565b60c08201526040516101b4906100f89084906020016109ae565b60e08201526040516101ce906100f890849060200161093e565b6101408201526040516101e9906100f8908490602001610b11565b610100820152604051610204906100f8908490602001610a2b565b61012082015260405161021f906100f890849060200161097b565b61016082015260405161023a906100f89084906020016108a7565b610180820152604051610255906100f890849060200161090c565b6101a082015260405161028b906102709084906020016109ed565b60405160208183030381529060405280519060200120610626565b6001600160a01b031660208201525b919050565b80516040516102d4916102b491602001610aa7565b604051602081830303815290604052805190602001208260400151610641565b8051604051610309916102e991602001610add565b604051602081830303815290604052805190602001208260600151610661565b805160405161033e9161031e916020016108d9565b604051602081830303815290604052805190602001208260800151610661565b80516040516103739161035391602001610b4f565b604051602081830303815290604052805190602001208260a00151610661565b80516040516103a89161038891602001610a68565b604051602081830303815290604052805190602001208260c00151610661565b80516040516103dd916103bd916020016109ae565b604051602081830303815290604052805190602001208260e00151610661565b8051604051610413916103f291602001610b11565b60405160208183030381529060405280519060200120826101000151610661565b80516040516104499161042891602001610a2b565b60405160208183030381529060405280519060200120826101200151610661565b805160405161047f9161045e9160200161093e565b60405160208183030381529060405280519060200120826101400151610661565b80516040516104b5916104949160200161097b565b60405160208183030381529060405280519060200120826101600151610661565b80516040516104eb916104ca916020016108a7565b60405160208183030381529060405280519060200120826101800151610661565b8051604051610521916105009160200161090c565b60405160208183030381529060405280519060200120826101a00151610661565b805160405161055691610536916020016109ed565b604051602081830303815290604052805190602001208260200151610673565b80516040516105889161056b91602001610875565b604051602081830303815290604052805190602001206001610641565b50565b6105888160405160200161059f91906108d9565b604051602081830303815290604052805190602001206105d36105cc846040516020016100f891906108d9565b60016106a1565b610661565b60006105e3826105e9565b92915050565b60006105e3826040516020016101479190610875565b60009081526005602052604090205490565b60009081526001602052604090205460ff1690565b6000908152602081905260409020546001600160a01b031690565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526005602052604090912055565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000828201838110156106cf5760405162461bcd60e51b81526004016106c690610ba3565b60405180910390fd5b9392505050565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461029a57600080fd5b8035801515811461029a57600080fd5b600060208284031215610791578081fd5b6106cf82610759565b60006101c08083850312156107ad578182fd5b6107b681610c94565b90506107c183610759565b81526107cf60208401610759565b60208201526107e060408401610770565b6040820152606083810135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a0928301359281019290925250919050565b6001600160a01b03169052565b15159052565b6001600160a01b039190911681526040602082018190526006908201526565786973747360d01b606082015260800190565b6001600160a01b039190911681526040602082018190526006908201526571756f72756d60d01b606082015260800190565b6001600160a01b039190911681526040602082018190526007908201526631b7bab73a32b960c91b606082015260800190565b6001600160a01b03919091168152604060208201819052600690820152651c995dd85c9960d21b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706d696e536861726573546f43726561746560781b606082015260800190565b6001600160a01b039190911681526040602082018190526007908201526670656e616c747960c81b606082015260800190565b6001600160a01b03919091168152604060208201819052601390820152726d696e4475726174696f6e496e426c6f636b7360681b606082015260800190565b6001600160a01b0391909116815260406020820181905260129082015271766f74696e67546f6b656e4164647265737360701b606082015260800190565b6001600160a01b03919091168152604060208201819052601190820152706d696e526577617264496e53686172657360781b606082015260800190565b6001600160a01b03919091168152604060208201819052601390820152726d696e426c6f636b73466f7250656e616c747960681b606082015260800190565b6001600160a01b03919091168152604060208201819052600a908201526968617350656e616c747960b01b606082015260800190565b6001600160a01b0391909116815260406020820181905260089082015267185c1c1c9bdd985b60c21b606082015260800190565b6001600160a01b03919091168152604060208201819052601290820152716d696e50656e616c7479496e53686172657360701b606082015260800190565b6001600160a01b039190911681526040602082018190526017908201527f6d6178536861726573506572546f6b656e486f6c646572000000000000000000606082015260800190565b901515815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60006101c082019050610bee828451610862565b6020830151610c006020840182610862565b506040830151610c13604084018261086f565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015181840152506101408084015181840152506101608084015181840152506101808084015181840152506101a080840151818401525092915050565b60405181810167ffffffffffffffff81118282101715610cb057fe5b60405291905056fea26469706673582212208cd2b4ef3afefba5f9579b770668b34ff7b4808f18bc7150c696e9fc2b41fc5764736f6c63430007020033";
	var linkReferences$f = {
	};
	var deployedLinkReferences$f = {
	};
	var TransactionalVoteSettingsContract = {
		_format: _format$f,
		contractName: contractName$f,
		sourceName: sourceName$f,
		abi: abi$f,
		bytecode: bytecode$f,
		deployedBytecode: deployedBytecode$f,
		linkReferences: linkReferences$f,
		deployedLinkReferences: deployedLinkReferences$f
	};

	const cache$a = {};
	const prefix$e = '@elastic-dao/sdk - TransactionalVoteSettings';
	const isTransactionalVoteSettings = thing => thing && typeof thing === 'object' && thing instanceof TransactionalVoteSettings;
	const validateIsTransactionalVoteSettings = thing => {
	  const message = 'not an TransactionalVoteSettings';
	  validate$1(isTransactionalVoteSettings(thing), {
	    message,
	    prefix: prefix$e
	  });
	};
	class TransactionalVoteSettings extends ElasticModel {
	  constructor(sdk, {
	    approval,
	    counter,
	    hasPenalty,
	    managerAddress,
	    maxSharesPerTokenHolder,
	    minBlocksForPenalty,
	    minDurationInBlocks,
	    minPenaltyInShares,
	    minRewardInShares,
	    minSharesToCreate,
	    penalty,
	    quorum,
	    reward,
	    settingsModelAddress,
	    votingTokenAddress
	  }) {
	    super(sdk);
	    this.id = managerAddress.toLowerCase();
	    cache$a[this.id] = {
	      approval,
	      counter,
	      hasPenalty,
	      managerAddress,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minDurationInBlocks,
	      minPenaltyInShares,
	      minRewardInShares,
	      minSharesToCreate,
	      penalty,
	      quorum,
	      reward,
	      settingsModelAddress,
	      votingTokenAddress
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$e
	    });
	    return sdk.contract({
	      abi: TransactionalVoteSettingsContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, managerAddress) {
	    validateIsAddress$1(managerAddress, {
	      prefix: prefix$e
	    });
	    const manager = this.managerContract(sdk, managerAddress);
	    const settingsModelAddress = await manager.settingsModelAddress();
	    const transactionalVoteSettingsModel = this.contract(sdk, settingsModelAddress);
	    const {
	      approval,
	      counter,
	      hasPenalty,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minDurationInBlocks,
	      minPenaltyInShares,
	      minRewardInShares,
	      minSharesToCreate,
	      penalty,
	      quorum,
	      reward,
	      votingTokenAddress
	    } = await transactionalVoteSettingsModel.deserialize(managerAddress);
	    return new TransactionalVoteSettings({
	      approval,
	      counter,
	      hasPenalty,
	      managerAddress,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minDurationInBlocks,
	      minPenaltyInShares,
	      minRewardInShares,
	      minSharesToCreate,
	      penalty,
	      quorum,
	      reward,
	      settingsModelAddress,
	      votingTokenAddress
	    });
	  }

	  static managerContract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$e
	    });
	    return sdk.contract({
	      abi: TransactionalVoteManagerContract.abi,
	      address
	    });
	  } // Getters


	  get address() {
	    return cache$a[this.id].settingsModelAddress;
	  }

	  get approval() {
	    return this.toBigNumber(cache$a[this.id].approval, 18);
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get counter() {
	    return this.toNumber(cache$a[this.id].counter);
	  }

	  get hasPenalty() {
	    return cache$a[this.id].hasPenalty;
	  }

	  get manager() {
	    return this.constructor.managerContract(this.sdk, this.managerAddress);
	  }

	  get managerAddress() {
	    return cache$a[this.id].managerAddress;
	  }

	  get maxSharesPerTokenHolder() {
	    return this.toBigNumber(cache$a[this.id].maxSharesPerTokenHolder, 18);
	  }

	  get minBlocksForPenalty() {
	    return this.toNumber(cache$a[this.id].minBlocksForPenalty);
	  }

	  get minDurationInBlocks() {
	    return this.toNumber(cache$a[this.id].minDurationInBlocks);
	  }

	  get minPenaltyInShares() {
	    return this.toBigNumber(cache$a[this.id].minPenaltyInShares, 18);
	  }

	  get minRewardInShares() {
	    return this.toBigNumber(cache$a[this.id].minRewardInShares, 18);
	  }

	  get minSharesToCreate() {
	    return this.toBigNumber(cache$a[this.id].minSharesToCreate, 18);
	  }

	  get penalty() {
	    return this.toBigNumber(cache$a[this.id].penalty, 18);
	  }

	  get quorum() {
	    return this.toBigNumber(cache$a[this.id].quorum, 18);
	  }

	  get reward() {
	    return this.toBigNumber(cache$a[this.id].reward, 18);
	  }

	  get votingTokenAddress() {
	    return cache$a[this.id].votingTokenAddress;
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.managerAddress);
	  }

	  toObject() {
	    const {
	      id
	    } = this;
	    const obj = { ...cache$a[id],
	      id
	    };
	    delete obj.settingsModelAddress;
	    return this.sanitize(obj);
	  }

	}

	var _format$g = "hh-sol-artifact-1";
	var contractName$g = "TransactionalVote";
	var sourceName$g = "src/modules/TransactionalVote/models/Vote.sol";
	var abi$g = [
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				},
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct TransactionalVoteSettings.Instance",
					name: "_settings",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "author",
							type: "address"
						},
						{
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "hasReachedQuorum",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isActive",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isApproved",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isExecuted",
							type: "bool"
						},
						{
							internalType: "bytes",
							name: "data",
							type: "bytes"
						},
						{
							internalType: "string",
							name: "proposal",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "abstainLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "baseGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "endOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "noLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorumLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "safeTxGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "startOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "value",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yesLambda",
							type: "uint256"
						},
						{
							internalType: "enum Operation",
							name: "operation",
							type: "uint8"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct TransactionalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						}
					],
					internalType: "struct TransactionalVote.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "uint256",
					name: "_index",
					type: "uint256"
				},
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct TransactionalVoteSettings.Instance",
					name: "_settings",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "author",
							type: "address"
						},
						{
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "hasReachedQuorum",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isActive",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isApproved",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isExecuted",
							type: "bool"
						},
						{
							internalType: "bytes",
							name: "data",
							type: "bytes"
						},
						{
							internalType: "string",
							name: "proposal",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "abstainLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "baseGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "endOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "noLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorumLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "safeTxGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "startOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "value",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yesLambda",
							type: "uint256"
						},
						{
							internalType: "enum Operation",
							name: "operation",
							type: "uint8"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct TransactionalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						}
					],
					internalType: "struct TransactionalVote.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$g = "";
	var deployedBytecode$g = "";
	var linkReferences$g = {
	};
	var deployedLinkReferences$g = {
	};
	var TransactionalVoteContract = {
		_format: _format$g,
		contractName: contractName$g,
		sourceName: sourceName$g,
		abi: abi$g,
		bytecode: bytecode$g,
		deployedBytecode: deployedBytecode$g,
		linkReferences: linkReferences$g,
		deployedLinkReferences: deployedLinkReferences$g
	};

	const cache$b = {};
	const prefix$f = '@elastic-dao/sdk - TransactionalVote';
	const isTransactionalVote = thing => thing && typeof thing === 'object' && thing instanceof TransactionalVote;
	const validateIsTransactionalVote = thing => {
	  const message = 'not an TransactionalVote';
	  validate$1(isTransactionalVote(thing), {
	    message,
	    prefix: prefix$f
	  });
	};
	class TransactionalVote extends ElasticModel {
	  constructor(sdk, {
	    uuid,
	    author,
	    to,
	    votingToken,
	    hasPenalty,
	    hasReachedQuorum,
	    isActive,
	    isApproved,
	    isExecuted,
	    data,
	    proposal,
	    abstainLambda,
	    approval,
	    baseGas,
	    endOnBlock,
	    index,
	    maxSharesPerTokenHolder,
	    minBlocksForPenalty,
	    minPenaltyInShares,
	    minRewardsInShares,
	    noLambda,
	    penalty,
	    quorum,
	    quorumLambda,
	    reward,
	    safeTxGas,
	    settings,
	    startOnBlock,
	    value,
	    voteModelAddress,
	    yesLambda,
	    operation
	  }) {
	    super(sdk);
	    this.id = `${settings.uuid}|${index}`.toLowerCase();
	    cache$b[this.id] = {
	      uuid,
	      author,
	      to,
	      votingToken,
	      hasPenalty,
	      hasReachedQuorum,
	      isActive,
	      isApproved,
	      isExecuted,
	      data,
	      proposal,
	      abstainLambda,
	      approval,
	      baseGas,
	      endOnBlock,
	      index,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minPenaltyInShares,
	      minRewardsInShares,
	      noLambda,
	      penalty,
	      quorum,
	      quorumLambda,
	      reward,
	      safeTxGas,
	      settings,
	      startOnBlock,
	      value,
	      voteModelAddress,
	      yesLambda,
	      operation
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$f
	    });
	    return sdk.contract({
	      abi: TransactionalVoteContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, index, settings) {
	    validateIsNumber$1(index, {
	      prefix: prefix$f
	    });
	    validateIsTransactionalVoteSettings(settings);
	    const voteModelAddress = await settings.manager.voteModelAddress();
	    const transactionalVoteModel = await this.contract(sdk, voteModelAddress);
	    const {
	      uuid,
	      author,
	      to,
	      votingToken,
	      hasPenalty,
	      hasReachedQuorum,
	      isActive,
	      isApproved,
	      isExecuted,
	      data,
	      proposal,
	      abstainLambda,
	      approval,
	      baseGas,
	      endOnBlock,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minPenaltyInShares,
	      minRewardsInShares,
	      noLambda,
	      penalty,
	      quorum,
	      quorumLambda,
	      reward,
	      safeTxGas,
	      startOnBlock,
	      value,
	      yesLambda,
	      operation
	    } = await transactionalVoteModel.deserialize(index, settings.toObject(false));
	    return new TransactionalVote({
	      uuid,
	      author,
	      to,
	      votingToken,
	      hasPenalty,
	      hasReachedQuorum,
	      isActive,
	      isApproved,
	      isExecuted,
	      data,
	      proposal,
	      abstainLambda,
	      approval,
	      baseGas,
	      endOnBlock,
	      index,
	      maxSharesPerTokenHolder,
	      minBlocksForPenalty,
	      minPenaltyInShares,
	      minRewardsInShares,
	      noLambda,
	      penalty,
	      quorum,
	      quorumLambda,
	      reward,
	      safeTxGas,
	      settings,
	      startOnBlock,
	      value,
	      voteModelAddress,
	      yesLambda,
	      operation
	    });
	  } // Getters


	  get abstainLambda() {
	    return this.toBigNumber(cache$b[this.id].abstainLambda, 18);
	  }

	  get address() {
	    return cache$b[this.id].voteModelAddress;
	  }

	  get approval() {
	    return this.toBigNumber(cache$b[this.id].approval, 18);
	  }

	  get author() {
	    return cache$b[this.id].author;
	  }

	  get baseGas() {
	    return this.toBigNumber(cache$b[this.id].baseGas, 18);
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get data() {
	    return cache$b[this.id].data;
	  }

	  get endOnBlock() {
	    return this.toNumber(cache$b[this.id].endOnBlock);
	  }

	  get hasPenalty() {
	    return cache$b[this.id].hasPenalty;
	  }

	  get hasReachedQuorum() {
	    return cache$b[this.id].hasReachedQuorum;
	  }

	  get index() {
	    return this.toNumber(cache$b[this.id].index);
	  }

	  get isActive() {
	    return cache$b[this.id].isActive;
	  }

	  get isApproved() {
	    return cache$b[this.id].isApproved;
	  }

	  get isExecuted() {
	    return cache$b[this.id].isExecuted;
	  }

	  get maxSharesPerTokenHolder() {
	    return this.toBigNumber(cache$b[this.id].maxSharesPerTokenHolder, 18);
	  }

	  get minBlocksForPenalty() {
	    return this.toNumber(cache$b[this.id].minBlocksForPenalty);
	  }

	  get minPenaltyInShares() {
	    return this.toBigNumber(cache$b[this.id].minPenaltyInShares, 18);
	  }

	  get minRewardInShares() {
	    return this.toBigNumber(cache$b[this.id].minRewardInShares, 18);
	  }

	  get noLambda() {
	    return this.toBigNumber(cache$b[this.id].noLambda, 18);
	  }

	  get operation() {
	    return cache$b[this.id].operation;
	  }

	  get penalty() {
	    return this.toBigNumber(cache$b[this.id].penalty, 18);
	  }

	  get proposal() {
	    return cache$b[this.id].proposal;
	  }

	  get quorum() {
	    return this.toBigNumber(cache$b[this.id].quorum, 18);
	  }

	  get quorumLambda() {
	    return this.toBigNumber(cache$b[this.id].quorumLambda, 18);
	  }

	  get reward() {
	    return this.toBigNumber(cache$b[this.id].reward, 18);
	  }

	  get safeTxGas() {
	    return this.toBigNumber(cache$b[this.id].safeTransactionGas);
	  }

	  get settings() {
	    return cache$b[this.id].settings;
	  }

	  get startOnBlock() {
	    return this.toNumber(cache$b[this.id].startOnBlock);
	  }

	  get to() {
	    return cache$b[this.id].to;
	  }

	  get value() {
	    return this.toBigNumber(cache$b[this.id].value, 18);
	  }

	  get votingToken() {
	    return cache$b[this.id].votingToken;
	  }

	  get yesLambda() {
	    return this.toBigNumber(cache$b[this.id].yesLambda, 18);
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.index, this.settings);
	  }

	  toObject(includeNested = true) {
	    const {
	      id,
	      settings
	    } = this;
	    const obj = { ...cache$b[id],
	      id,
	      settings: settings.toObject(false)
	    };

	    if (includeNested === false) {
	      delete obj.settings;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$h = "hh-sol-artifact-1";
	var contractName$h = "TransactionalVoteBallot";
	var sourceName$h = "src/modules/TransactionalVote/models/Ballot.sol";
	var abi$h = [
		{
			inputs: [
			],
			stateMutability: "nonpayable",
			type: "constructor"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_voter",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct TransactionalVoteSettings.Instance",
					name: "_settings",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "author",
							type: "address"
						},
						{
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "hasReachedQuorum",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isActive",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isApproved",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isExecuted",
							type: "bool"
						},
						{
							internalType: "bytes",
							name: "data",
							type: "bytes"
						},
						{
							internalType: "string",
							name: "proposal",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "abstainLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "baseGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "endOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "noLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorumLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "safeTxGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "startOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "value",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yesLambda",
							type: "uint256"
						},
						{
							internalType: "enum Operation",
							name: "operation",
							type: "uint8"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct TransactionalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						}
					],
					internalType: "struct TransactionalVote.Instance",
					name: "_vote",
					type: "tuple"
				}
			],
			name: "deserialize",
			outputs: [
				{
					components: [
						{
							internalType: "address",
							name: "voter",
							type: "address"
						},
						{
							internalType: "bool",
							name: "wasPenalized",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yna",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct TransactionalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "author",
									type: "address"
								},
								{
									internalType: "address",
									name: "to",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "hasReachedQuorum",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isActive",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isApproved",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isExecuted",
									type: "bool"
								},
								{
									internalType: "bytes",
									name: "data",
									type: "bytes"
								},
								{
									internalType: "string",
									name: "proposal",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "abstainLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "baseGas",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "endOnBlock",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "index",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "noLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorumLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "safeTxGas",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "startOnBlock",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "value",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "yesLambda",
									type: "uint256"
								},
								{
									internalType: "enum Operation",
									name: "operation",
									type: "uint8"
								},
								{
									components: [
										{
											internalType: "address",
											name: "managerAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "votingTokenAddress",
											type: "address"
										},
										{
											internalType: "bool",
											name: "hasPenalty",
											type: "bool"
										},
										{
											internalType: "uint256",
											name: "approval",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "counter",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "maxSharesPerTokenHolder",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minBlocksForPenalty",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minDurationInBlocks",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minPenaltyInShares",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minRewardInShares",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minSharesToCreate",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "penalty",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "quorum",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "reward",
											type: "uint256"
										}
									],
									internalType: "struct TransactionalVoteSettings.Instance",
									name: "settings",
									type: "tuple"
								}
							],
							internalType: "struct TransactionalVote.Instance",
							name: "vote",
							type: "tuple"
						}
					],
					internalType: "struct TransactionalVoteBallot.Instance",
					name: "record",
					type: "tuple"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_voter",
					type: "address"
				},
				{
					components: [
						{
							internalType: "address",
							name: "managerAddress",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "counter",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minDurationInBlocks",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minSharesToCreate",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						}
					],
					internalType: "struct TransactionalVoteSettings.Instance",
					name: "_settings",
					type: "tuple"
				},
				{
					components: [
						{
							internalType: "address",
							name: "author",
							type: "address"
						},
						{
							internalType: "address",
							name: "to",
							type: "address"
						},
						{
							internalType: "address",
							name: "votingTokenAddress",
							type: "address"
						},
						{
							internalType: "bool",
							name: "hasPenalty",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "hasReachedQuorum",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isActive",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isApproved",
							type: "bool"
						},
						{
							internalType: "bool",
							name: "isExecuted",
							type: "bool"
						},
						{
							internalType: "bytes",
							name: "data",
							type: "bytes"
						},
						{
							internalType: "string",
							name: "proposal",
							type: "string"
						},
						{
							internalType: "uint256",
							name: "abstainLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "approval",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "baseGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "endOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "index",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "maxSharesPerTokenHolder",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minBlocksForPenalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minPenaltyInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "minRewardInShares",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "noLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "penalty",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorum",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "quorumLambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "reward",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "safeTxGas",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "startOnBlock",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "value",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yesLambda",
							type: "uint256"
						},
						{
							internalType: "enum Operation",
							name: "operation",
							type: "uint8"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct TransactionalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						}
					],
					internalType: "struct TransactionalVote.Instance",
					name: "_vote",
					type: "tuple"
				}
			],
			name: "exists",
			outputs: [
				{
					internalType: "bool",
					name: "recordExists",
					type: "bool"
				}
			],
			stateMutability: "view",
			type: "function"
		},
		{
			inputs: [
				{
					components: [
						{
							internalType: "address",
							name: "voter",
							type: "address"
						},
						{
							internalType: "bool",
							name: "wasPenalized",
							type: "bool"
						},
						{
							internalType: "uint256",
							name: "lambda",
							type: "uint256"
						},
						{
							internalType: "uint256",
							name: "yna",
							type: "uint256"
						},
						{
							components: [
								{
									internalType: "address",
									name: "managerAddress",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "counter",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minDurationInBlocks",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minSharesToCreate",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								}
							],
							internalType: "struct TransactionalVoteSettings.Instance",
							name: "settings",
							type: "tuple"
						},
						{
							components: [
								{
									internalType: "address",
									name: "author",
									type: "address"
								},
								{
									internalType: "address",
									name: "to",
									type: "address"
								},
								{
									internalType: "address",
									name: "votingTokenAddress",
									type: "address"
								},
								{
									internalType: "bool",
									name: "hasPenalty",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "hasReachedQuorum",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isActive",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isApproved",
									type: "bool"
								},
								{
									internalType: "bool",
									name: "isExecuted",
									type: "bool"
								},
								{
									internalType: "bytes",
									name: "data",
									type: "bytes"
								},
								{
									internalType: "string",
									name: "proposal",
									type: "string"
								},
								{
									internalType: "uint256",
									name: "abstainLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "approval",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "baseGas",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "endOnBlock",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "index",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "maxSharesPerTokenHolder",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minBlocksForPenalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minPenaltyInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "minRewardInShares",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "noLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "penalty",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorum",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "quorumLambda",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "reward",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "safeTxGas",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "startOnBlock",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "value",
									type: "uint256"
								},
								{
									internalType: "uint256",
									name: "yesLambda",
									type: "uint256"
								},
								{
									internalType: "enum Operation",
									name: "operation",
									type: "uint8"
								},
								{
									components: [
										{
											internalType: "address",
											name: "managerAddress",
											type: "address"
										},
										{
											internalType: "address",
											name: "votingTokenAddress",
											type: "address"
										},
										{
											internalType: "bool",
											name: "hasPenalty",
											type: "bool"
										},
										{
											internalType: "uint256",
											name: "approval",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "counter",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "maxSharesPerTokenHolder",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minBlocksForPenalty",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minDurationInBlocks",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minPenaltyInShares",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minRewardInShares",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "minSharesToCreate",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "penalty",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "quorum",
											type: "uint256"
										},
										{
											internalType: "uint256",
											name: "reward",
											type: "uint256"
										}
									],
									internalType: "struct TransactionalVoteSettings.Instance",
									name: "settings",
									type: "tuple"
								}
							],
							internalType: "struct TransactionalVote.Instance",
							name: "vote",
							type: "tuple"
						}
					],
					internalType: "struct TransactionalVoteBallot.Instance",
					name: "record",
					type: "tuple"
				}
			],
			name: "serialize",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$h = "0x608060405234801561001057600080fd5b50610e51806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637fadabb214610046578063c28ad1441461005b578063c4e683da14610084575b600080fd5b6100596100543660046108ce565b6100a4565b005b61006e61006936600461086f565b6101c8565b60405161007b9190610baa565b60405180910390f35b61009761009236600461086f565b6101df565b60405161007b9190610bb5565b60808101515160a08201516101c0015182516040516100ed936100cd9390929091602001610b63565b6040516020818303038152906040528051906020012082602001516102c0565b60808101515160a08201516101c001518251604051610136936101169390929091602001610ae4565b6040516020818303038152906040528051906020012082604001516102e0565b60808101515160a08201516101c00151825160405161017f9361015f9390929091602001610b25565b6040516020818303038152906040528051906020012082606001516102e0565b60808101515160a08201516101c0015182516040516101c5936101a89390929091602001610aa3565b6040516020818303038152906040528051906020012060016102c0565b50565b60006101d58484846102f2565b90505b9392505050565b6101e761033c565b6001600160a01b03841681526080810183905260a0810182905261020c8484846102f2565b156101d85782516101c083015160405161024b926102309290918890602001610ae4565b60405160208183030381529060405280519060200120610312565b60408083019190915283516101c0840151915161028c9261027192918890602001610b63565b60405160208183030381529060405280519060200120610327565b151560208083019190915283516101c08401516040516102b493610230939291899101610b25565b60608201529392505050565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526005602052604090912055565b81516101c08201516040516000926101d592610271928890602001610aa3565b6000818152600560205260409020545b919050565b60009081526001602052604090205460ff1690565b6040518060c0016040528060006001600160a01b031681526020016000151581526020016000815260200160008152602001610376610388565b815260200161038361040b565b905290565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806103c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160001515815260200160001515815260200160001515815260200160001515815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000600181111561050d57fe5b8152602001610383610388565b80356001600160a01b038116811461032257600080fd5b8035801515811461032257600080fd5b600082601f830112610551578081fd5b813567ffffffffffffffff81111561056557fe5b610578601f8201601f1916602001610df7565b915080825283602082850101111561058f57600080fd5b8060208401602084013760009082016020015292915050565b80356002811061032257600080fd5b60006101c08083850312156105ca578182fd5b6105d381610df7565b9150506105df8261051a565b81526105ed6020830161051a565b60208201526105fe60408301610531565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101608083013581830152506101808083013581830152506101a080830135818301525092915050565b60006105608284031215610695578081fd5b6106a06103c0610df7565b90506106ab8261051a565b81526106b96020830161051a565b60208201526106ca6040830161051a565b60408201526106db60608301610531565b60608201526106ec60808301610531565b60808201526106fd60a08301610531565b60a082015261070e60c08301610531565b60c082015261071f60e08301610531565b60e08201526101008083013567ffffffffffffffff8082111561074157600080fd5b61074d86838701610541565b8385015261012092508285013591508082111561076957600080fd5b5061077685828601610541565b91830191909152506101408281013590820152610160808301359082015261018080830135908201526101a080830135908201526101c080830135908201526101e08083013590820152610200808301359082015261022080830135908201526102408083013590820152610260808301359082015261028080830135908201526102a080830135908201526102c080830135908201526102e0808301359082015261030080830135908201526103208083013590820152610340808301359082015261036080830135908201526103806108528184016105a8565b908201526103a0610865848483016105b7565b9082015292915050565b60008060006102008486031215610884578283fd5b61088d8461051a565b925061089c85602086016105b7565b91506101e084013567ffffffffffffffff8111156108b8578182fd5b6108c486828701610683565b9150509250925092565b6000602082840312156108df578081fd5b813567ffffffffffffffff808211156108f6578283fd5b90830190610260828603121561090a578283fd5b60405160c08101818110838211171561091f57fe5b60405261092b8361051a565b815261093960208401610531565b6020820152604083013560408201526060830135606082015261095f86608085016105b7565b608082015261024083013582811115610976578485fd5b61098287828601610683565b60a08301525095945050505050565b6001600160a01b03169052565b15159052565b60008151808452815b818110156109c9576020818501810151868301820152016109ad565b818111156109da5782602083870101525b50601f01601f19169290920160200192915050565b600281106109f957fe5b9052565b610a08828251610991565b6020810151610a1a6020840182610991565b506040810151610a2d604084018261099e565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b6001600160a01b039384168152602081019290925290911660408201526080606082018190526006908201526565786973747360d01b60a082015260c00190565b6001600160a01b03938416815260208101929092529091166040820152608060608201819052600690820152656c616d62646160d01b60a082015260c00190565b6001600160a01b0393841681526020810192909252909116604082015260806060820181905260039082015262796e6160e81b60a082015260c00190565b6001600160a01b03938416815260208101929092529091166040820152608060608201819052600c908201526b1dd85cd4195b985b1a5e995960a21b60a082015260c00190565b901515815260200190565b60006020825261028060018060a01b03845116602084015260208401511515604084015260408401516060840152606084015160808401526080840151610bff60a08501826109fd565b5060a08401516102608081860152610c1a8386018351610991565b60208201516102a0610c2e81880183610991565b604084015191506102c0610c4481890184610991565b606085015192506102e0610c5a818a018561099e565b60808601519350610300610c70818b018661099e565b60a08701519450610320610c86818c018761099e565b60c08801519550610c9b6103408c018761099e565b60e08801519550610cb06103608c018761099e565b6101008801519550610380610560818d0152610cd06107e08d01886109a4565b96506101208901516103a061027f198e8a0301818f0152610cf189836109a4565b98506101408b01516103c08f01526101608b01516103e08f01526101808b01516104008f01526101a08b01516104208f01526101c08b01516104408f01526101e08b01516104608f01526102008b01516104808f01526102208b01516104a08f01526102408b01516104c08f0152898b01516104e08f01528b8b01516105008f0152878b01516105208f0152868b01516105408f0152858b01516105608f0152848b01516105808f0152838b01516105a08f01526103408b01516105c08f01526103608b01516105e08f0152828b01519b50610dd16106008f018d6109ef565b808b01519b505050505050505050610ded6106208701856109fd565b9695505050505050565b60405181810167ffffffffffffffff81118282101715610e1357fe5b60405291905056fea264697066735822122019c1e7d10c34cc5b5786e07b34d693c9405f10a50be6ad2c5f55f0eb5cc9016c64736f6c63430007020033";
	var deployedBytecode$h = "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80637fadabb214610046578063c28ad1441461005b578063c4e683da14610084575b600080fd5b6100596100543660046108ce565b6100a4565b005b61006e61006936600461086f565b6101c8565b60405161007b9190610baa565b60405180910390f35b61009761009236600461086f565b6101df565b60405161007b9190610bb5565b60808101515160a08201516101c0015182516040516100ed936100cd9390929091602001610b63565b6040516020818303038152906040528051906020012082602001516102c0565b60808101515160a08201516101c001518251604051610136936101169390929091602001610ae4565b6040516020818303038152906040528051906020012082604001516102e0565b60808101515160a08201516101c00151825160405161017f9361015f9390929091602001610b25565b6040516020818303038152906040528051906020012082606001516102e0565b60808101515160a08201516101c0015182516040516101c5936101a89390929091602001610aa3565b6040516020818303038152906040528051906020012060016102c0565b50565b60006101d58484846102f2565b90505b9392505050565b6101e761033c565b6001600160a01b03841681526080810183905260a0810182905261020c8484846102f2565b156101d85782516101c083015160405161024b926102309290918890602001610ae4565b60405160208183030381529060405280519060200120610312565b60408083019190915283516101c0840151915161028c9261027192918890602001610b63565b60405160208183030381529060405280519060200120610327565b151560208083019190915283516101c08401516040516102b493610230939291899101610b25565b60608201529392505050565b600091825260016020526040909120805460ff1916911515919091179055565b60009182526005602052604090912055565b81516101c08201516040516000926101d592610271928890602001610aa3565b6000818152600560205260409020545b919050565b60009081526001602052604090205460ff1690565b6040518060c0016040528060006001600160a01b031681526020016000151581526020016000815260200160008152602001610376610388565b815260200161038361040b565b905290565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806103c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160001515815260200160001515815260200160001515815260200160001515815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000600181111561050d57fe5b8152602001610383610388565b80356001600160a01b038116811461032257600080fd5b8035801515811461032257600080fd5b600082601f830112610551578081fd5b813567ffffffffffffffff81111561056557fe5b610578601f8201601f1916602001610df7565b915080825283602082850101111561058f57600080fd5b8060208401602084013760009082016020015292915050565b80356002811061032257600080fd5b60006101c08083850312156105ca578182fd5b6105d381610df7565b9150506105df8261051a565b81526105ed6020830161051a565b60208201526105fe60408301610531565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101608083013581830152506101808083013581830152506101a080830135818301525092915050565b60006105608284031215610695578081fd5b6106a06103c0610df7565b90506106ab8261051a565b81526106b96020830161051a565b60208201526106ca6040830161051a565b60408201526106db60608301610531565b60608201526106ec60808301610531565b60808201526106fd60a08301610531565b60a082015261070e60c08301610531565b60c082015261071f60e08301610531565b60e08201526101008083013567ffffffffffffffff8082111561074157600080fd5b61074d86838701610541565b8385015261012092508285013591508082111561076957600080fd5b5061077685828601610541565b91830191909152506101408281013590820152610160808301359082015261018080830135908201526101a080830135908201526101c080830135908201526101e08083013590820152610200808301359082015261022080830135908201526102408083013590820152610260808301359082015261028080830135908201526102a080830135908201526102c080830135908201526102e0808301359082015261030080830135908201526103208083013590820152610340808301359082015261036080830135908201526103806108528184016105a8565b908201526103a0610865848483016105b7565b9082015292915050565b60008060006102008486031215610884578283fd5b61088d8461051a565b925061089c85602086016105b7565b91506101e084013567ffffffffffffffff8111156108b8578182fd5b6108c486828701610683565b9150509250925092565b6000602082840312156108df578081fd5b813567ffffffffffffffff808211156108f6578283fd5b90830190610260828603121561090a578283fd5b60405160c08101818110838211171561091f57fe5b60405261092b8361051a565b815261093960208401610531565b6020820152604083013560408201526060830135606082015261095f86608085016105b7565b608082015261024083013582811115610976578485fd5b61098287828601610683565b60a08301525095945050505050565b6001600160a01b03169052565b15159052565b60008151808452815b818110156109c9576020818501810151868301820152016109ad565b818111156109da5782602083870101525b50601f01601f19169290920160200192915050565b600281106109f957fe5b9052565b610a08828251610991565b6020810151610a1a6020840182610991565b506040810151610a2d604084018261099e565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b6001600160a01b039384168152602081019290925290911660408201526080606082018190526006908201526565786973747360d01b60a082015260c00190565b6001600160a01b03938416815260208101929092529091166040820152608060608201819052600690820152656c616d62646160d01b60a082015260c00190565b6001600160a01b0393841681526020810192909252909116604082015260806060820181905260039082015262796e6160e81b60a082015260c00190565b6001600160a01b03938416815260208101929092529091166040820152608060608201819052600c908201526b1dd85cd4195b985b1a5e995960a21b60a082015260c00190565b901515815260200190565b60006020825261028060018060a01b03845116602084015260208401511515604084015260408401516060840152606084015160808401526080840151610bff60a08501826109fd565b5060a08401516102608081860152610c1a8386018351610991565b60208201516102a0610c2e81880183610991565b604084015191506102c0610c4481890184610991565b606085015192506102e0610c5a818a018561099e565b60808601519350610300610c70818b018661099e565b60a08701519450610320610c86818c018761099e565b60c08801519550610c9b6103408c018761099e565b60e08801519550610cb06103608c018761099e565b6101008801519550610380610560818d0152610cd06107e08d01886109a4565b96506101208901516103a061027f198e8a0301818f0152610cf189836109a4565b98506101408b01516103c08f01526101608b01516103e08f01526101808b01516104008f01526101a08b01516104208f01526101c08b01516104408f01526101e08b01516104608f01526102008b01516104808f01526102208b01516104a08f01526102408b01516104c08f0152898b01516104e08f01528b8b01516105008f0152878b01516105208f0152868b01516105408f0152858b01516105608f0152848b01516105808f0152838b01516105a08f01526103408b01516105c08f01526103608b01516105e08f0152828b01519b50610dd16106008f018d6109ef565b808b01519b505050505050505050610ded6106208701856109fd565b9695505050505050565b60405181810167ffffffffffffffff81118282101715610e1357fe5b60405291905056fea264697066735822122019c1e7d10c34cc5b5786e07b34d693c9405f10a50be6ad2c5f55f0eb5cc9016c64736f6c63430007020033";
	var linkReferences$h = {
	};
	var deployedLinkReferences$h = {
	};
	var TransactionalVoteBallotContract = {
		_format: _format$h,
		contractName: contractName$h,
		sourceName: sourceName$h,
		abi: abi$h,
		bytecode: bytecode$h,
		deployedBytecode: deployedBytecode$h,
		linkReferences: linkReferences$h,
		deployedLinkReferences: deployedLinkReferences$h
	};

	const cache$c = {};
	const prefix$g = '@elastic-dao/sdk - TransactionalVoteBallot';
	class TransactionalVoteBallot extends ElasticModel {
	  constructor(sdk, {
	    ballotModelAddress,
	    lambda,
	    settings,
	    vote,
	    voter,
	    wasPenalized,
	    yna
	  }) {
	    super(sdk);
	    this.id = `${settings.uuid}|${vote.index}|${voter}`.toLowerCase();
	    cache$c[this.id] = {
	      ballotModelAddress,
	      lambda,
	      settings,
	      vote,
	      voter,
	      wasPenalized,
	      yna
	    };
	  } // Class functions


	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$g
	    });
	    return sdk.contract({
	      abi: TransactionalVoteBallotContract.abi,
	      address
	    });
	  }

	  static async deserialize(sdk, voter, settings, vote) {
	    validateIsAddress$1(voter, {
	      prefix: prefix$g
	    });
	    validateIsTransactionalVoteSettings(settings);
	    validateIsTransactionalVote(vote);
	    const ballotModelAddress = await settings.manager.ballotModelAddress();
	    const transactionalVoteBallotModel = this.contract(sdk, ballotModelAddress);
	    const {
	      lambda,
	      wasPenalized,
	      yna
	    } = await transactionalVoteBallotModel.deserialize(voter, settings.toObject(false), vote.toObject(false));
	    return new TransactionalVoteBallot({
	      ballotModelAddress,
	      lambda,
	      settings,
	      vote,
	      voter,
	      wasPenalized,
	      yna
	    });
	  } // Getters


	  get address() {
	    return cache$c[this.id].ballotModelAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  get lambda() {
	    return this.toBigNumber(cache$c[this.id].lambda);
	  }

	  get settings() {
	    return cache$c[this.id].settings;
	  }

	  get vote() {
	    return cache$c[this.id].vote;
	  }

	  get voter() {
	    return cache$c[this.id].voter;
	  }

	  get wasPenalized() {
	    return cache$c[this.id].wasPenalized;
	  }

	  get yna() {
	    return this.toNumber(cache$c[this.id].yna);
	  } // Instance functions


	  async refresh() {
	    return this.constructor.deserialize(this.sdk, this.voter, this.settings, this.vote);
	  }

	  toObject(includeNested = true) {
	    const {
	      id,
	      settings,
	      vote
	    } = this;
	    const obj = { ...cache$c[id],
	      id,
	      settings: settings.toObject(false),
	      vote: vote.toObject(false)
	    };
	    delete obj.ballotModelAddress;

	    if (includeNested === false) {
	      delete obj.settings;
	      delete obj.vote;
	    }

	    return this.sanitize(obj);
	  }

	}

	var _format$i = "hh-sol-artifact-1";
	var contractName$i = "TransactionalVoteFactory";
	var sourceName$i = "src/modules/TransactionalVote/Factory.sol";
	var abi$i = [
		{
			anonymous: false,
			inputs: [
				{
					indexed: true,
					internalType: "address",
					name: "managerAddress",
					type: "address"
				}
			],
			name: "ManagerDeployed",
			type: "event"
		},
		{
			inputs: [
				{
					internalType: "address",
					name: "_ballotModelAddress",
					type: "address"
				},
				{
					internalType: "address payable",
					name: "_elasticDAOAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_settingsModelAddress",
					type: "address"
				},
				{
					internalType: "address payable",
					name: "_vaultAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_voteModelAddress",
					type: "address"
				},
				{
					internalType: "address",
					name: "_votingTokenAddress",
					type: "address"
				},
				{
					internalType: "bool",
					name: "_hasPenalty",
					type: "bool"
				},
				{
					internalType: "uint256[10]",
					name: "_settings",
					type: "uint256[10]"
				}
			],
			name: "deployManager",
			outputs: [
			],
			stateMutability: "nonpayable",
			type: "function"
		}
	];
	var bytecode$i = "0x608060405234801561001057600080fd5b506130e4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635844fa0414610030575b600080fd5b61004361003e366004610193565b610045565b005b60008887878760405161005790610186565b610064949392919061029c565b604051809103906000f080158015610080573d6000803e3d6000fd5b50604051631ac0ab5d60e31b81529091506001600160a01b0382169063d6055ae8906100b4908790879087906004016102c7565b600060405180830381600087803b1580156100ce57600080fd5b505af11580156100e2573d6000803e3d6000fd5b5050604051630181bb0b60e01b81528a92506001600160a01b0383169150630181bb0b90610114908590600401610316565b600060405180830381600087803b15801561012e57600080fd5b505af1158015610142573d6000803e3d6000fd5b50506040516001600160a01b03851692507f5caf3d7ccd76ce2fb019663b95a98e88bcc4fe4330e687c78ea5882daccab9ff9150600090a250505050505050505050565b612d378061037883390190565b600080600080600080600080610220808a8c0312156101b0578485fd5b89356101bb8161035f565b985060208a8101356101cc8161035f565b985060408b01356101dc8161035f565b975060608b01356101ec8161035f565b965060808b01356101fc8161035f565b955060a08b013561020c8161035f565b945060c08b01358015158114610220578485fd5b935060ff8b018c13610230578283fd5b604051610140810181811067ffffffffffffffff8211171561024e57fe5b6040528060e08d01848e018f1015610264578586fd5b8594505b600a851015610287578035825260019490940193908301908301610268565b50508093505050509295985092959890939650565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b0384168152821515602080830191909152610180820190604083018460005b600a81101561030a578151835291830191908301906001016102ed565b50505050949350505050565b6001600160a01b039190911681526040602082018190526017908201527f5472616e73616374696f6e616c566f74654d6f64756c65000000000000000000606082015260800190565b6001600160a01b038116811461037457600080fd5b5056fe60806040523480156200001157600080fd5b5060405162002d3738038062002d37833981016040819052620000349162000090565b600080546001600160a01b03199081166001600160a01b03968716179091556003805460018054841696881696909617909555600280549092169386169390931790556001600160a81b03199092169190921617905562000110565b60008060008060808587031215620000a6578384fd5b8451620000b381620000f7565b6020860151909450620000c681620000f7565b6040860151909350620000d981620000f7565b6060860151909250620000ec81620000f7565b939692955090935050565b6001600160a01b03811681146200010d57600080fd5b50565b612c1780620001206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063743812131161008c578063c52ab77811610066578063c52ab7781461017c578063d6055ae81461018f578063e1faaae8146101a2578063f698da25146101aa576100cf565b8063743812131461015757806385b4bb531461015f578063affed0e014610174576100cf565b8063083964b1146100d45780630c09135b146100e9578063158ef93e146100fc57806323fc6e991461011a578063430bf08a1461013a578063478eadbe1461014f575b600080fd5b6100e76100e2366004612002565b6101b2565b005b6100e76100f7366004611f4e565b61067f565b610104610a06565b604051610111919061238c565b60405180910390f35b61012d610128366004611c00565b610a16565b6040516101119190612397565b610142610dd4565b6040516101119190612324565b610142610de3565b610142610df2565b610167610e01565b6040516101119190612b01565b61012d610e16565b61010461018a366004611cbb565b610e1c565b6100e761019d366004611b56565b610f5c565b61014261110a565b61012d611119565b6101ba611823565b6101c261111f565b90506101ce83826111a8565b6101f35760405162461bcd60e51b81526004016101ea906129b1565b60405180910390fd5b6101fb6118a6565b6102058483611234565b60c08101519091501561022a5760405162461bcd60e51b81526004016101ea906129e8565b8060a0015161024b5760405162461bcd60e51b81526004016101ea90612909565b610254816112c2565b6102705760405162461bcd60e51b81526004016101ea90612909565b600383106102905760405162461bcd60e51b81526004016101ea906127d5565b6040808201519051633e174aaf60e01b81526000906001600160a01b03831690633e174aaf906102c4903390600401612324565b60206040518083038186803b1580156102dc57600080fd5b505afa1580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103149190611f36565b61032084015160405163046deee960e01b81529192506000916001600160a01b0385169163046deee99161034c913391600401612338565b60206040518083038186803b15801561036457600080fd5b505afa158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c9190611f36565b9050818110156103aa578091505b81846101e0015110156103c057836101e0015191505b856103df576103d48461036001518361134b565b610360850152610418565b8560011415610402576103f78461026001518361134b565b610260850152610418565b6104118461014001518361134b565b6101408501525b600061043c61043186610360015187610260015161134b565b86610140015161134b565b90506000846001600160a01b03166378b61f226040518163ffffffff1660e01b815260040160206040518083038186803b15801561047957600080fd5b505afa15801561048d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b19190611f36565b905060006104c482886102a00151611370565b90508083106104d557600160808801525b60006104e683896101600151611370565b90508084106104f757600160c08901525b6104ff6119ba565b608081018a905260a081018990523381526040808201889052606082018c90526000549051633fd6d5d960e11b81526001600160a01b0390911690637fadabb29061054e908490600401612a97565b600060405180830381600087803b15801561056857600080fd5b505af115801561057c573d6000803e3d6000fd5b5050600354604051630428f64760e31b81526001600160a01b039091169250632147b23891506105b0908c90600401612b10565b600060405180830381600087803b1580156105ca57600080fd5b505af11580156105de573d6000803e3d6000fd5b50505050876001600160a01b031663528c198a336106018a8d6102e00151611370565b6040518363ffffffff1660e01b815260040161061e929190612338565b602060405180830381600087803b15801561063857600080fd5b505af115801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190611cef565b50505050505050505050505050565b610687611823565b61068f61111f565b905061069b83826111a8565b6106b75760405162461bcd60e51b81526004016101ea906129b1565b6106bf6118a6565b6106c98483611234565b60c0810151909150156106ee5760405162461bcd60e51b81526004016101ea90612842565b60a0810151156107105760405162461bcd60e51b81526004016101ea90612966565b6080810151156107325760405162461bcd60e51b81526004016101ea90612522565b80606001516107535760405162461bcd60e51b81526004016101ea90612790565b6000805460408301516001600160a01b03909116915b85518110156109fd57826001600160a01b031663c28ad14487838151811061078d57fe5b602002602001015187876040518463ffffffff1660e01b81526004016107b593929190612351565b60206040518083038186803b1580156107cd57600080fd5b505afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190611cef565b6109eb576108116119ba565b6080810186905260a08101859052865187908390811061082d57fe5b6020908102919091018101516001600160a01b03908116835260019183019190915287516000916108ed9190861690633e174aaf908b908790811061086e57fe5b60200260200101516040518263ffffffff1660e01b81526004016108929190612324565b60206040518083038186803b1580156108aa57600080fd5b505afa1580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190611f36565b876102800151611370565b604080840182905251633fd6d5d960e11b81529091506001600160a01b03861690637fadabb290610922908590600401612a97565b600060405180830381600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b50505050836001600160a01b031663ee7a7c0489858151811061096f57fe5b6020026020010151836040518363ffffffff1660e01b8152600401610995929190612338565b602060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190611cef565b5050505b6109f681600161134b565b9050610769565b50505050505050565b600354600160a01b900460ff1681565b600354600090600160a01b900460ff16610a425760405162461bcd60e51b81526004016101ea90612447565b610a4a611823565b610a5261111f565b6020810151610140820151604051633e174aaf60e01b815292935090916001600160a01b03831690633e174aaf90610a8e903390600401612324565b60206040518083038186803b158015610aa657600080fd5b505afa158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade9190611f36565b1015610afc5760405162461bcd60e51b81526004016101ea906125f9565b8160e00151610b0b85436113a5565b1015610b295760405162461bcd60e51b81526004016101ea9061269b565b606060008a11610b4b5760405162461bcd60e51b81526004016101ea9061257f565b80604051602001610b5c9190612308565b6040516020818303038152906040528051906020012089604051602001610b839190612308565b604051602081830303815290604052805190602001201415610bb75760405162461bcd60e51b81526004016101ea9061257f565b6003546001600160a01b0316610bcb6118a6565b6103a08101859052600061014082018190526101608201819052338252610180820189905261010082018c90526101a0820188905260408601511515606083015260808083018290528601516101c0830152600160a080840182905260c0808501849052908801516101e08501528701516102008401526102608301919091526103808201908b90811115610c5c57fe5b90816001811115610c6957fe5b9052506101608501516102808201526101808501516102a08201526101a08501516102e08201526103008101899052436103208201526001600160a01b03808e1660208084019190915261034083018e90528601518116604080840191909152600061036084015251630428f64760e31b815290831690632147b23890610cf4908490600401612b10565b600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505060015460405163e5910ae760e01b81526001600160a01b03909116925063e5910ae79150610d56903090600401612324565b600060405180830381600087803b158015610d7057600080fd5b505af1158015610d84573d6000803e3d6000fd5b505050507f460e77e3c8455201c4722742a8a654c959331ac344ab1b2ecefdb2b500f129c8816101c00151604051610dbc9190612397565b60405180910390a15050505050979650505050505050565b6002546001600160a01b031681565b6001546001600160a01b031681565b6000546001600160a01b031681565b610e09611823565b610e1161111f565b905090565b60045481565b6000610e26611823565b610e2e61111f565b9050610e386118a6565b610e428483611234565b90508060e0015115610e665760405162461bcd60e51b81526004016101ea906126e9565b8060c00151610e875760405162461bcd60e51b81526004016101ea90612a45565b600160e0820152600354604051630428f64760e31b81526001600160a01b03909116908190632147b23890610ec0908590600401612b10565b600060405180830381600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b5050506020830151610340840151610100850151610380860151610300870151610180880151600254610f2e97508d908f906001600160a01b03166113e7565b935083610f4d5760405162461bcd60e51b81526004016101ea906128d2565b600193505050505b9392505050565b600354600160a01b900460ff1615610f865760405162461bcd60e51b81526004016101ea90612733565b6001546001600160a01b0316610f9a611823565b3081526001600160a01b038516602082015283151560408201528260006020020151606082015260006080820152826001602002015160a0820152826002602002015160c0820152826003602002015160e082015282600460200201516101008201528260056020020151610120820152826006602002015161014082015282600760200201516101608201528260086020020151610180820152826009602090810291909101516101a0830152604051611079917f035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d47499130910161240f565b60408051601f1981840301815290829052805160209091012060055563e416649960e01b81526001600160a01b0383169063e4166499906110be908490600401612b01565b600060405180830381600087803b1580156110d857600080fd5b505af11580156110ec573d6000803e3d6000fd5b50506003805460ff60a01b1916600160a01b17905550505050505050565b6003546001600160a01b031681565b60055481565b611127611823565b60015460405163332a4d0960e01b81526001600160a01b039091169063332a4d0990611157903090600401612324565b6101c06040518083038186803b15801561117057600080fd5b505afa158015611184573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190611d0b565b600354604051634a52ae5960e01b81526000916001600160a01b031690634a52ae59906111db9086908690600401612b23565b60206040518083038186803b1580156111f357600080fd5b505afa158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b9190611cef565b90505b92915050565b61123c6118a6565b600354604051631d97355360e21b81526001600160a01b039091169063765cd54c9061126e9086908690600401612b23565b60006040518083038186803b15801561128657600080fd5b505afa15801561129a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261122b9190810190611d27565b600043826101a001511161134257600060a0830152600354604051630428f64760e31b81526001600160a01b0390911690632147b23890611307908590600401612b10565b600060405180830381600087803b15801561132157600080fd5b505af1158015611335573d6000803e3d6000fd5b5050505060009050611346565b5060015b919050565b60008282018381101561122b5760405162461bcd60e51b81526004016101ea906124eb565b6000670de0b6b3a76400006113966113888585611521565b6706f05b59d3b2000061134b565b8161139d57fe5b049392505050565b600061122b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061155b565b60008060606113fd8c8c8c8c8c8c8c8c8c611587565b905061140c600454600161134b565b508051602090910120905061142b603f6040890204610bb88901611633565b5a101561144a5760405162461bcd60e51b81526004016101ea90612645565b60005a905061146d8c8c8c8c8a15611462578c611468565b6109c45a035b61164a565b9250611479815a6113a5565b90506000861561149357611490828989898961169e565b90505b83156114d7577f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e83826040516114ca929190612426565b60405180910390a1611511565b7f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d238382604051611508929190612426565b60405180910390a15b5050509998505050505050505050565b6000826115305750600061122e565b8282028284828161153d57fe5b041461122b5760405162461bcd60e51b81526004016101ea90612891565b6000818484111561157f5760405162461bcd60e51b81526004016101ea9190612434565b505050900390565b606060007fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d860001b8b8b8b805190602001208b8b8b8b8b8b6004546040516020016115dc9b9a999897969594939291906123a0565b60408051601f1981840301815290829052805160209182012060055490935061161492601960f81b92600160f81b92918691016122de565b6040516020818303038152906040529150509998505050505050505050565b600081831015611643578161122b565b5090919050565b60008083600181111561165957fe5b14156116725761166b8686868561175f565b9050611695565b600183600181111561168057fe5b14156116915761166b868584611777565b5060005b95945050505050565b6000806001600160a01b038316156116b657826116b8565b325b90506001600160a01b038416611732576116e96116d5888861134b565b3a87106116e2573a6116e4565b865b611521565b6040519092506001600160a01b0382169083156108fc029084906000818181858888f1935050505061172d5760405162461bcd60e51b81526004016101ea9061249c565b611755565b61173f6116e2888861134b565b915061174c84828461178d565b61175557600080fd5b5095945050505050565b6000806000845160208601878987f195945050505050565b60008060008451602086018786f4949350505050565b6000606083836040516024016117a4929190612338565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1781528151919250600091829182896127105a03f16040513d81016040523d6000823e3d8015611806576020811461180e5760009450611818565b829450611818565b8151158315171594505b505050509392505050565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806103c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600060018111156119a857fe5b81526020016119b5611823565b905290565b6040518060c0016040528060006001600160a01b0316815260200160001515815260200160008152602001600081526020016119f4611823565b81526020016119b56118a6565b803561134681612bae565b805161134681612bae565b805161134681612bc6565b600082601f830112611a32578081fd5b8151611a45611a4082612b5c565b612b38565b9150808252836020828501011115611a5c57600080fd5b611a6d816020840160208601612b7e565b5092915050565b803561134681612bd4565b805161134681612bd4565b60006101c0808385031215611a9d578182fd5b611aa681612b38565b915050611ab282611a0c565b8152611ac060208301611a0c565b6020820152611ad160408301611a17565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101608083015181830152506101808083015181830152506101a080830151818301525092915050565b6000806000610180808587031215611b6c578384fd5b8435611b7781612bae565b9350602085810135611b8881612bc6565b9350605f86018713611b98578283fd5b604051610140810181811067ffffffffffffffff82111715611bb657fe5b8060405250806040880189858a011115611bce578586fd5b8594505b600a851015611bf1578035825260019490940193908301908301611bd2565b50508093505050509250925092565b600080600080600080600060e0888a031215611c1a578485fd5b8735611c2581612bae565b965060208801359550604088013567ffffffffffffffff811115611c47578586fd5b8801601f81018a13611c57578586fd5b8035611c65611a4082612b5c565b8181528b6020838501011115611c79578788fd5b816020840160208301379081016020019690965250611c9a60608901611a74565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600060608486031215611ccf578081fd5b8335611cda81612bae565b95602085013595506040909401359392505050565b600060208284031215611d00578081fd5b815161122b81612bc6565b60006101c08284031215611d1d578081fd5b61122b8383611a8a565b600060208284031215611d38578081fd5b815167ffffffffffffffff80821115611d4f578283fd5b908301906105608286031215611d63578283fd5b611d6e6103c0612b38565b611d7783611a0c565b8152611d8560208401611a0c565b6020820152611d9660408401611a0c565b6040820152611da760608401611a17565b6060820152611db860808401611a17565b6080820152611dc960a08401611a17565b60a0820152611dda60c08401611a17565b60c0820152611deb60e08401611a17565b60e08201526101008084015183811115611e03578586fd5b611e0f88828701611a22565b8284015250506101208084015183811115611e28578586fd5b611e3488828701611a22565b91830191909152506101408381015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260808401519082015261028080840151908201526102a080840151908201526102c080840151908201526102e0808401519082015261030080840151908201526103208084015190820152610340808401519082015261036080840151908201526103809150611f12828401611a7f565b828201526103a09150611f2786838501611a8a565b91810191909152949350505050565b600060208284031215611f47578081fd5b5051919050565b60008060408385031215611f60578182fd5b8235915060208084013567ffffffffffffffff80821115611f7f578384fd5b818601915086601f830112611f92578384fd5b813581811115611f9e57fe5b8381029150611fae848301612b38565b8181528481019084860184860187018b1015611fc8578788fd5b8795505b83861015611ff157611fdd81611a01565b835260019590950194918601918601611fcc565b508096505050505050509250929050565b60008060408385031215612014578182fd5b50508035926020909101359150565b6001600160a01b03169052565b15159052565b6000815180845261204e816020860160208601612b7e565b601f01601f19169290920160200192915050565b6002811061206c57fe5b9052565b61207b828251612023565b602081015161208d6020840182612023565b5060408101516120a06040840182612030565b50606081810151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a090810151910152565b6000610560612126848451612023565b60208301516121386020860182612023565b50604083015161214b6040860182612023565b50606083015161215e6060860182612030565b5060808301516121716080860182612030565b5060a083015161218460a0860182612030565b5060c083015161219760c0860182612030565b5060e08301516121aa60e0860182612030565b506101008084015182828701526121c383870182612036565b9250505061012080840151858303828701526121df8382612036565b6101408681015190880152610160808701519088015261018080870151908801526101a080870151908801526101c080870151908801526101e08087015190880152610200808701519088015261022080870151908801526102408087015190880152610260808701519088015261028080870151908801526102a080870151908801526102c080870151908801526102e08087015190880152610300808701519088015261032080870151908801526103408087015190880152610360808701519088015261038080870151919450925090506122bf82870182612062565b50506103a0808401516122d482870182612070565b5090949350505050565b6001600160f81b031994851681529290931660018301526002820152602281019190915260420190565b6000825161231a818460208701612b7e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0384168152600061020061236f6020840186612070565b806101e084015261238281840185612116565b9695505050505050565b901515815260200190565b90815260200190565b8b81526001600160a01b038b81166020830152604082018b9052606082018a90526101608201906123d4608084018b612062565b60a083019890985260c082019690965260e0810194909452918516610100840152909316610120820152610140019190915295945050505050565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b60006020825261122b6020830184612036565b60208082526035908201527f456c617374696344414f3a205472616e73616374696f6e616c566f7465204d616040820152741b9859d95c881b9bdd081a5b9a5d1a585b1a5e9959605a1b606082015260800190565b6020808252602f908201527f456c61737469632044414f3a20436f756c64206e6f742070617920676173206360408201526e37b9ba39903bb4ba34103a37b5b2b760891b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603b908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a65206120766f60408201527f746520746861742068617320726561636865642071756f72756d2e0000000000606082015260800190565b60208082526054908201527f456c617374696344414f3a205472616e73616374696f6e206d7573742065697460408201527f686572207472616e736665722076616c7565206f722063616c6c20616e6f746860608201527332b91031b7b73a3930b1ba10333ab731ba34b7b760611b608082015260a00190565b6020808252602c908201527f456c617374696344414f3a204e6f7420656e6f7567682073686172657320746f60408201526b2063726561746520766f746560a01b606082015260800190565b60208082526036908201527f456c617374696344414f3a204e6f7420656e6f7567682067617320746f20657860408201527532b1baba329039b0b332903a3930b739b0b1ba34b7b760511b606082015260800190565b6020808252602e908201527f456c617374696344414f3a205472616e73616374696f6e616c566f746520706560408201526d1c9a5bd9081d1bdbc81cda1bdc9d60921b606082015260800190565b6020808252602a908201527f456c617374696344414f3a20566f74652068617320616c7265616479206265656040820152691b88195e1958dd5d195960b21b606082015260800190565b6020808252603b908201527f456c617374696344414f3a205472616e73616374696f6e616c20566f7465204d60408201527f616e6167657220616c726561647920696e697469616c697a65642e0000000000606082015260800190565b60208082526025908201527f456c617374696344414f3a205468697320766f746520686173206e6f2070656e60408201526430b63a3c9760d91b606082015260800190565b60208082526047908201527f456c617374696344414f3a20496e76616c6964205f796e612076616c75652e2060408201527f557365203020666f72207965732c203120666f72206e6f2c203220666f7220616060820152663139ba30b4b71760c91b608082015260a00190565b6020808252602f908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a65206120766f60408201526e3a32903a3430ba103830b9b9b2b21760891b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601e908201527f456c617374696344414f3a205472616e73616374696f6e204661696c65640000604082015260600190565b60208082526039908201527f456c617374696344414f3a205472616e73616374696f6e616c566f746520697360408201527f206e6f7420616374697665206f722068617320656e6465642e00000000000000606082015260800190565b6020808252602b908201527f456c617374696344414f3a2043616e6e6f742070656e616c697a6520616e206160408201526a31ba34bb32903b37ba329760a91b606082015260800190565b6020808252601c908201527f456c617374696344414f3a20496e76616c696420766f74652069642e00000000604082015260600190565b60208082526038908201527f456c617374696344414f3a205472616e73616374696f6e616c566f746520686160408201527f7320616c7265616479206265656e20617070726f7665642e0000000000000000606082015260800190565b60208082526032908201527f456c617374696344414f3a2043616e206e6f742063616c6c20756e6c657373206040820152711d9bdd19481a5cc81cdd58d8d95cdcd99d5b60721b606082015260800190565b60006020825260018060a01b03835116602083015260208301511515604083015260408301516060830152606083015160808301526080830151612ade60a0840182612070565b5060a083015161026083810152612af9610280840182612116565b949350505050565b6101c0810161122e8284612070565b60006020825261122b6020830184612116565b8281526101e08101610f556020830184612070565b60405181810167ffffffffffffffff81118282101715612b5457fe5b604052919050565b600067ffffffffffffffff821115612b7057fe5b50601f01601f191660200190565b60005b83811015612b99578181015183820152602001612b81565b83811115612ba8576000848401525b50505050565b6001600160a01b0381168114612bc357600080fd5b50565b8015158114612bc357600080fd5b60028110612bc357600080fdfea2646970667358221220938ba14a2c2f7adb9289b78e2e599aaa1ab6124dc639fe6592b2a503df90774b64736f6c63430007020033a2646970667358221220b347b23c33c9c77154b0dc18fe88ec3d55a9f3e5949d10cc6e3765c89de6b37964736f6c63430007020033";
	var deployedBytecode$i = "";
	var linkReferences$i = {
	};
	var deployedLinkReferences$i = {
	};
	var TransactionalVoteFactoryContract = {
		_format: _format$i,
		contractName: contractName$i,
		sourceName: sourceName$i,
		abi: abi$i,
		bytecode: bytecode$i,
		deployedBytecode: deployedBytecode$i,
		linkReferences: linkReferences$i,
		deployedLinkReferences: deployedLinkReferences$i
	};

	const prefix$h = '@elastic-dao/sdk - TransactionalVoteManager';
	class TransactionalVoteManager extends Base {
	  constructor(sdk, address) {
	    super(sdk);
	    validateIsAddress$1(address, {
	      prefix: prefix$h
	    });
	    this.address = address;
	  }

	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$h
	    });
	    return sdk.contract({
	      abi: TransactionalVoteManagerContract.abi,
	      address
	    });
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  async applyPenalty(index, addressesToPenalize, overrides = {}) {
	    validateIsNumber$1(index, {
	      prefix: prefix$h
	    });

	    for (let i = 0; i < addressesToPenalize.length; i += 1) {
	      validateIsAddress$1(addressesToPenalize[i], {
	        prefix: prefix$h
	      });
	    }

	    const manager = await this.contract();
	    await manager.applyPenalty(index, addressesToPenalize, this.sanitizeOverrides(overrides));
	    return true;
	  }

	  async ballotModelAddress() {
	    const manager = await this.contract;
	    return manager.ballotModelAddress();
	  }

	  async castBallot(index, yna, overrides = {}) {
	    validateIsNumber$1(index, {
	      prefix: prefix$h
	    });
	    validateIsNumber$1(yna, {
	      prefix: prefix$h
	    });
	    const manager = await this.contract;
	    await manager.castBallot(index, yna, this.sanitizeOverrides(overrides));
	    return true; // TODO: Return ballot model
	  }

	  async createVote(to, value, data, operation, safeTxGas, baseGas, endOnBlock, overrides = {}) {
	    validateIsBigNumber$1(value, {
	      prefix: prefix$h
	    });
	    validateIsNumber$1(safeTxGas, {
	      prefix: prefix$h
	    });
	    validateIsNumber$1(baseGas, {
	      prefix: prefix$h
	    });
	    validateIsNumber$1(endOnBlock, {
	      prefix: prefix$h
	    });
	    validateIsString$1(operation, {
	      prefix: prefix$h
	    });
	    const manager = await this.contract;
	    await manager.createVote(to, this.toEthersBigNumber(value, 18), data, operation, safeTxGas, baseGas, endOnBlock, this.sanitizeOverrides(overrides));
	    return true; // TODO: Return vote model
	  }

	  async domainSeparator() {
	    const manager = await this.contract;
	    return manager.domainSeparator();
	  }

	  async execute(gasToken, gasPrice, index, overrides = {}) {
	    const manager = await this.contract;
	    validateIsAddress$1(gasToken, {
	      prefix: prefix$h
	    });
	    validateIsNumber$1(gasPrice, {
	      prefix: prefix$h
	    });
	    validateIsNumber$1(index, {
	      prefix: prefix$h
	    });
	    return manager.execute(gasToken, gasPrice, index, this.sanitizeOverrides(overrides));
	  }

	  async getSettings() {
	    return TransactionalVoteSettings.deserialize(this.sdk, this);
	  }

	  async initialized() {
	    const manager = await this.contract;
	    return manager.initialized();
	  }

	  async nonce() {
	    const manager = await this.contract;
	    return manager.nonce();
	  }

	  async settingsModelAddress() {
	    const manager = await this.contract;
	    return manager.settingsModelAddress();
	  }

	  async vaultAddress() {
	    const manager = await this.contract;
	    return manager.vaultAddress();
	  }

	  async voteModelAddress() {
	    const manager = await this.contract;
	    return manager.voteModelAddress();
	  }

	}

	const prefix$i = '@elastic-dao/sdk - TransactionalVoteFactory';
	class TransactionalVoteFactory extends Base {
	  static contract(sdk, address) {
	    validateIsAddress$1(address, {
	      prefix: prefix$i
	    });
	    return sdk.contract({
	      abi: TransactionalVoteFactoryContract.abi,
	      address
	    });
	  }

	  get address() {
	    return this.sdk.env.elasticDAO.modules.transactionalVote.factoryAddress;
	  }

	  get contract() {
	    return this.constructor.contract(this.sdk, this.address);
	  }

	  async deployManager(ballotModelAddress, elasticDAOAddress, settingsModelAddress, vaultAddress, voteModelAddress, votingTokenAddress, hasPenalty, [approval, maxSharesPerTokenHolder, minBlocksForPenalty, minDurationInBlocks, minPenaltyInShares, minRewardInShares, minSharesToCreate, penalty, quorum, reward], overrides = {}) {
	    validateIsAddress$1(ballotModelAddress, {
	      prefix: prefix$i
	    });
	    validateIsAddress$1(elasticDAOAddress, {
	      prefix: prefix$i
	    });
	    validateIsAddress$1(settingsModelAddress, {
	      prefix: prefix$i
	    });
	    validateIsAddress$1(vaultAddress, {
	      prefix: prefix$i
	    });
	    validateIsAddress$1(voteModelAddress, {
	      prefix: prefix$i
	    });
	    validateIsAddress$1(votingTokenAddress, {
	      prefix: prefix$i
	    });
	    const payload = [ballotModelAddress, elasticDAOAddress, settingsModelAddress, vaultAddress, voteModelAddress, votingTokenAddress, hasPenalty, [this.toEthersBigNumber(approval, 18), this.toEthersBigNumber(maxSharesPerTokenHolder, 18), this.toEthersBigNumber(minBlocksForPenalty), this.toEthersBigNumber(minDurationInBlocks), this.toEthersBigNumber(minPenaltyInShares, 18), this.toEthersBigNumber(minRewardInShares, 18), this.toEthersBigNumber(minSharesToCreate, 18), this.toEthersBigNumber(penalty, 18), this.toEthersBigNumber(quorum, 18), this.toEthersBigNumber(reward, 18)]];
	    const factory = await this.contract;
	    const managerDeployedFilter = factory.filters.ManagerDeployed();
	    const managerDeployedFilterPromise = new Promise(async (resolve, reject) => {
	      let tx = {};

	      const handler = ({
	        transactionHash,
	        topics
	      }) => {
	        if (transactionHash === tx.hash) {
	          this.sdk.provider.off(managerDeployedFilter, handler);
	          resolve(`0x${topics[1].substring(26)}`);
	        }
	      };

	      this.sdk.provider.on(managerDeployedFilter, handler);
	      tx = await factory.deployManager(...payload, this.sanitizeOverrides(overrides));
	      await tx.wait(2);
	      reject();
	    });
	    return new TransactionalVoteManager(await managerDeployedFilterPromise);
	  }

	}

	const TransactionalVote$1 = TransactionalVote;
	const TransactionalVoteBallot$1 = TransactionalVoteBallot;
	const TransactionalVoteFactory$1 = TransactionalVoteFactory;
	const TransactionalVoteManager$1 = TransactionalVoteManager;
	const TransactionalVoteSettings$1 = TransactionalVoteSettings;
	class Models$1 extends Base {
	  get TransactionalVote() {
	    return {
	      contract: (...args) => TransactionalVote$1.contract(this.sdk, ...args),
	      deserialize: (...args) => TransactionalVote$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get TransactionalVoteBallot() {
	    return {
	      contract: (...args) => TransactionalVoteBallot$1.contract(this.sdk, ...args),
	      deserialize: (...args) => TransactionalVoteBallot$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get TransactionalVoteSettings() {
	    return {
	      contract: (...args) => TransactionalVoteSettings$1.contract(this.sdk, ...args),
	      deserialize: (...args) => TransactionalVoteSettings$1.deserialize(this.sdk, ...args),
	      managerContract: (...args) => TransactionalVoteSettings$1.managerContract(this.sdk, ...args)
	    };
	  }

	}
	class TransactionalVoteModule extends Base {
	  get transactionalVoteFactory() {
	    return new TransactionalVoteFactory$1(this.sdk, this.sdk.env.elasticDAO.modules.transactionalVote.factoryAddress);
	  }

	  get transactionalVoteManager() {
	    return new TransactionalVoteManager$1(this.sdk, this.sdk.env.elasticDAO.modules.transactionalVote.managerAddress);
	  }

	  get models() {
	    return new Models$1(this.sdk);
	  }

	}

	class ModulesClass extends Base {
	  get informationalVote() {
	    return new InformationalVoteModule(this.sdk);
	  }

	  get transactionalVote() {
	    return new TransactionalVoteModule(this.sdk);
	  }

	}

	const Balance$1 = Balance;
	const BalanceMultipliers$1 = BalanceMultipliers;
	const DAO$1 = DAO;
	const Ecosystem$1 = Ecosystem;
	const ElasticDAO$1 = ElasticDAO;
	const ElasticDAOFactory$1 = ElasticDAOFactory;
	const ElasticModule$1 = ElasticModule;
	const Modules = ModulesClass;
	const Token$1 = Token;
	const TokenHolder$1 = TokenHolder;
	const utils$4 = {
	  buildError: buildError$1,
	  upTo,
	  validate: validate$1
	};
	class Models$2 extends Base {
	  get Balance() {
	    return {
	      contract: (...args) => Balance$1.contract(this.sdk, ...args),
	      deserialize: (...args) => Balance$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get BalanceMultipliers() {
	    return {
	      contract: (...args) => BalanceMultipliers$1.contract(this.sdk, ...args),
	      deserialize: (...args) => BalanceMultipliers$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get DAO() {
	    return {
	      contract: (...args) => DAO$1.contract(this.sdk, ...args),
	      deserialize: (...args) => DAO$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get Ecosystem() {
	    return {
	      contract: (...args) => Ecosystem$1.contract(this.sdk, ...args),
	      deserialize: (...args) => Ecosystem$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get ElasticModule() {
	    return {
	      contract: (...args) => ElasticModule$1.contract(this.sdk, ...args),
	      deserialize: (...args) => ElasticModule$1.deserialize(this.sdk, ...args),
	      deserializeByName: (...args) => ElasticModule$1.deserializeByName(this.sdk, ...args)
	    };
	  }

	  get Token() {
	    return {
	      contract: (...args) => Token$1.contract(this.sdk, ...args),
	      deserialize: (...args) => Token$1.deserialize(this.sdk, ...args)
	    };
	  }

	  get TokenHolder() {
	    return {
	      contract: (...args) => TokenHolder$1.contract(this.sdk, ...args),
	      deserialize: (...args) => TokenHolder$1.deserialize(this.sdk, ...args)
	    };
	  }

	}
	class SDK {
	  constructor({
	    account,
	    contract,
	    env,
	    provider,
	    signer
	  }) {
	    this.account = account;
	    this.contract = contract;
	    this.env = env;
	    this.provider = provider;
	    this.signer = signer;
	  }

	  get elasticDAOFactory() {
	    return new ElasticDAOFactory$1(this);
	  }

	  get models() {
	    return new Models$2(this);
	  }

	  get modules() {
	    return new Modules(this);
	  }

	}
	var index = (({
	  account,
	  contract,
	  env,
	  provider,
	  signer
	}) => new SDK({
	  account,
	  contract,
	  env,
	  provider,
	  signer
	}));

	exports.Balance = Balance$1;
	exports.BalanceMultipliers = BalanceMultipliers$1;
	exports.DAO = DAO$1;
	exports.Ecosystem = Ecosystem$1;
	exports.ElasticDAO = ElasticDAO$1;
	exports.ElasticDAOFactory = ElasticDAOFactory$1;
	exports.ElasticModule = ElasticModule$1;
	exports.InformationalVote = InformationalVote$1;
	exports.InformationalVoteBallot = InformationalVoteBallot$1;
	exports.InformationalVoteFactory = InformationalVoteFactory$1;
	exports.InformationalVoteManager = InformationalVoteManager$1;
	exports.InformationalVoteSettings = InformationalVoteSettings$1;
	exports.Models = Models$2;
	exports.Modules = Modules;
	exports.SDK = SDK;
	exports.Token = Token$1;
	exports.TokenHolder = TokenHolder$1;
	exports.default = index;
	exports.isBalance = isBalance;
	exports.isBalanceMultipliers = isBalanceMultipliers;
	exports.isDAO = isDAO;
	exports.isEcosystem = isEcosystem;
	exports.isElasticModule = isElasticModule;
	exports.isInformationalVote = isInformationalVote;
	exports.isInformationalVoteBallot = isInformationalVoteBallot;
	exports.isInformationalVoteSettings = isInformationalVoteSettings;
	exports.isToken = isToken;
	exports.isTokenHolder = isTokenHolder;
	exports.utils = utils$4;
	exports.validateIsBalance = validateIsBalance;
	exports.validateIsBalanceMultipliers = validateIsBalanceMultipliers;
	exports.validateIsDAO = validateIsDAO;
	exports.validateIsEcosystem = validateIsEcosystem;
	exports.validateIsElasticModule = validateIsElasticModule;
	exports.validateIsInformationalVote = validateIsInformationalVote;
	exports.validateIsInformationalVoteBallot = validateIsInformationalVoteBallot;
	exports.validateIsInformationalVoteSettings = validateIsInformationalVoteSettings;
	exports.validateIsToken = validateIsToken;
	exports.validateIsTokenHolder = validateIsTokenHolder;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
